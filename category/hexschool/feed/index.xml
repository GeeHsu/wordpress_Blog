<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>六角學院 &#8211; wordpress_blog</title>
	<atom:link href="/wordpress_blog/category/hexschool/feed/" rel="self" type="application/rss+xml" />
	<link>/wordpress_blog</link>
	<description>This is a dynamic to static website.</description>
	<lastBuildDate>Wed, 06 Apr 2022 06:55:25 +0000</lastBuildDate>
	<language>zh-TW</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>/wordpress_blog/wp-content/uploads/2022/03/logo.png</url>
	<title>六角學院 &#8211; wordpress_blog</title>
	<link>/wordpress_blog</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>JavaScript 必修篇 &#8211; 前端修練全攻略 (2)</title>
		<link>/wordpress_blog/javascript-compulsory-2/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Mon, 28 Mar 2022 07:23:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=585</guid>

					<description><![CDATA[AJAX – 網路請求 什麼是 AJAX？它如何改善網頁使用體驗 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2>AJAX – 網路請求</h2>



<h3>什麼是 AJAX？它如何改善網頁使用體驗？</h3>



<ul><li><a href="https://zh.wikipedia.org/wiki/AJAX" target="_blank" rel="noreferrer noopener">AJAX – 維基百科</a></li></ul>



<p>AJAX 是非同步 JavaScript 與 XML 技術。</p>



<h3>什麼是網路請求？</h3>



<ul><li>透過 Chrome 執行 Enter URL 動作，我傳送了一個網路請求，取得：get URL 網頁上的資訊</li><li>其他軟體也可以發出網路請求</li><li>透過 JS 發出網路請求</li></ul>



<h3>從網頁架構瞭解網頁請求 – 上集</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;ul class="list"&gt;&lt;/ul&gt;
  &lt;img src="https://images.unsplash.com/photo-1630042111810-af23e1de9176?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=736&amp;q=80" alt="Photo by Lissete Laverde"&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

console.log('1234');</code></pre>



<ul><li>Chrome Network – 開發人員工具</li></ul>



<h3>從網頁架構瞭解網頁請求 – 下集</h3>



<p>網頁請求先後分別是 index.html 的 HTML 結構、 img src、all.js，共發了3次網頁請求。</p>



<ul><li>Chrome get 取得請求 → 本地端伺服器</li><li>Chrome ← 本地端伺服器</li></ul>



<h3>網頁請求狀態碼</h3>



<ul><li><a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status" target="_blank">HTTP 狀態碼 – MDN文件</a><ul><li>資訊回應 (Informational responses, 100 -199)</li><li>成功回應 (Successful responses, 200 – 299)</li><li>重定向 (Redirects , 300 – 399)</li><li>用戶端錯誤 (Client errors, 400 – 499)</li><li>伺服器端錯誤 (Server errors, 500 – 599)</li></ul></li></ul>



<h4>狀態碼(Status)有哪些</h4>



<ul><li>404 Not Found 伺服器找不到請求的資源</li><li>200 OK 請求成功</li><li>304 Not Modified</li><li>500 Internal Server Error 伺服器端發生未知或無法處理的錯誤</li></ul>



<h4>清除快取並強制重新載入 (開發人員工具要打開)</h4>



<ul><li>重新整理圖示長按左鍵後選取清除快取並強制重新載入</li><li>重新整理圖示右鍵後選取清除快取並強制重新載入</li></ul>



<h3>request、response 講解</h3>



<ul><li>Google Network → Name – index.html → Headers → Request Headers</li></ul>



<p>request(請求)：傳送給伺服器要什麼資料。</p>



<p>response(回傳)：回傳給瀏覽器資料，response header、response data</p>



<h3>用 Node.js 開啟伺服器，更加瞭解 request、response 的差異</h3>



<pre class="wp-block-code"><code>// app.js


const http = require('http');

http.createServer(function(request, response) {
  console.log(request);
  if(request.url == '/') {
    console.log('接收到網頁請求');
    response.writeHead(200, {'Content-Type': 'text/HTML'});
    response.write('&lt;h1&gt;index&lt;/h1&gt;');
    response.end();
  }

}).listen(process.env.PORT || 3000);
console.log('Server已開啟port: 3000.');</code></pre>



<h3>AJAX – 網路請求小節測驗</h3>



<h2>AJAX – axios 套件教學</h2>



<h3>各種發出網路請求的 JS 寫法種類介紹</h3>



<p>AJAX 透過 JS 發出網路請求。</p>



<h4>JavaScript 原生寫法</h4>



<ul><li>XMLHttpRequest –&nbsp;<a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank">連結</a></li><li>Fetch –&nbsp;<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noreferrer noopener">連結</a></li></ul>



<pre class="wp-block-code"><code>// XMLHttpRequest 範例

function reqListener () {
  console.log(this.responseText);
}

var oReq = new XMLHttpRequest();
oReq.addEventListener("load", reqListener);
oReq.open("GET", "http://www.example.org/example.txt");
oReq.send();</code></pre>



<pre class="wp-block-code"><code>// Fetch 範例

fetch('http://example.com/movies.json')
  .then(function(response) {
    return response.json();
  })
  .then(function(myJson) {
    console.log(myJson);
  });

</code></pre>



<h4>套件，需額外載入 JS</h4>



<ul><li>axios –&nbsp;<a href="https://github.com/axios/axios" target="_blank" rel="noreferrer noopener">連結</a>、Features</li></ul>



<h3>axios 環境安裝</h3>



<ul><li><a rel="noreferrer noopener" href="https://github.com/axios/axios" target="_blank">axios 套件連結</a></li></ul>



<h4>套件cdn 程式碼與自己撰寫載入的程式碼載入順序有差</h4>



<p>套件程式碼載入放在自己撰寫的程式碼之前。</p>



<h4>檢查套件載入有沒有成功</h4>



<ul><li>使用 Google Network 查看 Status</li><li>使用 console.log(axios);</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// 測試套件有沒有載入成功
console.log(axios);</code></pre>



<h3>axios – 嘗試串接外部資料</h3>



<ul><li><a href="https://hexschool.github.io/ajaxHomework/data.json" target="_blank" rel="noreferrer noopener">練習用的 json 連結</a></li></ul>



<pre class="wp-block-code"><code>// 範例程式碼

axios.get('https://hexschool.github.io/ajaxHomework/data.json')
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// 測試套件有沒有載入成功
// console.log(axios);

// https://hexschool.github.io/ajaxHomework/data.json

axios.get('https://hexschool.github.io/ajaxHomework/data.json')
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });</code></pre>



<h3>axios – response 參數詳細講解</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// 測試套件有沒有載入成功
// console.log(axios);

// https://hexschool.github.io/ajaxHomework/data.json

axios.get('https://hexschool.github.io/ajaxHomework/data.json')
  .then(function (response) {
    console.log(response);

    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });</code></pre>



<h3 class="has-background" style="background-color:#ff6663">axios – 將外部資料寫入到網頁上</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;h2 class="title"&gt;&lt;/h2&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// 測試套件有沒有載入成功
// console.log(axios);

// https://hexschool.github.io/ajaxHomework/data.json

axios.get('https://hexschool.github.io/ajaxHomework/data.json')
  .then(function (response) {
    let ary = response.data;
    console.log(ary&#91;0].name);
    const title = document.querySelector('.title');
    // title.innerHTML = '王小明';
    // title.innerHTML = ary&#91;0].name;
    title.textContent = ary&#91;0].name;
  });</code></pre>



<h4>我的提問，外部資料圖片抓取問題</h4>



<pre class="wp-block-code"><code>// index.html

&lt;ul class="list"&gt;&lt;/ul&gt;</code></pre>



<pre class="wp-block-code"><code>// style.css

img {
  width: 320px;
  height: 240px;
}
</code></pre>



<pre class="wp-block-code"><code>// script.js

// 外部資料
// https://ptx.transportdata.tw/MOTC/v2/Tourism/ScenicSpot?%24top=40&amp;%24format=JSON

// 資料模擬
let data = &#91;
  {
    name: "green mountain across body of water",
    pictureUrl:
      "https://images.unsplash.com/photo-1464822759023-fed622ff2c3b?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80"
  },
  {
    name: "mountains reflected on water"
    // 沒有 pictureUrl
  },
  {
    name: "brown field near tree during daytime",
    pictureUrl: "" // pictureUrl 為空值
  },
  {
    name: "花瓶岩",
    pictureUrl: "http://210.69.151.212/ptngis/files/photos/l/marks/C1-11501.jpg" // pictureUrl 圖片網址錯誤
  }
];
const list = document.querySelector(".list");

// 初始化狀態 - 渲染資料
function dataRender() {
  // 初始化一個空字串
  let str = "";

  data.forEach(function (item, index) {
    // let content = `&lt;li&gt;
    //   &lt;h2&gt;${item.name}&lt;/h2&gt;
    //   &lt;img src="${item.pictureUrl}" alt="圖片"&gt;
    // &lt;/li&gt;`;
    // str+=content;

    let content = `&lt;li&gt;
        &lt;h2&gt;${item.name}&lt;/h2&gt;
        &lt;img src="${item.pictureUrl}" alt="${item.name}" &gt;
      &lt;/li&gt;`;
    str += content;
    // }
  });

  list.innerHTML = str;
}
dataRender();

// 綁定監聽事件
// 最後一項錯誤的網址，瀏覽器會先去找看看有沒有，如果沒有才會觸發。所以可以看到最後一張比較慢才顯示
const images = document.querySelectorAll("img");
images.forEach((item) =&gt; {
  item.addEventListener("error", (e) =&gt; {
    // console.log(e.target);
    e.target.setAttribute(
      "src",
      "https://images.unsplash.com/photo-1561657819-51c0511e35ab?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=871&amp;q=80"
    );
  });
});

// 第一個資料正常：圖片正常
// 第二個沒有資料：使用取代圖片
// 第三個是空值
// 第四個是錯誤的圖片網址

// 關於陣列圖片抓取的問題
// 關於沒有資料、空值、錯誤的圖片網址，該怎麼處理、避免圖片區域是空白情形?
</code></pre>



<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event" target="_blank" rel="noreferrer noopener">error event – MDN 文件連結</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">axios – 非同步觀念</h3>



<pre class="wp-block-code"><code>// all.js

// 測試套件有沒有載入成功
// console.log(axios);

// https://hexschool.github.io/ajaxHomework/data.json

let ary = &#91;];

axios.get('https://hexschool.github.io/ajaxHomework/data.json')
  .then(function (response) {
    console.log('資料有回傳了');
    ary = response.data;
    console.log(ary);
  });

  console.log(ary);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   &#91;]           all.js:15
   資料有回傳了  all.js:10
   &#91;{...}]      all.js:12</code></pre>



<h3 class="has-background" style="background-color:#ff6663">透過函式設計處理非同步</h3>



<p>資料回傳後，再執行函式。</p>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;h2 class="title"&gt;&lt;/h2&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// 測試套件有沒有載入成功
// console.log(axios);

// https://hexschool.github.io/ajaxHomework/data.json

let ary = &#91;];

axios.get('https://hexschool.github.io/ajaxHomework/data.json')
  .then(function(response) {
    console.log('資料有回傳了'); // 1
    ary = response.data;
    renderData();
  });

// 渲染資料
function renderData() {
  console.log(ary); // 2
  const title =  document.querySelector('.title');
  // title.textContent = '測試';
  title.textContent = ary&#91;0].name;
}
console.log(ary);  // 3

// 執行的先後順序 3 → 1 → 2</code></pre>



<h3>AJAX – axios 套件教學小節測驗</h3>



<h3 class="has-background" style="background-color:#ff6663">第五週總複習</h3>



<h2>網路請求補充知識 (還未觀看)</h2>



<h3>從 Wireshark、Fiddler 深入了解網路請求</h3>



<h3>計算機網路總結</h3>



<h2>AJAX POST API 講解</h2>



<h3>網路請求種類介紹</h3>



<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods" target="_blank" rel="noreferrer noopener">HTTP 請求方法</a></li></ul>



<h3>post 網路請求文件介紹</h3>



<ul><li><a rel="noreferrer noopener" href="https://github.com/hexschool/nodejs_ajax_tutorial" target="_blank">本小節練習用 API 網址</a><ul><li>註冊</li><li>登入</li></ul></li></ul>



<h4>六角學院 AJAX 練習</h4>



<p>注意，此範例僅供練習，並不會儲存用戶資料至資料庫(僅緩存)。</p>



<h5>註冊</h5>



<p>新增一個帳號。</p>



<ul><li>Method: POST</li><li>URL: https://hexschool-tutorial.herokuapp.com/api/signup</li><li>Data:</li></ul>



<pre class="wp-block-code"><code>{
  email: 'lovef2e@hexschool.com',
  password: '12345678'
}</code></pre>



<ul><li>Success Response:</li></ul>



<pre class="wp-block-code"><code>{
  "success": true,
  "result": {},
  "message": "帳號註冊成功"
}</code></pre>



<ul><li>Error Response:</li></ul>



<pre class="wp-block-code"><code>{
  "success": false,
  "result": {},
  "message": "此帳號已被使用"
}</code></pre>



<h5>登入</h5>



<p>登入一個已存在的帳號。</p>



<ul><li>Method: POST</li><li>URL: https://hexschool-tutorial.herokuapp.com/api/signin</li><li>Data:</li></ul>



<pre class="wp-block-code"><code>{
  email: 'lovef2e@hexschool.com',
  password: '12345678'
}</code></pre>



<ul><li>Success Response:</li></ul>



<pre class="wp-block-code"><code>{
  "success": true,
  "result" {},
  "message": "登入成功"
}</code></pre>



<ul><li>Error Response:</li></ul>



<pre class="wp-block-code"><code>{
  "success": false,
  "result": {},
  "message": "此帳號不存在或帳號密碼錯誤"
}</code></pre>



<h3>四種常見的 POST 請求 content-type 介紹</h3>



<h4>請求資料格式 request header Content-Type</h4>



<ul><li>application/x-www-form-urlencoded</li><li>application/json</li><li>multipart/form-data</li><li>text/plain (記事本格式最少使用)</li></ul>



<p>axios 預設屬於第2種請求資料格式，支援其他格式、可以自己設定。</p>



<p>multipart/form-data，傳送檔案格式的時候，檔案：圖片、pdf、word、mp4。</p>



<h3>透過 axios 實作註冊 post 網路請求</h3>



<ul><li><a rel="noreferrer noopener" href="https://github.com/hexschool/nodejs_ajax_tutorial" target="_blank">本小節練習用 API 網址</a></li><li><a href="https://github.com/axios/axios" target="_blank" rel="noreferrer noopener">axios 文件連結</a></li></ul>



<pre class="wp-block-code"><code>// axios post 範例

axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;  
&lt;/head&gt;
&lt;body&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// URL
// https://hexschool-tutorial.herokuapp.com/api/signup

let obj =  {
  email: 'hexschool2021@hexschool.com',
  password: '12345678'
}

axios.post('https://hexschool-tutorial.herokuapp.com/api/signup', obj)
.then(function (response) {
  console.log(response);
})
.catch(function (error) {
  console.log(error);
});</code></pre>



<pre class="wp-block-code"><code>// Google Console
   {data: {…}, status: 200, statusText: 'OK', headers: {…}, config: {…},&nbsp;…}
   XHR finished loading: POST "https://hexschool-tutorial.herokuapp.com/api/signup"
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">從 chrome 觀察 post 請求</h3>



<ul><li>Chrome Network<ul><li>Name</li><li>Headers</li><li>Payload</li><li>Preview</li><li>Response</li></ul></li></ul>



<pre class="wp-block-code"><code>// all.js - 1

// URL
// https://hexschool-tutorial.herokuapp.com/api/signup

let obj =  {
  email: 'hexschool2021@hexschool.com',
  password: '12345678'
}

axios.post('https://hexschool-tutorial.herokuapp.com/api/signup', obj)
.then(function (response) {
  console.log(response);
})
.catch(function (error) {
  console.log(error);
});</code></pre>



<pre class="wp-block-code"><code>// index.html - 2

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;  
&lt;/head&gt;
&lt;body&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

// URL
// https://hexschool-tutorial.herokuapp.com/api/signup

function callSignUp(){
  let obj =  {
    email: 'hexschool2021@hexschool.com',
    password: '12345678'
  }
  
  axios.post('https://hexschool-tutorial.herokuapp.com/api/signup', obj)
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
}</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
&gt;  callSignUp();
&lt;  undefined
   {data: {…}, status: 200, statusText: 'OK', headers: {…}, config: {…},&nbsp;…}
   XHR finished loading: POST "https://hexschool-tutorial.herokuapp.com/api/signup"
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">實作 axios DOM 表單註冊流程</h3>



<ul><li><a href="https://codepen.io/hexschool/pen/jOVgyPr?editors=1010" target="_blank" rel="noreferrer noopener">本小節 Codepen 範例程式碼</a></li></ul>



<pre class="wp-block-code"><code>// 範例程式碼 index.html

帳號：
  &lt;input type="text" class="account"&gt;
  &lt;br&gt;
  密碼：
  &lt;input type="text" class="password"&gt;
  &lt;br&gt;
  &lt;input type="button" value="送出" class="send"&gt;
  &lt;script src="https://unpkg.com/axios/dist/axios.min.js"&gt;&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// 範例程式碼 - script.js

const account = document.querySelector('.account');
const password = document.querySelector('.password');
const send = document.querySelector('.send');

send.addEventListener('click',function(e){
  callSingUp()
})
function callSingUp(){
  if (account.value == "" || password.value==""){
    alert("請填寫正確資訊");
    return;
  }
  let obj = {};
  obj.email = account.value;
  obj.password = password.value;
  axios.post('https://hexschool-tutorial.herokuapp.com/api/signup', obj)
    .then(function (response) {
      if (response.data.message=="帳號註冊成功"){
        alert("恭喜帳號註冊成功");
      }else{
        alert("帳號註冊失敗，有可能有人用你的email註冊！");
      }
      account.value = "";
      password.value="";
    })
    .catch(function (error) {
      console.log(error);
    });
}</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt; 
  &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="container"&gt;
    &lt;form&gt;
      &lt;h2&gt;註冊帳號&lt;/h2&gt;
      &lt;label for="account"&gt;帳號：&lt;/label&gt;
      &lt;input id="account" type="text" class="account" placeholder="請輸入帳號"&gt;
      
      &lt;br&gt;&lt;br&gt;
      
      &lt;label for="password"&gt;密碼：&lt;/label&gt;
      &lt;input id="password" type="password" class="password" placeholder="請輸入密碼"&gt;
      
      &lt;br&gt;&lt;br&gt;
      
      &lt;input type="button" value="送出" class="send"&gt;
    &lt;/form&gt;
  &lt;/div&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// style.css

/* css reset start */
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}
/* css reset end */

/* css reset settings start */
*,*::before,*::after {
  box-sizing: border-box;
}

img {
  max-width: 100%;
  height: auto;
}
/* css reset settings end */

/* css styles start */
*,*:before,*:after {
  box-sizing: border-box;
}

.container {
  max-width: 940px;
  margin: 12% auto;
}

form {
  max-width: 375px;
  width: 100%;
  margin: 0 auto;
  background: #eee;
}

form h2 {
  font-size: 28px;
  text-align: center;
  padding-top: 16px;
  padding-bottom: 16px;
}

form label {
  width: 100%;
  display: block;
  margin-bottom: 16px;
  padding-left: 5%;
  font-size: 20px;
}

.account, .password {
  width: 90%;
  padding-top: 8px;
  padding-bottom: 8px;
  margin-left: 5%;
  margin-right: 5%;
  font-size: 20px;
}

.send {
  margin-left: 5%;
  margin-bottom: 16px;
  padding: 8px 16px;
  background: #353535;
  color: #fff;
  border-radius: 4px;
  border: 0;
  font-size: 20px;
}

.send:hover {
  background: #c9184a;
}

/* css styles end */</code></pre>



<pre class="wp-block-code"><code>// all.js

// URL
// https://hexschool-tutorial.herokuapp.com/api/signup

const account = document.querySelector('.account');
const password = document.querySelector('.password');
const send = document.querySelector('.send');

// console.log(account,password,send);

send.addEventListener('click',function(e){
  // console.log('是否被點擊');
  callSignUp();

});

function callSignUp(){
  // email: 'hexschool2021@hexschool.com',
  // password: '12345678'
  if(account.value == "" || password.value == ""){
    alert("請填寫正確資訊");
    return;
  }
  let obj =  {};
  obj.email = account.value;
  obj.password = password.value;
  console.log(obj);
  
  axios.post('https://hexschool-tutorial.herokuapp.com/api/signup', obj)
  .then(function (response) {
    // console.log(response);
    // alert(response.data.message);
    if(response.data.message == "帳號註冊成功"){
      alert("恭喜帳號註冊成功");
    }
    else {
      alert("此帳號註冊失敗，有可能有人用你的email註冊！");
    }
    account.value = "";
    password.value = "";
  })
  .catch(function (error) {
    console.log(error);
  });
}</code></pre>



<h3 class="has-background" style="background-color:#ff6663">AJAX POST 小節作業</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt; 
  &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;!-- 註冊帳號 --&gt;
  &lt;div class="container"&gt;
    &lt;form&gt;
      &lt;h2&gt;註冊帳號&lt;/h2&gt;
      &lt;label for="account-signup"&gt;帳號：&lt;/label&gt;
      &lt;input id="account-signup" type="text" class="account account-signup" placeholder="請輸入帳號"&gt;
      
      &lt;br&gt;&lt;br&gt;
      
      &lt;label for="password-signup"&gt;密碼：&lt;/label&gt;
      &lt;input id="password-signup" type="password" class="password password-signup" placeholder="請輸入密碼"&gt;
      
      &lt;br&gt;&lt;br&gt;
      
      &lt;input type="button" value="送出" class="send send-signup"&gt;
    &lt;/form&gt;
  &lt;/div&gt;

  &lt;!-- 登入帳號 --&gt;
  &lt;div class="container"&gt;
    &lt;form&gt;
      &lt;h2&gt;登入帳號&lt;/h2&gt;
      &lt;label for="account-signin"&gt;帳號：&lt;/label&gt;
      &lt;input id="account-signin" type="text" class="account account-signin" placeholder="請輸入帳號"&gt;
      
      &lt;br&gt;&lt;br&gt;
      
      &lt;label for="password-signin"&gt;密碼：&lt;/label&gt;
      &lt;input id="password-signin" type="password" class="password password-signin" placeholder="請輸入密碼"&gt;
      
      &lt;br&gt;&lt;br&gt;
      
      &lt;input type="button" value="送出" class="send send-signin"&gt;
    &lt;/form&gt;
  &lt;/div&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// style.css

/* css reset start */
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}
/* css reset end */

/* css reset settings start */
*,*::before,*::after {
  box-sizing: border-box;
}

img {
  max-width: 100%;
  height: auto;
}
/* css reset settings end */

/* css styles start */
.container {
  max-width: 940px;
  margin: 12% auto;
}

form {
  max-width: 375px;
  width: 100%;
  margin: 0 auto;
  background: #eee;
}

form h2 {
  font-size: 28px;
  text-align: center;
  padding-top: 16px;
  padding-bottom: 16px;
}

form label {
  width: 100%;
  display: block;
  margin-bottom: 16px;
  padding-left: 5%;
  font-size: 20px;
}

.account, .password {
  width: 90%;
  padding-top: 8px;
  padding-bottom: 8px;
  margin-left: 5%;
  margin-right: 5%;
  font-size: 20px;
}

.send {
  margin-left: 5%;
  margin-bottom: 16px;
  padding: 8px 16px;
  background: #353535;
  color: #fff;
  border-radius: 4px;
  border: 0;
  font-size: 20px;
}

.send:hover {
  background: #c9184a;
}

/* css styles end */</code></pre>



<pre class="wp-block-code"><code>// all.js

// URL
// https://hexschool-tutorial.herokuapp.com/api/signup

const accountSignup = document.querySelector('.account-signup');
const passwordSignup = document.querySelector('.password-signup');
const sendSignup = document.querySelector('.send-signup');

// console.log(accountSignup,passwordSignup,sendSignup);

sendSignup.addEventListener('click',function(e){
  // console.log('是否被點擊');
  callSignUp();

});

function callSignUp(){
  // email: 'hexschool2021@hexschool.com',
  // password: '12345678'
  if(accountSignup.value == "" || passwordSignup.value == ""){
    alert("請填寫正確資訊");
    return;
  }
  let objSignup =  {};
  objSignup.email = accountSignup.value;
  objSignup.password = passwordSignup.value;
  // console.log(objSignup);
  
  axios.post('https://hexschool-tutorial.herokuapp.com/api/signup', objSignup)
  .then(function (response) {
    // console.log(response);
    // alert(response.data.message);
    if(response.data.message == "帳號註冊成功"){
      alert("恭喜帳號註冊成功");
    }
    else {
      alert("此帳號註冊失敗，有可能有人用你的email註冊！");
    }
    accountSignup.value = "";
    passwordSignup.value = "";
  })
  .catch(function (error) {
    console.log(error);
  });
}

// URL
// https://hexschool-tutorial.herokuapp.com/api/signin

const accountSignin = document.querySelector('.account-signin');
const passwordSignin = document.querySelector('.password-signin');
const sendSignin = document.querySelector('.send-signin');

// console.log(accountSignin,passwordSignin,sendSignin);

sendSignin.addEventListener('click',function(e){
  // console.log('是否被點擊');
  callSignin();
});

function callSignin(){
  if(accountSignin.value == "" || passwordSignin.value == ""){
    alert("請填寫正確資訊");
    return;
  }
  let objSignin = {};
  objSignin.email = accountSignin.value;
  objSignin.password = passwordSignin.value;
  // console.log(objSignin);

  axios.post('https://hexschool-tutorial.herokuapp.com/api/signin', objSignin)
    .then(function (response) {
      // console.log(response);
      // alert(response.data.message);
      if(response.data.message == '登入成功'){
        alert("帳號登入成功");
      }
      else {
        alert('此帳號登入失敗，請重新登入帳號');
      }
      accountSignin.value = "";
      passwordSignin.value = "";
    })
    .catch(function (error) {
      console.log(error);
    })
}
</code></pre>



<h3>AJAX POST API 講解小節測驗</h3>



<h2>todolist 待辦事項</h2>



<h3>todolist 經典題目介紹</h3>



<ul><li><a href="https://codepen.io/hexschool/pen/OJWRqrN" target="_blank" rel="noreferrer noopener">todolist 範例程式碼</a></li></ul>



<h3>取值複習 getAttribute</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h2 class="title"&gt;標題內容&lt;/h2&gt;
  
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const title = document.querySelector(".title");

// console.log(title);

title.addEventListener("click",function(e){
  // console.log(e.target);
  console.log(e.target.textContent);
  console.log(e.target.getAttribute("class"));
});</code></pre>



<h3>範圍內容取值</h3>



<h4>方法一</h4>



<pre class="wp-block-code"><code>// index.html - 1

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h2 class="title"&gt;
    &lt;span&gt;標題內容&lt;/span&gt;
    &lt;input type="button" value="檢視"&gt;
  &lt;/h2&gt;
  
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 1

const title = document.querySelector(".title");

// console.log(title);

title.addEventListener("click",function(e){
  // console.log(e.target);
  // console.log(e.target.textContent);
  // console.log(e.target.getAttribute("class"));
  
  // console.log(e.target.nodeName);
  if (e.target.nodeName!=="INPUT") {
    return;
  }
  // console.log('你有正確點到 input');
  console.log(e.target.getAttribute("value"));

});</code></pre>



<h4>方法二</h4>



<pre class="wp-block-code"><code>// index.html - 2

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h2 class="title"&gt;
    &lt;span&gt;標題內容&lt;/span&gt;
    &lt;input type="button" class="view" value="檢視"&gt;
  &lt;/h2&gt;
  
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

const title = document.querySelector(".title");

title.addEventListener("click",function(e){
  if (e.target.getAttribute("class")=="view") {
    console.log(e.target.getAttribute("value"));
  }

});</code></pre>



<h3>監聽大範圍內容取值</h3>



<pre class="wp-block-code"><code>// index.html - 1

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="box"&gt;
    &lt;h2 class="title"&gt;
      &lt;span&gt;標題1&lt;/span&gt;
      &lt;input type="button" class="view" value="檢視1"&gt;
    &lt;/h2&gt;
    &lt;h2 class="title"&gt;
      &lt;span&gt;標題2&lt;/span&gt;
      &lt;input type="button" class="view" value="檢視2"&gt;
    &lt;/h2&gt;
    &lt;h2 class="title"&gt;
      &lt;span&gt;標題3&lt;/span&gt;
      &lt;input type="button" class="view" value="檢視3"&gt;
    &lt;/h2&gt;
  &lt;/div&gt;

  
  
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h4>方法一 – class 比較直覺、不會犯錯</h4>



<pre class="wp-block-code"><code>// all.js - 1

const list = document.querySelector('.box');
// console.log(list);
list.addEventListener('click',function(e){
  // console.log(e.target.nodeName);
  if (e.target.getAttribute('class') == 'view'){
    console.log(e.target.getAttribute('value'));

  }
});

</code></pre>



<h4>方法二</h4>



<pre class="wp-block-code"><code>// all.js - 2

const list = document.querySelector('.box');
// console.log(list);
list.addEventListener('click',function(e){
  // console.log(e.target.nodeName);
  if (e.target.nodeName == "INPUT"){
    console.log(e.target.getAttribute('value'));

  }
});
</code></pre>



<h4>方法三</h4>



<pre class="wp-block-code"><code>// all.js - 3

const list = document.querySelector('.box');
// console.log(list);
list.addEventListener('click',function(e){
  // console.log(e.target.nodeName);
  if (e.target.nodeName !== "INPUT"){
    return;
  }
  console.log(e.target.getAttribute('value'));

});
</code></pre>



<h3>data- 屬性妙用</h3>



<ul><li>data- 屬性取值，data-自訂名稱=”值”<ul><li>例如：data-num=”3″、data-content=”標題內容”</li></ul></li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h2 class="title" data-content="標題內容" data-num="3"&gt;標題內容&lt;/h2&gt;
  
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const title = document.querySelector('.title');
// console.log(title);

console.log(title.getAttribute("data-content"));
console.log(title.getAttribute("data-num"));

let data = title.getAttribute("data-content");

console.log(data);</code></pre>



<h3>HTML 結構設計</h3>



<h4>畫面實作</h4>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;input type="text" class="txt" placeholder="請輸入待辦事項"&gt;
  &lt;input type="button" class="save" value="儲存待辦"&gt;
  &lt;ul class="list"&gt;
    &lt;li&gt;待辦事項一 &lt;input class="delete" type="button" value="刪除待辦"&gt;&lt;/li&gt;
    &lt;li&gt;待辦事項二 &lt;input class="delete" type="button" value="刪除待辦"&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>資料初始化渲染</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;input type="text" class="txt" placeholder="請輸入待辦事項"&gt;
  &lt;input type="button" class="save" value="儲存待辦"&gt;
  &lt;ul class="list"&gt;
    
  &lt;/ul&gt;
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 1

let data = &#91;
  {
    "content": "待辦事項一"
  },
  {
    "content": "今天記得刷牙"
  }
]

let str = '';
data.forEach(function(item){
  str+=`
  &lt;li&gt;${item.content} &lt;input class="delete" type="button" value="刪除待辦"&gt;&lt;/li&gt;
  `
});
// console.log(str);
const list = document.querySelector(".list");
list.innerHTML = str;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

let data = &#91;
  {
    "content": "待辦事項一"
  },
  {
    "content": "今天記得刷牙"
  }
]

function renderData(){
  let str = '';
  data.forEach(function(item){
    str+=`
    &lt;li&gt;${item.content} &lt;input class="delete" type="button" value="刪除待辦"&gt;&lt;/li&gt;
    `
  });
  // console.log(str);
  const list = document.querySelector(".list");
  list.innerHTML = str;
}

renderData();
</code></pre>



<h3 class="has-background" style="background-color:#ff6663">待辦新增功能</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;input type="text" class="txt" placeholder="請輸入待辦事項"&gt;
  &lt;input type="button" class="save" value="儲存待辦"&gt;
  &lt;ul class="list"&gt;
    
  &lt;/ul&gt;
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const txt = document.querySelector('.txt');
const save = document.querySelector('.save');
// console.log(txt);
// console.log(save);

let data = &#91;];

function renderData(){
  let str = '';
  data.forEach(function(item){
    str+=`
    &lt;li&gt;${item.content} &lt;input class="delete" type="button" value="刪除待辦"&gt;&lt;/li&gt;
    `
  });
  // console.log(str);
  const list = document.querySelector(".list");
  list.innerHTML = str;
}

save.addEventListener('click',function(e){
  // console.log('你點擊到了');

  if(txt.value==""){
    alert("請輸入內容");
    return;
  }
  // {
  //   "content": "待辦事項一"
  // }
  let obj = {};
  obj.content = txt.value;
  // console.log(txt.value);
  // console.log(obj);
  data.push(obj);
  renderData();
});

// renderData();</code></pre>



<h3>待辦刪除功能-前置解說</h3>



<ul><li>splice 刪除指定資料</li><li>forEach 會用到 index 索引值</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;input type="text" class="txt" placeholder="請輸入待辦事項"&gt;
  &lt;input type="button" class="save" value="儲存待辦"&gt;
  &lt;ul class="list"&gt;
    
  &lt;/ul&gt;
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const txt = document.querySelector('.txt');
const save = document.querySelector('.save');
// console.log(txt);
// console.log(save);

let data = &#91;];

function renderData(){
  let str = '';
  data.forEach(function(item,index){
    str+=`
    &lt;li&gt;${item.content} &lt;input class="delete" type="button" data-num="${index}" value="刪除待辦"&gt;&lt;/li&gt;
    `
  });
  // console.log(str);
  const list = document.querySelector(".list");
  list.innerHTML = str;
}

save.addEventListener('click',function(e){
  // console.log('你點擊到了');

  if(txt.value==""){
    alert("請輸入內容");
    return;
  }
  // {
  //   "content": "待辦事項一"
  // }
  let obj = {};
  obj.content = txt.value;
  // console.log(txt.value);
  // console.log(obj);
  data.push(obj);
  renderData();
});

// renderData();</code></pre>



<h3 class="has-background" style="background-color:#ff6663">待辦刪除功能</h3>



<ul><li><a href="https://codepen.io/hexschool/pen/OJWRqrN" target="_blank" rel="noreferrer noopener">待辦功能刪除範例程式碼</a></li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;JS必修篇&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;input type="text" class="txt" placeholder="請輸入待辦事項"&gt;
  &lt;input type="button" class="save" value="儲存待辦"&gt;
  &lt;ul class="list"&gt;
    
  &lt;/ul&gt;
  &lt;script src="all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const txt = document.querySelector('.txt');
const save = document.querySelector('.save');
const list = document.querySelector('.list');
// console.log(txt);
// console.log(save);
// console.log(list);

let data = &#91;];

function renderData(){
  let str = '';
  data.forEach(function(item,index){
    str+=`
    &lt;li&gt;${item.content} &lt;input class="delete" type="button" data-num="${index}" value="刪除待辦"&gt;&lt;/li&gt;
    `
  });
  // console.log(str);
  const list = document.querySelector(".list");
  list.innerHTML = str;
}

// 新增待辦功能
save.addEventListener('click',function(e){
  // console.log('你點擊到了');

  if(txt.value==""){
    alert("請輸入內容");
    return;
  }
  // {
  //   "content": "待辦事項一"
  // }
  let obj = {};
  obj.content = txt.value;
  // console.log(txt.value);
  // console.log(obj);
  data.push(obj);
  renderData();
});

// 刪除待辦功能
list.addEventListener('click',function(e){
  // console.log(e.target.nodeName);
  if(e.target.getAttribute('class',"delete")!=="delete"){
    alert('你目前不是點擊到按鈕');
    return;
  }
  // alert('你目前有確實點到刪除按鈕');
  let num = e.target.getAttribute("data-num");
  console.log(num);
  data.splice(num,1);
  renderData();
});

// renderData();</code></pre>



<h3>todolist 待辦事項小節測驗</h3>



<h2>陣列資料操作</h2>



<h3>陣列操作 – map</h3>



<h4>JS array map</h4>



<ol><li>能將原始陣列運算後，重新組合回傳一個新陣列</li><li>不會影響到原陣列</li></ol>



<pre class="wp-block-code"><code>// all.js - 1

// 第一個範例
const arr = &#91;1,5,10];
const newArr = arr.map(function(item){
  return item*item;
});

console.log(newArr);
console.log(arr);

// 第二個範例
const data = &#91;1,8,13,20];
const newData = data.map(function(item){
  return item&gt;10;
});

console.log(data);
console.log(newData);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   (3) &#91;1, 25, 100]
   (3) &#91;1, 5, 10]
   (4) &#91;1, 8, 13, 20]
   (4) &#91;false, false, true, true]
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js -2

// 第三個範例
const data = &#91;1,8,13,20];
const newData = data.map(function(item){
  let obj = {};
  obj.checkNum = item &gt; 10;
  return obj;
});

console.log(data);
console.log(newData);

// {
//   checkNum: true;
// }</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   (4) &#91;1, 8, 13, 20]
   (4) &#91;{...},{...},{...},{...}]
&gt;</code></pre>



<h3>陣列操作 – map 補充</h3>



<ul><li>map 觀念補充</li><li>map、forEach 差異</li></ul>



<pre class="wp-block-code"><code>// all.js - 1

// map 觀念補充、map,forEach 差異

const arr = &#91;1,5,10];
const newArr = arr.map(function(item){
  // return item*item;
});

console.log(newArr);
console.log(arr);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   (3) &#91;undefined, undefined, undefined]
   (3) &#91;1, 5, 10]
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

// map 觀念補充、map,forEach 差異

const arr = &#91;1,5,10];
const newArr = arr.forEach(function(item){
  return item*item;
});

console.log(newArr);
console.log(arr);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   undefined
   (3) &#91;1, 5, 10]
&gt;</code></pre>



<p>forEach 並沒有回傳一個新陣列的特性、也沒辦法用 return 回傳值。forEach 使用時機，裡面資料都跑一次，加總、額外處理、空陣列組出要的資料。</p>



<pre class="wp-block-code"><code>// all.js - 3

// map 觀念補充、map,forEach 差異

const arr = &#91;1,5,10];
let total = 0;
arr.forEach(function(item){
  total+=item;
});

console.log(arr);
console.log(total);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
   (3) &#91;1, 5, 10]
   16
&gt;</code></pre>



<p>map 使用情境，新變數要拿原始變數回傳一個陣列的時候，處理陣列、回傳一個組合好的陣列，map 就比較合適。</p>



<ul><li>有無 return，forEach 沒有 return、map 有 return</li></ul>



<h3 class="has-background" style="background-color:#ff6663">陣列操作 – filter 資料篩選</h3>



<h4>JS array filter 篩選</h4>



<ol><li>篩選出符合條件的內容</li><li>不會影響到原陣列</li></ol>



<p>常用於比價、下拉選擇市區、有誰有及格。</p>



<pre class="wp-block-code"><code>// all.js - 1

// JS array filter 篩選
// 1.篩選出符合條件的內容，組合後回傳新陣列。
// 2.不會影響到原陣列
// 常用於比價、下拉選擇市區

const arr = &#91;1,5,10];
const newArr = arr.filter(function(item){
  return item &gt;= 5;
});

console.log(newArr);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   (2) &#91;5, 10]
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

// JS array filter 篩選
// 1.篩選出符合條件的內容，組合後回傳新陣列。
// 2.不會影響到原陣列
// 常用於比價、下拉選擇市區、有誰有及格

// 分數
const scoreData = &#91;
  {
    name: "小明",
    score: 88
  },
  {
    name: "小英",
    score: 62
  },
  {
    name: "小花",
    score: 53
  }
];

const filterScore = scoreData.filter(function(item){
  return item.score &gt;= 60;
});

console.log(filterScore);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   (2) &#91;{...},{...}]
&gt;</code></pre>



<h3>陣列操作 – find 尋找頭一筆資料</h3>



<pre class="wp-block-code"><code>// all.js

// JS array find 尋找頭一筆資料

const arr = &#91;1,2,3,5,10,20,30,40];

const newArr = arr.find(function(item){
  console.log(item);
  return item &gt;= 5;
});

console.log(newArr);

// 分數
const scoreData = &#91;
  {
    name: "小明",
    score: 88
  },
  {
    name: "小英",
    score: 62
  },
  {
    name: "小花",
    score: 53
  }
];

const filterScore = scoreData.find(function(item){
  return item.score &gt;= 60;
});

console.log(filterScore);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   1
   2
   3
   5
   5
   {name: '小明', score: 88}
&gt;</code></pre>



<h3>陣列操作 – findindex 尋找資料索引</h3>



<pre class="wp-block-code"><code>// all.js

// find 值提取出來
// findIndex 索引 編號

const colors = &#91;'red','blue','black'];

const blueIndex = colors.findIndex(function(item){
  return item == "blue";
});

console.log(blueIndex);

// 訂單編號

const orders = &#91;
  {
    name: '小廖',
    orderId: '12384955'
  },
  {
    name: '小華',
    orderId: '12384945'
  },
  {
    name: '小美',
    orderId: '12314955'
  },
];

const huaId = orders.findIndex(function(item){
  return item.orderId == "12384945";
});

console.log(huaId);
console.log(`這個訂單編號是${orders&#91;huaId].name}`);</code></pre>



<pre class="wp-block-code"><code>// Google Console

   1
   1
   這個訂單編號是小華
&gt;</code></pre>



<h3>陣列資料操作小節測驗</h3>



<h2>箭頭函式</h2>



<h3>函式陳述式與函式表達式差異</h3>



<pre class="wp-block-code"><code>// all.js - 1

// 箭頭函式

// 函式陳述式
function numA (x){
  return x * x;
}

// 函式表達式
const numB = function(x){
  return x * x;
}

const numC = (x) =&gt; {
  return x * x;
}</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
&gt;  numA(3)
&lt;  9
&gt;  numB(3)
&lt;  9
&gt;  numC(3)
&lt;  9
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
&gt;  numB
&lt;  f (x){
     return x * x;
   }
&gt;  numB(3)
&lt;  9
&gt;</code></pre>



<p>函式陳述式有提升的特性，函式表達式沒有提升的特性。</p>



<pre class="wp-block-code"><code>// all.js - 2

console.log(numA(3));
// 函式陳述式
function numA (x){
  return x * x;
}
console.log(numA(3));

</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   9
   9
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 3

console.log(numB(3));
// 函式表達式
const numB = function(x){
  return x * x;
}
// console.log(numB(3));

</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
x  Uncaught ReferenceError: Cannot access 'numB' before initialization at xxx
&gt;</code></pre>



<h3>箭頭函式基本寫法</h3>



<pre class="wp-block-code"><code>// all.js

// 函式表達式
const numA = function(x){
  return x * x;
}

console.log(numA(3));

// 箭頭函式
const numB = (x) =&gt;{
  return x * x * x;
}

console.log(numB(4));</code></pre>



<pre class="wp-block-code"><code>// Google Console
   9
   64
&gt;</code></pre>



<h3>箭頭函式再縮寫</h3>



<h4>縮寫寫法</h4>



<ol><li>如果函式搭配到 return</li><li>如果只有一個參數，可以省略括號</li><li>沒有參數，還是要有空括號</li></ol>



<pre class="wp-block-code"><code>// all.js

// 箭頭函式
// 縮寫寫法
// 1.如果函式搭配到 return
// 2.如果只有一個參數，可以省略括號
// 3.沒有參數，還是要有空括號

const numA = (x) =&gt; {
  return `數字相乘 ${x*x}`;
};
console.log(numA(3));

const numB = (x) =&gt; `數字相乘 ${x*x}`;
console.log(numB(4));

const numC = x =&gt; `數字相乘 ${x*x}`;
console.log(numC(5));

const num = () =&gt; `數字相乘 ${9}`;
console.log(num());</code></pre>



<pre class="wp-block-code"><code>// Google Console
   數字相乘 9
   數字相乘 16
   數字相乘 25
   數字相乘 9
&gt;</code></pre>



<h3>陣列 map 搭配箭頭函式寫法</h3>



<pre class="wp-block-code"><code>// all.js - 1

// 陣列操作 map、filter

// const data = &#91;1,8,13,20];

// const newData = data.map(function(item){
//   return item + 2;
// });

// console.log(newData);

const data = &#91;1,8,13,20];

const newData = data.map(item =&gt; item + 3);

console.log(newData);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   (4) &#91;4, 11, 16, 23]
&gt;</code></pre>



<p>單行可以使用箭頭函式再縮寫，多行還是建議需要加上大括號。</p>



<h3>箭頭函式小節測驗</h3>



<h3 class="has-background" style="background-color:#ff6663">第六週總複習</h3>



<h2 class="has-background" style="background-color:#ff6663">最終關卡 – todolist 待辦事項 (未製作)</h2>



<h2>JS – 彩蛋課程 – NPM 管理</h2>



<h3>NPM 介紹</h3>



<p>NPM 套件管理工具。</p>



<h3>Node.js、NPM 環境安裝</h3>



<h4>資源連結</h4>



<ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noreferrer noopener">NPM 官網</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js 官網</a></li></ul>



<p>Node.js 安裝選擇 LTS(長期支援)版本安裝，比較穩定。</p>



<h3>VSCode 終端機教學</h3>



<h4>版本檢查</h4>



<ol><li>檢查 Node.js 版本： node -v</li><li>檢查 NPM 版本： npm -v</li></ol>



<h4>開啟資料夾方式</h4>



<ul><li>直接拖曳資料夾到 VSCode</li><li>從 VSCode 選單 File → Open Folder</li></ul>



<h4>開啟終端機</h4>



<ul><li>從 VSCode 選單 View → Terminal 開啟終端機面板</li><li>終端機 – 輸入指令</li><li>node -v</li><li>npm-v</li><li>都有回報版本號就有安裝成功</li></ul>



<h3>npm init – 專案環境初始化</h3>



<h4>指令</h4>



<ul><li>專案初始化：npm init</li><li>專案初始化，並提供預設值：npm init -y</li></ul>



<h4>開啟 Terminal 介面</h4>



<ul><li>View → Terminal、或者快捷鍵 Ctrl + `</li><li>確認是否在專案位置</li><li>輸入指令 npm init</li><li>完成設定後會產生 package.json</li></ul>



<p>各種套件，都會同步記錄在 package.json。</p>



<h3>npm install – 環境安裝教學</h3>



<ul><li>NPM 官網</li><li>安裝模組指令：npm install 模組名稱</li></ul>



<p>備註：若您是 Mac 電腦，有時可能會因為權限不夠而出現紅字 err 出錯，此時請嘗試將指令改為：sudo npm install 模組名稱</p>



<ul><li>bootstrap – npm i bootstrap 或者 npm install bootstrap</li><li>vue – npm i vue 或者 npm install vue</li></ul>



<h3>npm 全域安裝 -g</h3>



<p>NPM 安裝範圍。</p>



<ul><li>package.json 檔案裡面的 dependencies 的套件，可以使用 npm install 指令安裝</li><li>node_modules 不會進到 git 版本控制，通常來說只放開發的 Code</li><li>package.json 裡面的 dependencies 可以安裝自己想要安裝的套件版本號</li><li>全域空間 – npm install jquery -g<ul><li>建議還是先把套案安裝在專案資料夾</li><li>可能會運用在 jest, mocha, express…等</li><li>Mac 的話會安裝在 /usr/local/lib/node_modules</li></ul></li></ul>



<h4>練習</h4>



<ul><li>把專案資料夾裡面 node_modules 刪除、然後使用 npm install 安裝回來</li><li>可以練習使用全域空間 npm install 模組名稱 -g</li></ul>



<h3>–save、–save-dev 指令差異</h3>



<ul><li>production (上線)依賴模組：npm install 模組名稱 –save</li><li>development (開發)依賴模組：npm install 模組名稱 –save-dev</li></ul>



<h4>Webpack套件</h4>



<ul><li><a rel="noreferrer noopener" href="https://webpack.js.org/" target="_blank">Webpack 官網</a></li><li>安裝套件指令 npm install webpack –save-dev</li></ul>



<h4>練習</h4>



<ul><li>npm install bootstrap –save 套件安裝是在 dependencies (上線階段)</li><li>npm install bootstrap –save-dev 套件安裝是在 devDependencies (開發階段)</li><li>npm install bootstrap 套件安裝是在 dependencies (上線階段)</li></ul>



<h3>常見指令補充</h3>



<ul><li>更新套件：npm update 模組名稱</li><li>移除套件：npm uninstall 模組名稱</li></ul>



<h4>舉例</h4>



<ul><li>npm uninstall jquery</li><li>npm uninstall webpack</li><li>npm uninstall vue</li><li>npm uninstall bootstrap</li><li>npm uninstall bootstrap -g</li><li>npm update vue</li></ul>



<p>也可以從 package.json 修改套件的名稱、版本號，再使用 npm install 安裝套件。</p>



<h2 class="has-background" style="background-color:#ff6663">webpack 壓縮打包工具管理</h2>



<h3>為什麼要學 webpack?</h3>



<ul><li><a href="https://webpack.js.org/" target="_blank" rel="noreferrer noopener">webpack 官網</a></li></ul>



<p>前端壓縮打包工具。</p>



<h4>舉例</h4>



<ul><li>vue</li><li>react</li><li>前端應用</li><li>spa (單頁面應用)</li></ul>



<h3>webpack 環境建立</h3>



<ul><li>安裝 Webpack 套件指令：npm install webpack webpack-cli –save-dev</li></ul>



<h4>環境建立步驟</h4>



<ul><li>建立一個專案資料夾 – webpack-demo</li><li>開啟終端機</li><li>專案環境初始化 – npm init、快速初始化 npm init -y</li><li>webpack 套件指令：npm install webpack webpack-cli –save-dev，這裡會安裝在開發環境</li><li>在 package.json 的 devDependencies 裡面會產生webpack、webpack-cli 名稱、版本號就代表 Webpack 環境建立好了</li></ul>



<h4>Webpack Guides</h4>



<ul><li><a href="https://webpack.js.org/guides/getting-started/#basic-setup" target="_blank" rel="noreferrer noopener">Basic Setup</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">進入點(entry)、輸出點(output) 觀念建立</h3>



<h4>Download</h4>



<ul><li><a href="https://cdn.fs.teachablecdn.com/AQBQsgbuQoWCRWSPxGnm" target="_blank" rel="noreferrer noopener">webpack-entry.zip</a></li></ul>



<h4>Webpack Concepts</h4>



<ul><li><a href="https://webpack.js.org/concepts/#entry" target="_blank" rel="noreferrer noopener">Entry</a></li><li><a href="https://webpack.js.org/concepts/#output" target="_blank" rel="noreferrer noopener">Output</a></li></ul>



<h4>Webpack 官網圖片講解</h4>



<ul><li>MODULES WITH DEPENDENCIES→bundle your scripts→STATIC ASSETS</li></ul>



<ul><li>進入點 – MODULES WITH DEPENDENCIES</li><li>輸出點 – STATIC ASSETS</li></ul>



<h4>操作步驟</h4>



<ul><li>建立 src 資料夾 – 這個就是進入點、然後在裡面建立 index.js 檔案</li><li>建立 dist 資料夾 – 這個就是輸出點</li><li>在 package.json 新增 “build”: “webpack” 名稱、值</li><li>在終端機輸入指令：npm run build，build 叫做編譯，<br>在 dist 資料夾就會新增一個 main.js 檔案</li></ul>



<pre class="wp-block-code"><code>// src/index.js

let a = 1;
let b = 2;
console.log("hello");
function hello(a,b){
  console.log(a+b);
}
hello(1,2);</code></pre>



<pre class="wp-block-code"><code>// package.json - 新增 "build": "webpack"

{
  "name": "webpack-demo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "build": "webpack"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1"
  }
}
</code></pre>



<pre class="wp-block-code"><code>// dist/main.js

console.log("hello"),console.log(3);</code></pre>



<h3 class="has-background" style="background-color:#ff6663">webpack.config.js 環境建立</h3>



<ul><li><a href="https://cdn.fs.teachablecdn.com/K7qUetNLTxvbXG6KduwG" target="_blank" rel="noreferrer noopener">webpack-config.zip</a></li></ul>



<p>客製化進入點、輸出點資料夾名稱、以及裡面的檔案。</p>



<ul><li><a rel="noreferrer noopener" href="https://webpack.js.org/concepts/#entry" target="_blank">Webpack Concepts Entry</a></li><li><a href="https://webpack.js.org/concepts/#output" target="_blank" rel="noreferrer noopener">Webpack Concepts Output</a></li></ul>



<h4>操作步驟</h4>



<ul><li>新增 webpack.config.js 檔案</li><li>客製化進入點路徑、輸出點檔案名稱</li><li>移除輸出點 main.js 檔案</li><li>開啟終端機執行指令：npm run build</li></ul>



<pre class="wp-block-code"><code>// webpack.config.js - 範例

const path = require('path');

module.exports = {
  entry: './path/to/my/entry/file.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'my-first-webpack.bundle.js',
  },
};</code></pre>



<pre class="wp-block-code"><code>// webpack.config.js - 客製化

const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
};</code></pre>



<h4>講解</h4>



<ul><li>path.resolve(__dirname, ‘dist’)，可以使用 console.log 查看</li></ul>



<h3>NPM script 講解</h3>



<p>可以自訂、客製化指令。</p>



<h4>操作步驟講解</h4>



<ul><li>在根目錄上新增 hello.js 檔案</li><li>透過 package.json 的 “scripts” 的指令</li><li>在 “scripts” 新增 “hello”: “node hello.js”</li><li>打開終端機輸入指令：npm run hello</li></ul>



<pre class="wp-block-code"><code>// hello.js

console.log("hello1");
console.log("hello2");
console.log("hello3");</code></pre>



<pre class="wp-block-code"><code>// package.json

{
  "name": "webpack-demo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "hello": "node hello.js",
    "build": "webpack"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1"
  }
}
</code></pre>



<h3>開發、上線模式 mode 切換</h3>



<ul><li><a href="https://cdn.fs.teachablecdn.com/oBB2rUUORAGMUk9NDxm7" target="_blank" rel="noreferrer noopener">webpack-mode.zip</a></li></ul>



<p>終端機執行指令npm run build”，出現的訊息 “mode” option has not been set、”mode” option to ‘development’ or ‘production’ 該如何調整、差異在哪裡。</p>



<h4>操作步驟</h4>



<ul><li>在 package.json 把原本 “build”: “webpack” 改寫成開發模式 “dev”: “webpack –mode development”</li><li>在 package.json 新增一個上線模式 “deploy”: “webpack –mode production”</li><li>最後的結果會影響到 dist/bundle.js 檔案，他的狀況會有些差異</li></ul>



<pre class="wp-block-code"><code>// package.json

{
  "name": "webpack-demo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "hello": "node hello.js",
    "dev": "webpack --mode development",
    "deploy": "webpack --mode production"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1"
  }
}
</code></pre>



<pre class="wp-block-code"><code>// dist/bundle.js - 開發模式

/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() =&gt; { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() =&gt; {

eval("let a = 1;\r\nlet b = 2;\r\nconsole.log(\"hello\");\r\nfunction hello(a,b){\r\n  console.log(a+b);\r\n}\r\nhello(1,2);\n\n//# sourceURL=webpack://webpack-demo/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__&#91;"./src/index.js"]();
/******/ 	
/******/ })()
;</code></pre>



<pre class="wp-block-code"><code>// dits/bundle.js - 上線模式

console.log("hello"),console.log(3);</code></pre>



<p>開發模式產生的 bundle.js 幫助除錯、狀況條列，通常開發的時候都會用開發模式。</p>



<p>上線模式產生的 bundle.js 比較精簡、把程式碼壓縮成一行、做各種優化。</p>



<h4>第二種寫法 (比較少寫在這裡)</h4>



<ul><li>在 webpack.config.js 寫上 mode: ‘production’</li></ul>



<pre class="wp-block-code"><code>// webpack.config.js

const path = require('path');

module.exports = {
  mode: 'production',
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
};</code></pre>



<p>比較少寫在 webpack.config.js 原因是通常會透過 package.json 用下指令的方式去做開發。</p>



<h3 class="has-background" style="background-color:#ff6663">export、import 語法教學</h3>



<ul><li>JavaScript 模組化 –&nbsp;<a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules" target="_blank">JavaScript modules 模塊</a><ul><li>import</li><li>export</li></ul></li><li>JS 模組化又稱作 ES Module</li></ul>



<figure class="wp-block-image size-full"><img width="603" height="438" src="/wordpress_blog/wp-content/uploads/2022/04/JS-模組化.png" alt="" class="wp-image-587"/><figcaption>JS &#8211; 模組化</figcaption></figure>



<h4>預設匯出 – 操作步驟</h4>



<ul><li>新增資料夾 ESModule 放 modules 做練習</li><li>使用 VSCode 開啟 ESModule 專案</li><li>新增一個 index.js 檔案</li><li>新增一個 export1.js 檔案</li><li>新增一個 index.html 檔案、並載入 &lt;script&gt; index.js、用 ESModule 要加上 type=”module” 這樣子 import export 語法才會生效</li></ul>



<pre class="wp-block-code"><code>// index.js - 1

import data from "./export1.js";

console.log(data);</code></pre>



<pre class="wp-block-code"><code>// export1.js - 1
export default 1;

// 預設匯出</code></pre>



<pre class="wp-block-code"><code>// index.html - 1

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  

  &lt;script src="index.js" type="module"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   1
&gt;</code></pre>



<pre class="wp-block-code"><code>// index.js - 2

import data from "./export1.js";

console.log(data.a);</code></pre>



<pre class="wp-block-code"><code>// export1.js - 2

let a = 1;
let b = 2;
let c = a+b;

export default {
  a: 5,
  content: b
};

// 預設匯出 default export</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   5
&gt;</code></pre>



<h4>其他常見做法 – 具名匯出</h4>



<ul><li>新增 export2.js 檔案</li><li>匯入 index.js 檔案</li><li>使用 * 匯入、代表全部都載入，通常不建議這樣使用，會不好除錯，使用 * 的時候要搭配 as 自訂名稱</li></ul>



<pre class="wp-block-code"><code>// export2.js - 1

// 具名匯出

export const c = 1;

export function add(x,y){
  return x+y;
}</code></pre>



<pre class="wp-block-code"><code>// index.js - 1

import data from "./export1.js";
import {c,add} from "./export2.js";
console.log(data.a);

console.log(c);
console.log(add(2,9));</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   5
   1
   11
&gt;</code></pre>



<pre class="wp-block-code"><code>// index.js - 2

import data from "./export1.js";
import {add} from "./export2.js";
console.log(data.a);

// console.log(c);
console.log(add(2,9));</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   5
   11
&gt;</code></pre>



<pre class="wp-block-code"><code>// index.js - 3

import data from "./export1.js";
import * as data2 from "./export2.js";
console.log(data.a);

// console.log(c);
console.log(data2.add(3,88));</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
   5
   91
&gt;</code></pre>



<h4>匯出做法</h4>



<ul><li>預設匯出</li><li>具名匯出</li></ul>



<p>依照專案團隊開發共同討論出共識要使用那種做法。</p>



<p>依老師來說會使用預設匯出的做法。</p>



<h4>補充做法(冷門)</h4>



<pre class="wp-block-code"><code>// export3.js

function a(){
  console.log(88);
}

a();</code></pre>



<pre class="wp-block-code"><code>// index.js

import "./export3.js"</code></pre>



<pre class="wp-block-code"><code>// Google Console
   88
&gt;</code></pre>



<h4>預設匯出、具名匯出混用</h4>



<pre class="wp-block-code"><code>// export2.js

// 具名匯出

export const c = 1;

export function add(x,y){
  return x+y;
}

export default 8;</code></pre>



<pre class="wp-block-code"><code>// index.js

import data from "./export1.js";
import total, {c,add} from "./export2.js";
console.log(data.a);

// console.log(c);
console.log(add(3,88));
console.log(total);

// import "./export3.js"</code></pre>



<pre class="wp-block-code"><code>// Google Console
   5
   91
   8
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">webpack import 載入流程</h3>



<h4>Download</h4>



<ul><li><a href="https://cdn.fs.teachablecdn.com/fFV1N49cRc6qjZW9opCZ" target="_blank" rel="noreferrer noopener">webpack-esmodule.zip</a></li></ul>



<h4>操作步驟</h4>



<ul><li>新增一個 c.js 在 src 資料夾裡</li><li>在 src/index.js 匯入 c.js</li><li>使用終端機執行指令(從 package.json 的指令) npm run dev</li><li>如果要看編譯模式執行指令 npm run deploy</li></ul>



<pre class="wp-block-code"><code>// src/c.js

export default 333;</code></pre>



<pre class="wp-block-code"><code>// src/index.js

import c from './c.js';
let a = 1;
let b = 2;
console.log("hello");
function hello(a,b){
  console.log(a+b);
}
hello(1,2);
console.log(c);</code></pre>



<h3>加入 index.html 顯示 bundle.js 結果</h3>



<h4>Download</h4>



<ul><li><a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/Ud1OulECStCppEMymIWB" target="_blank">webpack-addindexhtml.zip</a></li><li><a rel="noreferrer noopener" href="https://webpack.js.org/loaders/css-loader/" target="_blank">Webpack Loaders CSS css-loader</a></li></ul>



<h4>操作講解</h4>



<ul><li>在 dist 資料夾裡新增 index.html</li><li>載入 &lt;script&gt; bundle.js</li><li>打開 dist/index.html 看 Google Console 有無資料顯示、正確載入 bundle.js</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;標題&lt;/h1&gt;

  &lt;script src="./bundle.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">載入 CSS-loader 流程</h3>



<h4>Download</h4>



<ul><li><a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/lcfOSjGEQCK2BgC5jpRh" target="_blank">webpack-cssLoader.zip</a></li><li><a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noreferrer noopener">CSS-Loader 文件</a></li></ul>



<h4>操作講解</h4>



<ul><li>安裝 css-loader 指令：npm install –save-dev css-loader</li><li>新增一個 css 檔案：style.css 放在 src 資料夾裡面</li><li>環境設定，在 webpack.config.js</li><li>在 index.js 匯入 import css from “./style.css”;</li><li>執行 npm run deploy</li></ul>



<pre class="wp-block-code"><code>// src/style.css

h1 {
  color: red;
}</code></pre>



<pre class="wp-block-code"><code>// webpack.config.js

const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: &#91;
      {
        test: /\.css$/i,
        use: &#91;"style-loader", "css-loader"],
      },
    ],
  },
};</code></pre>



<pre class="wp-block-code"><code>// index.js

import c from './c.js';
import css from "./style.css";
let a = 1;
let b = 2;
console.log("hello");
function hello(a,b){
  console.log(a+b);
}
hello(1,2);
console.log(c);</code></pre>



<h4>出現錯誤</h4>



<ul><li>缺少 style-loader 套件安裝，npm install style-loader –save-dev</li><li>再執行 npm run deploy</li><li>打開 dist/index.html 看標題是否有變紅色</li></ul>



<h3>載入 Sass-loader 流程</h3>



<h4>Download</h4>



<ul><li><a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/h2zQRfVQvmclsDYrtKHA" target="_blank">webpack-scss.zip</a></li><li><a rel="noreferrer noopener" href="https://github.com/webpack-contrib/sass-loader" target="_blank">Sass-loader 文件</a></li></ul>



<p>Sass 是 SCSS 預處理器</p>



<h4>操作步驟</h4>



<ul><li>安裝 sass-loader、指令：npm install sass-loader sass webpack –save-dev，有安裝的可以不用再安裝、sass 或者 node-sass 這兩個都可以擇一即可，這裡選擇 node-sass 使用</li><li>進入點 src/index.js 依照文件範例去修改 import “./style.scss”;</li><li>把 src/style.css 改成 src/style.scss、然後把程式碼貼上、調整</li><li>webpack.config.js 調整成 sass-loader 文件上範例的程式碼</li><li>執行 npm run deploy</li><li>打開 dist/index.html 查看標題是否有正確載入變粉紅色</li></ul>



<pre class="wp-block-code"><code>// src/index.js

import c from './c.js';
import css from "./style.scss";
let a = 1;
let b = 2;
console.log("hello");
function hello(a,b){
  console.log(a+b);
}
hello(1,2);
console.log(c);</code></pre>



<pre class="wp-block-code"><code>// src/style.scss

$body-color: pink;

h1 {
  color: $body-color;
}</code></pre>



<pre class="wp-block-code"><code>// webpack.config.js

const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: &#91;
      {
        test: /\.s&#91;ac]ss$/i,
        use: &#91;
          // Creates `style` nodes from JS strings
          "style-loader",
          // Translates CSS into CommonJS
          "css-loader",
          // Compiles Sass to CSS
          "sass-loader",
        ],
      },
    ],
  },
};</code></pre>



<h3 class="has-background" style="background-color:#ff6663">載入 webpack 測試伺服器</h3>



<p>即時更新、監聽。</p>



<h4>Download</h4>



<ul><li><a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/rlnVC0vRbqEJ6cnik0oQ" target="_blank">webpack-devServer.zip</a></li><li><a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noreferrer noopener">webpack 官網文件</a></li><li><a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noreferrer noopener">webpack server GitHub 文件</a></li></ul>



<h4>更新說明</h4>



<p>由於 dev server 版本更新（v3 -&gt; v4）因此設定方式的寫法也有些差異</p>



<p>v3 版本寫法</p>



<pre class="wp-block-code"><code>devServer: {
    contentBase: path.join(__dirname, "dist"),
}</code></pre>



<p>v4 版本寫法</p>



<pre class="wp-block-code"><code>devServer: {
    static: {
      directory: path.join(__dirname, 'dist'),
    },
}</code></pre>



<h4>操作步驟</h4>



<ul><li>安裝模組指令：npm install webpack-dev-server –save-dev</li><li>使用上用 CLI，指令是：npx webpack serve，npx 可以不用只需要 webpack serve 這個指令就可以</li><li>NPM Scripts，”scripts” 指令要加上 “serve”: “webpack serve”</li><li>webpack.config.js 也需要做些資料夾設定，從 Webpack devServer 找到 webpack.config.js 範例程式碼複製貼上</li><li>把 package.json “scripts” 的 “dev” 改成 “dev”: “webpack serve –mode development”</li><li>執行 npm run dev</li><li>網址可以輸入 127.0.0.1:9000</li></ul>



<pre class="wp-block-code"><code>// package.json

{
  "name": "webpack-demo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "hello": "node hello.js",
    "dev": "webpack --mode development",
    "deploy": "webpack --mode production",
    "serve": "webpack serve"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "css-loader": "^6.5.1",
    "node-sass": "^7.0.1",
    "sass-loader": "^12.4.0",
    "style-loader": "^3.3.1",
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1",
    "webpack-dev-server": "^4.7.2"
  }
}
</code></pre>



<pre class="wp-block-code"><code>// webpack.config.js

const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: &#91;
      {
        test: /\.s&#91;ac]ss$/i,
        use: &#91;
          // Creates `style` nodes from JS strings
          "style-loader",
          // Translates CSS into CommonJS
          "css-loader",
          // Compiles Sass to CSS
          "sass-loader",
        ],
      },
    ],
  },
  devServer: {
    static: {
      directory: path.join(__dirname, 'public'),
    },
    compress: true,
    port: 9000,
  },
};</code></pre>



<pre class="wp-block-code"><code>// package.json

{
  "name": "webpack-demo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "hello": "node hello.js",
    "dev": "webpack serve --mode development",
    "deploy": "webpack --mode production",
    "serve": "webpack serve"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "css-loader": "^6.5.1",
    "node-sass": "^7.0.1",
    "sass-loader": "^12.4.0",
    "style-loader": "^3.3.1",
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1",
    "webpack-dev-server": "^4.7.2"
  }
}
</code></pre>



<h4>出現錯誤</h4>



<ul><li>webpack.config.js 的 devServer ‘public’ 改成 ‘dist’</li><li>終止批次工作</li><li>重新執行 npm run dev</li></ul>



<pre class="wp-block-code"><code>// webpack.config.js

const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: &#91;
      {
        test: /\.s&#91;ac]ss$/i,
        use: &#91;
          // Creates `style` nodes from JS strings
          "style-loader",
          // Translates CSS into CommonJS
          "css-loader",
          // Compiles Sass to CSS
          "sass-loader",
        ],
      },
    ],
  },
  devServer: {
    static: {
      directory: path.join(__dirname, 'dist'),
    },
    compress: true,
    port: 9000,
  },
};</code></pre>



<h4>自動開啟伺服器網頁</h4>



<ul><li>webpack.config.js 的 devServer 新增 open: true</li><li>終止批次工作 Ctrl + c</li><li>重新執行 npm run dev</li><li>在 style.scss 把 pink 改成 blue 看是否有即時更新</li></ul>



<pre class="wp-block-code"><code>// webpack.config.js

const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: &#91;
      {
        test: /\.s&#91;ac]ss$/i,
        use: &#91;
          // Creates `style` nodes from JS strings
          "style-loader",
          // Translates CSS into CommonJS
          "css-loader",
          // Compiles Sass to CSS
          "sass-loader",
        ],
      },
    ],
  },
  devServer: {
    static: {
      directory: path.join(__dirname, 'dist'),
    },
    compress: true,
    port: 9000,
    open: true
  },
};</code></pre>



<h3 class="has-background" style="background-color:#ff6663">載入第三方套件 axios – 以 import 為例</h3>



<h4>Download</h4>



<ul><li><a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/dpwk4BOaSE2B5PdrKHoj" target="_blank">webpack-axios.zip</a></li><li><a rel="noreferrer noopener" href="https://www.npmjs.com/package/axios" target="_blank">axios 官網</a></li><li><a href="https://hexschool.github.io/ajaxHomework/data.json" target="_blank" rel="noreferrer noopener">練習用的 json 連結</a></li></ul>



<h4>操作步驟</h4>



<ul><li>安裝 axios 套件：npm install axios –save</li><li>在進入點 src/index.js 寫 import axios from “axios”;，會從 node_modules 找、看有沒有載入的檔案</li><li>撰寫 axios get</li><li>執行 npm run dev 看是否有載入成功</li></ul>



<pre class="wp-block-code"><code>// src/index.js

import c from './c.js';
import css from "./style.scss";
import axios from "axios";
axios.get("https://hexschool.github.io/ajaxHomework/data.json")
.then(function(response){
  console.log(response);
});
let a = 1;
let b = 2;
console.log("hello");
function hello(a,b){
  console.log(a+b);
}
hello(1,2);
console.log(c);</code></pre>



<h2>JavaScript 總複習題</h2>



<h3 class="has-background" style="background-color:#ff6663">第七週總複習</h3>



<h3>JS 百題斬 (未練習)</h3>



<h2>JavaScript 加碼直播 (未觀看)</h2>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Bootstrap 5 網頁切版整合術(2)</title>
		<link>/wordpress_blog/bs5-weblayout-2/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Mon, 28 Mar 2022 07:15:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=401</guid>

					<description><![CDATA[課程學習：六角學院 CH9 – 使用 Bootstrap 完成  [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>課程學習：<a rel="noreferrer noopener" href="https://courses.hexschool.com/p/bootstrap-5" target="_blank">六角學院</a></p>



<h2>CH9 – 使用 Bootstrap 完成 Blog 版型</h2>



<h3>Blog 版型 – 簡介</h3>



<pre class="wp-block-code"><code>// index.html - Blog 版型 - 簡介

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Blog Live&lt;/title&gt;
  &lt;!-- CSS only --&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&gt;
  &lt;style&gt;
    :root {
      --bs-font-sans-serif: system-ui,-apple-system,'Microsoft JhengHei',微軟正黑體,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  這裡是一段文字
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a href="https://getbootstrap.com/docs/5.1/examples/blog/" target="_blank" rel="noreferrer noopener">參考 Bootstrap examples Blog 版型</a></li></ul>



<h3>Blog 版型 – 導覽列</h3>



<pre class="wp-block-code"><code>// index.html - Blog 版型 - 導覽列

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Blog Live&lt;/title&gt;
  &lt;!-- CSS only --&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&gt;
  &lt;style&gt;
    :root {
      --bs-font-sans-serif: system-ui,-apple-system,'Microsoft JhengHei',微軟正黑體,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="container"&gt;
    &lt;header class="py-3 text-center border-bottom"&gt;
      &lt;a href="#" class="h2 link-dark text-decoration-none"&gt;Gee Hsu 的 Blog&lt;/a&gt;
    &lt;/header&gt;

    &lt;div class="overflow-auto py-1"&gt;
      &lt;nav class="nav justify-content-between flex-nowrap text-nowrap"&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;HTML&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;CSS&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;jQuery&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;JavaScript&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;RWD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Bootstrap&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Vue&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Git&amp;GitHub&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;NodeJs&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Adobe XD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Sass&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;VSCode&lt;/a&gt;
      &lt;/nav&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>垂直圈選：<br>Mac: option + 左鍵<br>Windows: 滑鼠中鍵</p>



<h3>Blog 版型 – 首圖背景</h3>



<pre class="wp-block-code"><code>// index.html - Blog 版型 - 首圖背景

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Blog Live&lt;/title&gt;
  &lt;!-- CSS only --&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&gt;
  &lt;style&gt;
    :root {
      --bs-font-sans-serif: system-ui,-apple-system,'Microsoft JhengHei',微軟正黑體,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
    }
    .bg-cover {
      background-position: center center;
      background-size: cover;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="container"&gt;
    &lt;header class="py-3 text-center border-bottom"&gt;
      &lt;a href="#" class="h2 link-dark text-decoration-none"&gt;Gee Hsu 的 Blog&lt;/a&gt;
    &lt;/header&gt;

    &lt;!-- Blog 版型 - 導覽列 start --&gt;
    &lt;div class="overflow-auto py-1"&gt;
      &lt;nav class="nav justify-content-between flex-nowrap text-nowrap"&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;HTML&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;CSS&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;jQuery&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;JavaScript&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;RWD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Bootstrap&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Vue&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Git&amp;GitHub&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;NodeJs&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Adobe XD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Sass&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;VSCode&lt;/a&gt;
      &lt;/nav&gt;
    &lt;/div&gt;

    &lt;!-- Blog 版型 - 導覽列 end --&gt;

    &lt;!-- Blog 版型 - 首圖背景 start --&gt;
    &lt;div class="p-4 p-md-5 text-white rounded-3 bg-cover" style="background-image: url(https://images.unsplash.com/photo-1545641203-7d072a14e3b2?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1033&amp;q=80);"&gt;
      &lt;div class="col-md-6"&gt;
        &lt;h1 class="display-4 fst-italic"&gt;雨水經由高山地形匯流成溪河&lt;/h1&gt;
        &lt;p class="lead my-3"&gt;一個河流需要時間的積累才能形成，知識的累積也是從少到多。&lt;/p&gt;
        &lt;p class="lead mb-0"&gt;&lt;a class="text-white" href="#"&gt;繼續閱讀&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 首圖背景 end --&gt;

  &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a href="https://unsplash.com/" target="_blank" rel="noreferrer noopener">Unsplash</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">Blog 版型 – 水平卡片排版技巧</h3>



<p>這個地方算是這個網站配置最為複雜。</p>



<pre class="wp-block-code"><code>// index.html - Blog 版型 - 水平卡片排版技巧

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Blog Live&lt;/title&gt;
  &lt;!-- CSS only --&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&gt;
  &lt;style&gt;
    :root {
      --bs-font-sans-serif: system-ui,-apple-system,'Microsoft JhengHei',微軟正黑體,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
    }
    .bg-cover {
      background-position: center center;
      background-size: cover;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="container"&gt;
    &lt;header class="py-3 text-center border-bottom"&gt;
      &lt;a href="#" class="h2 link-dark text-decoration-none"&gt;Gee Hsu 的 Blog&lt;/a&gt;
    &lt;/header&gt;

    &lt;!-- Blog 版型 - 導覽列 start --&gt;
    &lt;div class="overflow-auto py-1"&gt;
      &lt;nav class="nav justify-content-between flex-nowrap text-nowrap"&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;HTML&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;CSS&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;jQuery&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;JavaScript&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;RWD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Bootstrap&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Vue&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Git&amp;GitHub&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;NodeJs&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Adobe XD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Sass&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;VSCode&lt;/a&gt;
      &lt;/nav&gt;
    &lt;/div&gt;

    &lt;!-- Blog 版型 - 導覽列 end --&gt;

    &lt;!-- Blog 版型 - 首圖背景 start --&gt;
    &lt;div class="p-4 p-md-5 mb-4 text-white rounded-3 bg-cover" style="background-image: url(https://images.unsplash.com/photo-1545641203-7d072a14e3b2?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1033&amp;q=80);"&gt;
      &lt;div class="col-md-6"&gt;
        &lt;h1 class="display-4 fst-italic"&gt;雨水經由高山地形匯流成溪河&lt;/h1&gt;
        &lt;p class="lead my-3"&gt;一個河流需要時間的積累才能形成，知識的累積也是從少到多。&lt;/p&gt;
        &lt;p class="lead mb-0"&gt;&lt;a class="text-white" href="#"&gt;繼續閱讀&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 首圖背景 end --&gt;

    &lt;!-- Blog 版型 - 水平卡片排版技巧 start --&gt;
    &lt;div class="row row-cols-1 row-cols-lg-2"&gt;
      &lt;div class="col"&gt;
        &lt;div class="card  row g-0 flex-row h-100"&gt;
          &lt;div class="col"&gt;
            &lt;div class="p-4 d-flex flex-column h-100"&gt;
              &lt;strong class="d-inline-block mb-2 text-primary"&gt;Bootstrap&lt;/strong&gt;
              &lt;h3 class="mb-0"&gt;Blog 版型&lt;/h3&gt;
              &lt;div class="mb-1 text-muted"&gt;三月 7 日&lt;/div&gt;
              &lt;p class="card-text mb-auto"&gt;使用 Bootstrap 完成 Blog 版型。&lt;/p&gt;
              &lt;a href="#" class="stretched-link"&gt;繼續閱讀&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-4 d-none d-lg-block bg-cover" style="background-image: url(https://images.unsplash.com/photo-1600656801344-b1ec70d4058d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80);"&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card  row g-0 flex-row h-100"&gt;
          &lt;div class="col"&gt;
            &lt;div class="p-4"&gt;
              &lt;strong class="d-inline-block mb-2 text-primary"&gt;Bootstrap&lt;/strong&gt;
              &lt;h3 class="mb-0"&gt;Blog 版型&lt;/h3&gt;
              &lt;div class="mb-1 text-muted"&gt;三月 7 日&lt;/div&gt;
              &lt;p class="card-text mb-auto"&gt;使用 Bootstrap 完成 Blog 版型。學習的內容有：Blog 版型 - 簡介、Blog 版型 - 導覽列、Blog 版型 - 首圖背景...等&lt;/p&gt;
              &lt;a href="#" class="stretched-link"&gt;繼續閱讀&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-4 d-none d-lg-block bg-cover" style="background-image: url(https://images.unsplash.com/photo-1600656801344-b1ec70d4058d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80);"&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 水平卡片排版技巧 end --&gt;

  &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>Blog 版型 – 內文及側欄安排</h3>



<pre class="wp-block-code"><code>// index.html - Blog 版型 - 內文及側欄安排

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Blog Live&lt;/title&gt;
  &lt;!-- CSS only --&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&gt;
  &lt;style&gt;
    :root {
      --bs-font-sans-serif: system-ui,-apple-system,'Microsoft JhengHei',微軟正黑體,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
    }
    .bg-cover {
      background-position: center center;
      background-size: cover;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="container"&gt;
    &lt;header class="py-3 text-center border-bottom"&gt;
      &lt;a href="#" class="h2 link-dark text-decoration-none"&gt;Gee Hsu 的 Blog&lt;/a&gt;
    &lt;/header&gt;

    &lt;!-- Blog 版型 - 導覽列 start --&gt;
    &lt;div class="overflow-auto py-1"&gt;
      &lt;nav class="nav justify-content-between flex-nowrap text-nowrap"&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;HTML&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;CSS&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;jQuery&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;JavaScript&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;RWD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Bootstrap&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Vue&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Git&amp;GitHub&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;NodeJs&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Adobe XD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Sass&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;VSCode&lt;/a&gt;
      &lt;/nav&gt;
    &lt;/div&gt;

    &lt;!-- Blog 版型 - 導覽列 end --&gt;

    &lt;!-- Blog 版型 - 首圖背景 start --&gt;
    &lt;div class="p-4 p-md-5 mb-4 text-white rounded-3 bg-cover" style="background-image: url(https://images.unsplash.com/photo-1545641203-7d072a14e3b2?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1033&amp;q=80);"&gt;
      &lt;div class="col-md-6"&gt;
        &lt;h1 class="display-4 fst-italic"&gt;雨水經由高山地形匯流成溪河&lt;/h1&gt;
        &lt;p class="lead my-3"&gt;一個河流需要時間的積累才能形成，知識的累積也是從少到多。&lt;/p&gt;
        &lt;p class="lead mb-0"&gt;&lt;a class="text-white" href="#"&gt;繼續閱讀&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 首圖背景 end --&gt;

    &lt;!-- Blog 版型 - 水平卡片排版技巧 start --&gt;
    &lt;div class="row row-cols-1 row-cols-lg-2 mb-5"&gt;
      &lt;div class="col"&gt;
        &lt;div class="card  row g-0 flex-row h-100"&gt;
          &lt;div class="col"&gt;
            &lt;div class="p-4 d-flex flex-column h-100"&gt;
              &lt;strong class="d-inline-block mb-2 text-primary"&gt;Bootstrap&lt;/strong&gt;
              &lt;h3 class="mb-0"&gt;Blog 版型&lt;/h3&gt;
              &lt;div class="mb-1 text-muted"&gt;三月 7 日&lt;/div&gt;
              &lt;p class="card-text mb-auto"&gt;使用 Bootstrap 完成 Blog 版型。&lt;/p&gt;
              &lt;a href="#" class="stretched-link"&gt;繼續閱讀&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-4 d-none d-lg-block bg-cover" style="background-image: url(https://images.unsplash.com/photo-1600656801344-b1ec70d4058d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80);"&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card  row g-0 flex-row h-100"&gt;
          &lt;div class="col"&gt;
            &lt;div class="p-4"&gt;
              &lt;strong class="d-inline-block mb-2 text-primary"&gt;Bootstrap&lt;/strong&gt;
              &lt;h3 class="mb-0"&gt;Blog 版型&lt;/h3&gt;
              &lt;div class="mb-1 text-muted"&gt;三月 7 日&lt;/div&gt;
              &lt;p class="card-text mb-auto"&gt;使用 Bootstrap 完成 Blog 版型。學習的內容有：Blog 版型 - 簡介、Blog 版型 - 導覽列、Blog 版型 - 首圖背景...等&lt;/p&gt;
              &lt;a href="#" class="stretched-link"&gt;繼續閱讀&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-4 d-none d-lg-block bg-cover" style="background-image: url(https://images.unsplash.com/photo-1600656801344-b1ec70d4058d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80);"&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 水平卡片排版技巧 end --&gt;

    &lt;!-- Blog 版型 - 內文及側欄安排 start --&gt;
    &lt;div class="row g-md-5"&gt;
      &lt;div class="col-md-8"&gt;
        &lt;article&gt;
          &lt;h2&gt;使用 Bootstrap 完成 Blog 版型&lt;/h2&gt;
          &lt;p&gt;2022 年三月 &lt;a href="#"&gt;Gee Hsu&lt;/a&gt;&lt;/p&gt;
      
          &lt;p&gt;&lt;img class="img-fluid" src="https://firebasestorage.googleapis.com/v0/b/hexschool-api.appspot.com/o/blog%2F2021%2F10%2F25%2Fog.png?alt=media&amp;amp;token=787ab669-10c4-4456-b8d1-9354814a43d4" alt=""&gt;&lt;/p&gt;
          &lt;p&gt;文章擷取來自卡斯柏老師~&lt;/p&gt;
          &lt;p&gt;請問你切版時，是用哪一個方式在進行呢？&lt;/p&gt;
          &lt;ul&gt;
          &lt;li&gt;手刻至上，不使用框架或任何工具&lt;/li&gt;
          &lt;li&gt;使用 Sass 等工具，透過相關方法優化結構&lt;/li&gt;
          &lt;li&gt;使用框架作為基底，並自行撰寫 CSS 調整樣式&lt;/li&gt;
          &lt;li&gt;使用框架搭配 Sass 進行整合，大幅加速開發速度&lt;/li&gt;
          &lt;/ul&gt;
          &lt;h2 id="從純-CSS-轉至工具至上的開發型態"&gt;&lt;a href="#從純-CSS-轉至工具至上的開發型態" class="headerlink" title="從純 CSS 轉至工具至上的開發型態"&gt;&lt;/a&gt;從純 CSS 轉至工具至上的開發型態&lt;/h2&gt;&lt;p&gt;過去，我也是使用純 CSS 的方式在撰寫網頁，不過隨著工具越來越豐富，我也從純 CSS 慢慢轉變為 Sass 及 Bootstrap 整合的方式進行開發，明顯的差異點在於：&lt;/p&gt;
          &lt;ul&gt;
          &lt;li&gt;&lt;b&gt;CSS 行數大幅減少&lt;/b&gt;：以前動輒上千行的 CSS，現在只需要調整變數就能完成，可以專注在新功能的開發&lt;/li&gt;
          &lt;li&gt;&lt;b&gt;協作更為容易&lt;/b&gt;：每個人撰寫的習慣不同，就如 “按鈕” 有人習慣稱為 &lt;code&gt;button&lt;/code&gt; 有些人則習慣使用 &lt;code&gt;btn&lt;/code&gt; ，甚至同一個人每個階段的撰寫方式都不一樣。透過框架命名、架構的習慣會更有一致性。&lt;/li&gt;
          &lt;li&gt;&lt;b&gt;不需要每次撰寫相同的模組&lt;/b&gt;：同樣的按鈕每個網站都需要用到，如果每次都重新撰寫將會花去不少時間，就算是 copy &amp;amp; paste 都有可能出錯，與其如此不如就直接引入，快速又可減少錯誤～&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;許多細微的差異下，從過去一個網站需花費兩週，到現在只需要 1 ~ 2 天就可完成相同品質的網站，剩下的時間可以用來優化更進階的視覺效果，長時間累積下來自然能夠有超越其他人的表現。&lt;/p&gt;
          &lt;p&gt;來自一段學長姐的話：&lt;br&gt;
          &lt;/p&gt;&lt;p class="border-left border-dark pl-3"&gt;切版一定要快，如果連 CSS 都搞不定怎麼能做好專業的前端工程師呢？&lt;/p&gt;
          &lt;p&gt;&lt;/p&gt;
          
          &lt;img class="img-fluid" src="https://firebasestorage.googleapis.com/v0/b/hexschool-api.appspot.com/o/blog%2F2021%2F10%2F25%2Fblock.jpg?alt=media&amp;amp;token=5bbcb44d-3982-4128-9452-6309c31c23b9" class="mx-auto" style="width: 60%"&gt;
          
          &lt;h2 id="Bootstrap-5-網頁開發整合術"&gt;&lt;a href="#Bootstrap-5-網頁開發整合術" class="headerlink" title="Bootstrap 5 網頁開發整合術"&gt;&lt;/a&gt;Bootstrap 5 網頁開發整合術&lt;/h2&gt;&lt;ul&gt;
          &lt;li&gt;聽說 Bootstrap 都長一樣，怎麼可能符合每個網站的需求？&lt;br&gt;→ 實戰都會透過變數客製化，調整成符合每個網站樣式及需求啦&lt;/li&gt;
          &lt;li&gt;Sass 環境好像很難搞，學的時間該不會就抵掉之後節省的時間？&lt;br&gt;→ 課程中只花 3 分鐘介紹如何安裝 Sass 環境，只要文字編輯器不須另外安裝工具，相信你用一次就上癮&lt;/li&gt;
          &lt;li&gt;上述介紹了 Bootstrap 5 的一些特點，但這個工具真的有這麼好嗎？&lt;br&gt;→ 來參加活動，我現場示範給你看&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;接下來，我們預計在 10/27 進行「 Bootstrap 5 網頁開發整合術」的課程介紹，歡迎你提前發問，我將在直播過程中一一回覆。&lt;/p&gt;
          
        &lt;/article&gt;
      &lt;/div&gt;
      &lt;div class="col-md-4 d-none d-md-block"&gt;
        &lt;div class="sticky-top" style="top: 16px;"&gt;
          &lt;div class="p-4 bg-light rounded"&gt;
            &lt;h4&gt;關於我&lt;/h4&gt;
            &lt;p class="mb-0"&gt;學習製作網站，關於網頁開發相關技巧。&lt;br&gt;開發技巧有：HTML、CSS、JAVASCRIPT、JQUERY、RWD、BOOTSTRAP、VUE、GIT&amp;GITHUB...等相關技巧。&lt;/p&gt;
          &lt;/div&gt;
          &lt;div class="p-4"&gt;
            &lt;h4&gt;封存&lt;/h4&gt;
            &lt;ol class="list-unstyled"&gt;
              &lt;li&gt;&lt;a href="#"&gt;2022年 三月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2022年 二月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2022年 一月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 十二月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 十一月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 月&lt;/a&gt;&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/div&gt;
          &lt;div class="p-4"&gt;
            &lt;h4&gt;追蹤我&lt;/h4&gt;
            &lt;ul class="list-unstyled"&gt;
              &lt;li&gt;&lt;a href="#"&gt;Github&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 內文及側欄安排 end --&gt;

  &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>Blog 版型 – Footer 製作</h3>



<pre class="wp-block-code"><code>// index.html - Blog 版型 - Footer 製作

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Blog Live&lt;/title&gt;
  &lt;!-- CSS only --&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&gt;
  &lt;style&gt;
    :root {
      --bs-font-sans-serif: system-ui,-apple-system,'Microsoft JhengHei',微軟正黑體,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
    }
    .bg-cover {
      background-position: center center;
      background-size: cover;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="container"&gt;
    &lt;header class="py-3 text-center border-bottom"&gt;
      &lt;a href="#" class="h2 link-dark text-decoration-none"&gt;Gee Hsu 的 Blog&lt;/a&gt;
    &lt;/header&gt;

    &lt;!-- Blog 版型 - 導覽列 start --&gt;
    &lt;div class="overflow-auto py-1"&gt;
      &lt;nav class="nav justify-content-between flex-nowrap text-nowrap"&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;HTML&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;CSS&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;jQuery&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;JavaScript&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;RWD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Bootstrap&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Vue&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Git&amp;GitHub&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;NodeJs&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Adobe XD&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;Sass&lt;/a&gt;
        &lt;a href="#" class="nav-link link-secondary"&gt;VSCode&lt;/a&gt;
      &lt;/nav&gt;
    &lt;/div&gt;

    &lt;!-- Blog 版型 - 導覽列 end --&gt;

    &lt;!-- Blog 版型 - 首圖背景 start --&gt;
    &lt;div class="p-4 p-md-5 mb-4 text-white rounded-3 bg-cover" style="background-image: url(https://images.unsplash.com/photo-1545641203-7d072a14e3b2?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1033&amp;q=80);"&gt;
      &lt;div class="col-md-6"&gt;
        &lt;h1 class="display-4 fst-italic"&gt;雨水經由高山地形匯流成溪河&lt;/h1&gt;
        &lt;p class="lead my-3"&gt;一個河流需要時間的積累才能形成，知識的累積也是從少到多。&lt;/p&gt;
        &lt;p class="lead mb-0"&gt;&lt;a class="text-white" href="#"&gt;繼續閱讀&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 首圖背景 end --&gt;

    &lt;!-- Blog 版型 - 水平卡片排版技巧 start --&gt;
    &lt;div class="row row-cols-1 row-cols-lg-2 mb-5"&gt;
      &lt;div class="col"&gt;
        &lt;div class="card  row g-0 flex-row h-100"&gt;
          &lt;div class="col"&gt;
            &lt;div class="p-4 d-flex flex-column h-100"&gt;
              &lt;strong class="d-inline-block mb-2 text-primary"&gt;Bootstrap&lt;/strong&gt;
              &lt;h3 class="mb-0"&gt;Blog 版型&lt;/h3&gt;
              &lt;div class="mb-1 text-muted"&gt;三月 7 日&lt;/div&gt;
              &lt;p class="card-text mb-auto"&gt;使用 Bootstrap 完成 Blog 版型。&lt;/p&gt;
              &lt;a href="#" class="stretched-link"&gt;繼續閱讀&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-4 d-none d-lg-block bg-cover" style="background-image: url(https://images.unsplash.com/photo-1600656801344-b1ec70d4058d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80);"&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card  row g-0 flex-row h-100"&gt;
          &lt;div class="col"&gt;
            &lt;div class="p-4"&gt;
              &lt;strong class="d-inline-block mb-2 text-primary"&gt;Bootstrap&lt;/strong&gt;
              &lt;h3 class="mb-0"&gt;Blog 版型&lt;/h3&gt;
              &lt;div class="mb-1 text-muted"&gt;三月 7 日&lt;/div&gt;
              &lt;p class="card-text mb-auto"&gt;使用 Bootstrap 完成 Blog 版型。學習的內容有：Blog 版型 - 簡介、Blog 版型 - 導覽列、Blog 版型 - 首圖背景...等&lt;/p&gt;
              &lt;a href="#" class="stretched-link"&gt;繼續閱讀&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-4 d-none d-lg-block bg-cover" style="background-image: url(https://images.unsplash.com/photo-1600656801344-b1ec70d4058d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80);"&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 水平卡片排版技巧 end --&gt;

    &lt;!-- Blog 版型 - 內文及側欄安排 start --&gt;
    &lt;div class="row g-md-5"&gt;
      &lt;div class="col-md-8"&gt;
        &lt;article&gt;
          &lt;h2&gt;使用 Bootstrap 完成 Blog 版型&lt;/h2&gt;
          &lt;p&gt;2022 年三月 &lt;a href="#"&gt;Gee Hsu&lt;/a&gt;&lt;/p&gt;
      
          &lt;p&gt;&lt;img class="img-fluid" src="https://firebasestorage.googleapis.com/v0/b/hexschool-api.appspot.com/o/blog%2F2021%2F10%2F25%2Fog.png?alt=media&amp;amp;token=787ab669-10c4-4456-b8d1-9354814a43d4" alt=""&gt;&lt;/p&gt;
          &lt;p&gt;文章擷取來自卡斯柏老師~&lt;/p&gt;
          &lt;p&gt;請問你切版時，是用哪一個方式在進行呢？&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;手刻至上，不使用框架或任何工具&lt;/li&gt;
            &lt;li&gt;使用 Sass 等工具，透過相關方法優化結構&lt;/li&gt;
            &lt;li&gt;使用框架作為基底，並自行撰寫 CSS 調整樣式&lt;/li&gt;
            &lt;li&gt;使用框架搭配 Sass 進行整合，大幅加速開發速度&lt;/li&gt;
          &lt;/ul&gt;
          &lt;h2 class="mb-2"&gt;&lt;a href="#" title="從純 CSS 轉至工具至上的開發型態"&gt;&lt;/a&gt;從純 CSS 轉至工具至上的開發型態&lt;/h2&gt;
          &lt;p&gt;過去，我也是使用純 CSS 的方式在撰寫網頁，不過隨著工具越來越豐富，我也從純 CSS 慢慢轉變為 Sass 及 Bootstrap 整合的方式進行開發，明顯的差異點在於：&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;CSS 行數大幅減少&lt;/b&gt;：以前動輒上千行的 CSS，現在只需要調整變數就能完成，可以專注在新功能的開發&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;協作更為容易&lt;/b&gt;：每個人撰寫的習慣不同，就如 “按鈕” 有人習慣稱為 &lt;code&gt;button&lt;/code&gt; 有些人則習慣使用 &lt;code&gt;btn&lt;/code&gt; ，甚至同一個人每個階段的撰寫方式都不一樣。透過框架命名、架構的習慣會更有一致性。&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;不需要每次撰寫相同的模組&lt;/b&gt;：同樣的按鈕每個網站都需要用到，如果每次都重新撰寫將會花去不少時間，就算是 copy &amp;amp; paste 都有可能出錯，與其如此不如就直接引入，快速又可減少錯誤～&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;許多細微的差異下，從過去一個網站需花費兩週，到現在只需要 1 ~ 2 天就可完成相同品質的網站，剩下的時間可以用來優化更進階的視覺效果，長時間累積下來自然能夠有超越其他人的表現。&lt;/p&gt;
          &lt;p&gt;來自一段學長姐的話：&lt;br&gt;&lt;/p&gt;
          &lt;p class="border-left border-dark pl-3"&gt;切版一定要快，如果連 CSS 都搞不定怎麼能做好專業的前端工程師呢？&lt;/p&gt;
          
          &lt;img class="img-fluid mx-auto d-block mb-3" src="https://firebasestorage.googleapis.com/v0/b/hexschool-api.appspot.com/o/blog%2F2021%2F10%2F25%2Fblock.jpg?alt=media&amp;amp;token=5bbcb44d-3982-4128-9452-6309c31c23b9" style="width: 60%"&gt;
          
          &lt;h2 class="mb-2"&gt;&lt;a href="#" title="Bootstrap 5 網頁開發整合術"&gt;&lt;/a&gt;Bootstrap 5 網頁開發整合術&lt;/h2&gt;
          &lt;ul&gt;
            &lt;li&gt;聽說 Bootstrap 都長一樣，怎麼可能符合每個網站的需求？&lt;br&gt;→ 實戰都會透過變數客製化，調整成符合每個網站樣式及需求啦&lt;/li&gt;
            &lt;li&gt;Sass 環境好像很難搞，學的時間該不會就抵掉之後節省的時間？&lt;br&gt;→ 課程中只花 3 分鐘介紹如何安裝 Sass 環境，只要文字編輯器不須另外安裝工具，相信你用一次就上癮&lt;/li&gt;
            &lt;li&gt;上述介紹了 Bootstrap 5 的一些特點，但這個工具真的有這麼好嗎？&lt;br&gt;→ 來參加活動，我現場示範給你看&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;接下來，我們預計在 10/27 進行「 Bootstrap 5 網頁開發整合術」的課程介紹，歡迎你提前發問，我將在直播過程中一一回覆。&lt;/p&gt;
          
        &lt;/article&gt;
      &lt;/div&gt;
      &lt;div class="col-md-4 d-none d-md-block"&gt;
        &lt;div class="sticky-top" style="top: 16px;"&gt;
          &lt;div class="p-4 bg-light rounded"&gt;
            &lt;h4&gt;關於我&lt;/h4&gt;
            &lt;p class="mb-0"&gt;學習製作網站，關於網頁開發相關技巧。&lt;br&gt;開發技巧有：HTML、CSS、JAVASCRIPT、JQUERY、RWD、BOOTSTRAP、VUE、GIT&amp;GITHUB...等相關技巧。&lt;/p&gt;
          &lt;/div&gt;
          &lt;div class="p-4"&gt;
            &lt;h4&gt;封存&lt;/h4&gt;
            &lt;ol class="list-unstyled"&gt;
              &lt;li&gt;&lt;a href="#"&gt;2022年 三月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2022年 二月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2022年 一月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 十二月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 十一月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 十月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 九月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 八月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 七月&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;2021年 六月&lt;/a&gt;&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/div&gt;
          &lt;div class="p-4"&gt;
            &lt;h4&gt;追蹤我&lt;/h4&gt;
            &lt;ul class="list-unstyled"&gt;
              &lt;li&gt;&lt;a href="#"&gt;Github&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Blog 版型 - 內文及側欄安排 end --&gt;

  &lt;/div&gt;

  &lt;!-- Blog 版型 - Footer 製作 start --&gt;
  &lt;footer class="bg-light border-top py-4 mt-5 text-center"&gt;
    &lt;p&gt;Bootstrap 5 練習作業&lt;/p&gt;
    &lt;p&gt;
      &lt;a href="#"&gt;Back to top&lt;/a&gt;
    &lt;/p&gt;
  &lt;/footer&gt;
  &lt;!-- Blog 版型 - Footer 製作 end --&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>Blog 版型 – 作業說明</h3>



<h3>Blog 版型 – 作業範例下載</h3>



<p>注意：</p>



<ul><li>此檔案僅用來參考，請勿複製程式碼</li></ul>



<h2 class="has-background" style="background-color:#ff6663">CH10 – Bootstrap 與神奇的 Sass</h2>



<h3>Bootstrap 與 Sass 的關係</h3>



<h4>CSS 預處理器</h4>



<p>以 SASS 為主的說明。</p>



<p>Bootstrap 就是使用 Sass 預處理器開發的喔。</p>



<h4>什麼是預處理器？</h4>



<p>以 Bootstrap 來說這麼大的框架原始碼檔案會是由許多小元件組成。<br>但是這個別的檔案並無法被瀏覽器所解析，透過 Sass 編譯器能夠將這些小元件組成完整的 CSS，並且能夠在瀏覽器上運行。</p>



<h4>.scss 與 .sass 差在哪裡？</h4>



<pre class="wp-block-code"><code>// .sass
.btn
  display: inline-block
  font-weight: $btn-font-weight
  text-align: center
  +transition($btn-transition}</code></pre>



<p>.sass<br>是原始的 sass 格式，特點是沒有<strong>花括號</strong>及<strong>分號</strong>，讓程式碼呈現極簡的風格。</p>



<pre class="wp-block-code"><code>// .scss
.btn {
  display: inline-block;
  font-weight: $btn-font-weight;
  text-align: center;
  @include transition($btn-transition);
}</code></pre>



<p>.scss<br>特點是與 CSS 相當類似，所以<strong>大多網頁設計師都可以無痛使用</strong>。</p>



<h4>為什麼要學預處理器</h4>



<p><strong>優點：變數輕鬆改，樣式千變萬化</strong><br>只要修改些微的變數，就可以讓原有的模組有更多的延伸變化，不僅有效減少開發時間，更能應付多變需求。</p>



<p><strong>優點：相同結構重複利用</strong><br>每次專案都有許多可重複運用的元件、樣式，與其這樣不如每次都收集起來，不再重複造輪子，輕鬆愜意創造新花樣。<br><br>按鈕、字體、邊線、圖片滿版都是以前做的。</p>



<p>-webkit-、-moz-、-o-、-ms-<br><strong>優點：自動化修正</strong><br>哪一個 CSS 在目前還需要前綴詞呢？<br>算了，那一點都不重要，Sass 可搭配 PostCSS 自動完成此功能，假設未來都不需要前綴詞，當然也可以自動移除。<br>所謂工程師，就是能自動就讓他自動阿。</p>



<h4>開始學習 Sass 吧</h4>



<ol><li>如何安裝 Sass 開發環境</li><li>如何匯入 Bootstrap 模組及調整情境色</li><li>開啟 Bootstrap 隱藏樣式</li><li>客製化模組</li><li>自定義模組心法分享</li></ol>



<h3 class="has-background" style="background-color:#ff6663">在 VSCode 中加入 Sass 環境</h3>



<h4>操作步驟</h4>



<ol><li>點擊 Extensions、輸入 Live Sass Compiler 後安裝此套件</li><li>在專案中新增 stylesheets 資料夾、在裡面新增 all.scss 檔案後就會在 VSCode 下面看到出現 Watch Sass 功能</li><li>如果沒有就把 VSCode 關閉然後再以專案的形式打開</li><li>按下 Watch Sass 會發現新增 css 資料夾以及兩個檔案 al.css、all.css.map</li><li>all.css 都是透過 all.scss 編譯而成，因此我們都只會在 all.scss 撰寫我們的程式碼</li><li>在 all.scss 檔案撰寫程式碼、存檔後會立即編譯，在 all.css 檔案就可以看到編譯完成的檔案</li><li>在 index.html 檔案載入 all.css，並在文字內套用 .filter 樣式</li><li>到瀏覽器看是否有套用樣式成功</li></ol>



<pre class="wp-block-code"><code>// all.scss - 6

$primary: blue;

.filter {
  filter: blur(1px);
  color: $primary;
}</code></pre>



<p>自我補充：如何調整編譯後檔案位置、名稱<br>File &gt; Preferences &gt; Settings &gt; Extensions &gt; JSON &gt; JSON: Schemas &gt; Edit in settings.json</p>



<pre class="wp-block-code"><code>// settings.json

"liveSassCompile.settings.formats": &#91;
    // 調整
    // {
    //     "format": "compressed",
    //     "extensionName": ".min.css",
    //     "savePath": "/css"
    // }
    // 預設
    {
        "format": "expanded",
        "extensionName": ".css",
        "savePath": null
    }</code></pre>



<h3 class="has-background" style="background-color:#ff6663">匯入 Bootstrap 並調整樣式</h3>



<h4>操作步驟</h4>



<ol><li>把 Bootstrap 加入到我們的專案</li><li>Bootstrap 加入進來的方式有兩種<ul><li>直接到 Bootstrap 文件下載、選擇原始檔案下載</li><li>使用 npm 下載 (必需先安裝 Node.js)，課程會介紹這個方法</li></ul></li><li>在 VSCode 按下 Ctrl + ` 開啟終端機</li><li>輸入指令 npm init 進行初始化設定，建立 package.json 檔案</li><li>輸入指令安裝 Bootstrap：npm install bootstrap</li><li>開啟 Bootstrap 官方文件，到自定義 &gt; Sass &gt; 匯入的地方找到引入的方法，然後貼到 all.scss 檔案中存檔，編譯完成後會在下方出現 Success 的字眼</li><li>在 index.html 試著把一些元件加到畫面上</li><li>調整 Sass 的變數，在官方有介紹使用的方法，在這個地方使用比較簡單的一個方式，點開 node_modules &gt; bootstrap &gt; scss &gt; 找到 _varialbes.scss 檔案使用另存新檔到 stylesheet 資料夾裡面，老師個人比較習慣會再另外建立一個資料夾 helpers、然後按下存檔</li><li>在 helpers 資料夾中就有一個 _variables.scss 檔案，這邊就有 Bootstrap 所有的變數，在 all.scss 就可以把 helpers/_variables.scss 檔案引入，直接引入會產生錯誤，引此我們要先載入 functions，然後再載入 helpers/variables，存檔之後就會再次編譯並套用裡面的變數</li><li>打開終端機、然後跳到輸出這個分頁，再 helpers/variables 的 $theme-colors 的地方(大概81行左右的地方)，我們要把 primary 的地方改成 purple、然後儲存，在 OUTPUT 的地方看是否有更動，如果沒有更動就重開 VSCode 再來試試看</li><li>回到瀏覽器看一下是否有套用上紫色的樣式</li></ol>



<pre class="wp-block-code"><code>// all.scss - 6

@import "../node_modules/bootstrap/scss/bootstrap";</code></pre>



<pre class="wp-block-code"><code>// index.html - 7

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;link rel="stylesheet" href="stylesheets/all.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;a href="#" class="btn btn-primary"&gt;我是按鈕&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.scss - 9


// required functions
@import "../node_modules/bootstrap/scss/functions";
// helpers/variables
@import "./helpers/variables";

@import "../node_modules/bootstrap/scss/bootstrap";</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables - 10

// scss-docs-start theme-colors-map
$theme-colors: (
  "primary":    $purple,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
) !default;</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://getbootstrap.com/docs/5.1/getting-started/download/" target="_blank">Getting started &gt; Download &gt; Source files &gt; Download</a></li><li><a rel="noreferrer noopener" href="https://getbootstrap.com/docs/5.1/customize/sass/" target="_blank">Customize &gt; Sass</a></li><li><a href="https://getbootstrap.com/docs/5.1/customize/sass/#variable-defaults" target="_blank" rel="noreferrer noopener">Customize &gt; Sass &gt; Variable defaults</a></li></ul>



<h3>讓 Bootstrap 不要那麼肥，手動匯入元件</h3>



<h4>操作步驟</h4>



<ol><li>在自定義 &gt; 優化 &gt; 匯入 Sass 樣式從 @import “mixins”; 以下開始複製並貼到 all.scss、把原本匯入的 bootstrap 取代，這個路徑是錯誤的</li><li>修正路徑，可以使用垂直圈選、或者使用 ctrl + d 圈選，把路徑修改後，就可以刪除部分元件，前三個要保留起來，是 Bootstrap 的預設值，後面的就可以進行一些選用，我們現在就把大部分的元件註解掉，編譯完成後可以看檔案大小變成多少</li><li>比較常用到的元件有 images, containers, grid, tables, forms, buttons, helpers, utilities，其他沒用到建議可以不用載入</li></ol>



<pre class="wp-block-code"><code>// all.scss - 3

// required functions
@import "../node_modules/bootstrap/scss/functions";
// helpers/variables
@import "./helpers/variables";

@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/utilities";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";

@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
// @import "../node_modules/bootstrap/scss/transitions";
// @import "../node_modules/bootstrap/scss/dropdown";
// @import "../node_modules/bootstrap/scss/button-group";
// @import "../node_modules/bootstrap/scss/nav";
// @import "../node_modules/bootstrap/scss/navbar";
// @import "../node_modules/bootstrap/scss/card";
// @import "../node_modules/bootstrap/scss/accordion";
// @import "../node_modules/bootstrap/scss/breadcrumb";
// @import "../node_modules/bootstrap/scss/pagination";
// @import "../node_modules/bootstrap/scss/badge";
// @import "../node_modules/bootstrap/scss/alert";
// @import "../node_modules/bootstrap/scss/progress";
// @import "../node_modules/bootstrap/scss/list-group";
// @import "../node_modules/bootstrap/scss/close";
// @import "../node_modules/bootstrap/scss/toasts";
// @import "../node_modules/bootstrap/scss/modal";
// @import "../node_modules/bootstrap/scss/tooltip";
// @import "../node_modules/bootstrap/scss/popover";
// @import "../node_modules/bootstrap/scss/carousel";
// @import "../node_modules/bootstrap/scss/spinners";
// @import "../node_modules/bootstrap/scss/offcanvas";
// @import "../node_modules/bootstrap/scss/placeholders";

// // Helpers
@import "../node_modules/bootstrap/scss/helpers";

// // Utilities
@import "../node_modules/bootstrap/scss/utilities/api";</code></pre>



<p>垂直圈選：<br>Mac: option + 左鍵<br>Windows: 滑鼠中鍵</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/customize/optimize/" target="_blank" rel="noreferrer noopener">自定義 &gt; 優化 (Optimize)</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">修改特定的元件的變數</h3>



<p>介紹 Bootstrap 中的 Sass 變數有哪些是可以做調整的。</p>



<h4>操作步驟</h4>



<ol><li>第一種方法是在文件中看到有哪些變數是可以調整的，像是格線系統，我們可以從排版 &gt; 網格 &gt; Sass，是在說明 Bootstrap 的 Sass 是如何建構、提供哪些變數可以做調整，在 helpers/_variables.scss 檔案中找到 $grid-columns，把它改成16、然後存檔。</li><li>第二種方式直接搜尋變數名稱，例如 radius。另外我們也可以直接搜尋模組，例如 btn、card。</li><li>直接調整全部的圓角設定。在自己在設定變數的時候常會把原本的註解起來，然後把自己的變數設定加在前面。方便自己之後搜尋自己自定義變數的設定可以在後面註解加上 custom。存檔之後就會發現所有的元件都會加上大圓角。</li><li>不希望所有元件都加上大圓角，就可以到特定的元件做調整，像是按鈕的元件。在習慣上會把按鈕和 input 共用相同的設定值。</li><li>關於 utilities 調整方式就不太一樣，示範 spacing。可以在 helpers/_variables.scss 檔案搜尋 spacing 或者搜尋 spacer 也可以。</li></ol>



<pre class="wp-block-code"><code>// all.scss - 設定
// 需要 functions
@import "../node_modules/bootstrap/scss/functions";

// 自定義 helpers/variables
@import "./helpers/variables";

// Configuration
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/utilities";

// 排版 &amp; 元件
// 基本預設
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
// 常用
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
// 會用到
@import "../node_modules/bootstrap/scss/card";

// 工具 Helpers
@import "../node_modules/bootstrap/scss/helpers";

// 通用類別 Utilities
@import "../node_modules/bootstrap/scss/utilities/api";</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Live Sass&lt;/title&gt;
  &lt;link rel="stylesheet" href="stylesheets/all.css"&gt;
  &lt;style&gt;
    .box {
      height: 100px;
      background-color: var(--bs-primary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="container my-3"&gt;
    &lt;div class="row"&gt;
      &lt;div class="col-6"&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;div class="col-6"&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;div class="col-4"&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;a href="#" class="btn btn-primary me-7"&gt;我是按鈕&lt;/a&gt;
    &lt;a href="#" class="btn btn-primary"&gt;我是按鈕&lt;/a&gt;
    &lt;hr&gt;
    &lt;div class="mb-3"&gt;
      &lt;label for="exampleFormControlInput1" class="form-label"&gt;Email address&lt;/label&gt;
      &lt;input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com"&gt;
    &lt;/div&gt;
    &lt;div class="mb-3"&gt;
      &lt;label for="exampleFormControlTextarea1" class="form-label"&gt;Example textarea&lt;/label&gt;
      &lt;textarea class="form-control" id="exampleFormControlTextarea1" rows="3"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div class="card" style="width: 18rem;"&gt;
      &lt;div class="card-body"&gt;
        &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
        &lt;h6 class="card-subtitle mb-2 text-muted"&gt;Card subtitle&lt;/h6&gt;
        &lt;p class="card-text"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt;
        &lt;a href="#" class="card-link"&gt;Card link&lt;/a&gt;
        &lt;a href="#" class="card-link"&gt;Another link&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss - 3

// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns:                16; // 12 !default;
$grid-gutter-width:           1.5rem !default;
$grid-row-columns:            6 !default;

$gutters: $spacers !default;

// scss-docs-start border-radius-variables
$border-radius:               1rem; // .25rem !default; custom
$border-radius-sm:            .2rem !default;
$border-radius-lg:            .3rem !default;
$border-radius-pill:          50rem !default;
// scss-docs-end border-radius-variables

</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss - 4

// Allows for customizing button radius independently from global border radius
$btn-border-radius:           1rem; // $border-radius !default; custom
$btn-border-radius-sm:        $border-radius-sm !default;
$btn-border-radius-lg:        $border-radius-lg !default;

// scss-docs-start form-input-variables
$input-border-radius:                   1rem; //$border-radius !default; custom
$input-border-radius-sm:                $border-radius-sm !default;
$input-border-radius-lg:                $border-radius-lg !default;

// Cards

// scss-docs-start card-variables
$card-spacer-y:                     $spacer !default;
$card-spacer-x:                     $spacer !default;
$card-title-spacer-y:               $spacer * .5 !default;
$card-border-width:                 $border-width !default;
$card-border-color:                 rgba($black, .125) !default;
$card-border-radius:                0; // $border-radius !default; custom
$card-box-shadow:                   null !default;
$card-inner-border-radius:          subtract($card-border-radius, $card-border-width) !default;
$card-cap-padding-y:                $card-spacer-y * .5 !default;
$card-cap-padding-x:                $card-spacer-x !default;
$card-cap-bg:                       rgba($black, .03) !default;
$card-cap-color:                    null !default;
$card-height:                       null !default;
$card-color:                        null !default;
$card-bg:                           $white !default;
$card-img-overlay-padding:          $spacer !default;
$card-group-margin:                 $grid-gutter-width * .5 !default;
// scss-docs-end card-variables</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss - 5

// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.

// scss-docs-start spacer-variables-maps
$spacer: 1rem !default;
$spacers: (
  0: 0,
  1: $spacer * .25,
  2: $spacer * .5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
  6: $spacer * 4.5,
  7: $spacer * 6,
) !default;

$negative-spacers: if($enable-negative-margins, negativify-map($spacers), null) !default;
// scss-docs-end spacer-variables-maps</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/layout/grid/#sass" target="_blank">排版 &gt; 網格 &gt; Sass</a></li><li><a href="https://getbootstrap.com/docs/5.1/utilities/spacing/#sass" target="_blank" rel="noreferrer noopener">通用類別 &gt; 間距 (Spacing) &gt; Sass</a></li></ul>



<h3>Bootstrap 隱藏功能開關！</h3>



<h4>操作步驟</h4>



<ol><li>我們可以到自定義 &gt; 選項找到 $enable-gradients 是關於背景漸層變數的名稱，然後到 helpers/_variables.scss 搜尋該變數做修改、儲存。</li><li>啟用的方式是我們先加上原本的變數名稱，然後在加上一個 bg-gradient 就可以套用。加上之後，他其實不是只有背景加上漸層色，是所有的元件都加上漸層色、視覺效果。</li><li>還有另外一個陰影的設定 $enable-shadows</li></ol>



<pre class="wp-block-code"><code>// helpers/_variables.scss - 1

// Options
//
// Quickly modify global styling by enabling or disabling optional features.

$enable-caret:                true !default;
$enable-rounded:              true !default;
$enable-shadows:              false !default;
$enable-gradients:            true; // false !default; custom
$enable-transitions:          true !default;
$enable-reduced-motion:       true !default;
$enable-smooth-scroll:        true !default;
$enable-grid-classes:         true !default;
$enable-cssgrid:              false !default;
$enable-button-pointers:      true !default;
$enable-rfs:                  true !default;
$enable-validation-icons:     true !default;
$enable-negative-margins:     false !default;
$enable-deprecation-messages: true !default;
$enable-important-utilities:  true !default;</code></pre>



<pre class="wp-block-code"><code>// index.html - 2

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Live Sass&lt;/title&gt;
  &lt;link rel="stylesheet" href="stylesheets/all.css"&gt;
  &lt;style&gt;
    .box {
      height: 100px;
      background-color: var(--bs-primary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="container my-3"&gt;
    &lt;div class="row"&gt;
      &lt;div class="col-6"&gt;&lt;div class="box bg-primary bg-gradient"&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;div class="col-6"&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;div class="col-4"&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;a href="#" class="btn btn-primary me-7"&gt;我是按鈕&lt;/a&gt;
    &lt;a href="#" class="btn btn-primary"&gt;我是按鈕&lt;/a&gt;
    &lt;hr&gt;
    &lt;div class="mb-3"&gt;
      &lt;label for="exampleFormControlInput1" class="form-label"&gt;Email address&lt;/label&gt;
      &lt;input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com"&gt;
    &lt;/div&gt;
    &lt;div class="mb-3"&gt;
      &lt;label for="exampleFormControlTextarea1" class="form-label"&gt;Example textarea&lt;/label&gt;
      &lt;textarea class="form-control" id="exampleFormControlTextarea1" rows="3"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div class="card" style="width: 18rem;"&gt;
      &lt;div class="card-body"&gt;
        &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
        &lt;h6 class="card-subtitle mb-2 text-muted"&gt;Card subtitle&lt;/h6&gt;
        &lt;p class="card-text"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt;
        &lt;a href="#" class="card-link"&gt;Card link&lt;/a&gt;
        &lt;a href="#" class="card-link"&gt;Another link&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss - 3

// Options
//
// Quickly modify global styling by enabling or disabling optional features.

$enable-caret:                true !default;
$enable-rounded:              true !default;
$enable-shadows:              true; // false !default; custom
$enable-gradients:            true; // false !default; custom
$enable-transitions:          true !default;
$enable-reduced-motion:       true !default;
$enable-smooth-scroll:        true !default;
$enable-grid-classes:         true !default;
$enable-cssgrid:              false !default;
$enable-button-pointers:      true !default;
$enable-rfs:                  true !default;
$enable-validation-icons:     true !default;
$enable-negative-margins:     false !default;
$enable-deprecation-messages: true !default;
$enable-important-utilities:  true !default;</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/utilities/background/#background-gradient" target="_blank">通用類別 &gt; 背景 &gt; 背景漸層</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/customize/options/" target="_blank" rel="noreferrer noopener">自定義 &gt; 選項</a></li></ul>



<h3>響應式文字縮放功能</h3>



<p>如果不喜歡這個功能，可以在 helpers/_variables.scss 檔案把 $enable-rfs 關閉</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/getting-started/rfs/" target="_blank" rel="noreferrer noopener">快速開始 &gt; RFS</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">自定義通用類別</h3>



<h4>操作步驟</h4>



<ol><li>製作範例、接下來再透過指定的通用類別讓這個畫面呈現更加完善</li><li>要使用 utilities 該怎麼做，進入 node_modules &gt; bootstrap &gt; scss &gt;_utilities.scss，另存新檔到 helpers 資料夾裡面</li><li>到官方文件了解到底要怎樣去定義，然後在官方這裡有提供一個範例，在官方的範例我們可以加入到 helpers/_utilities.scss 最後面</li><li>要記得把 helpers/utilities 匯入到 all.scss 裡面來</li><li>因為圖片裡面的物品並不是放在正中央，我們需要加入第二組自訂定位的 utilities</li><li>增加額外的選項，就是響應式的選項，可以在 helpers/utilities.scss 加上 responsive 的屬性</li></ol>



<pre class="wp-block-code"><code>// helpers/_utilites.scss - 第一組自訂背景的 utilities

    // custom background
    "background-size": (
      property: background-size,
      class: bg-s,
      values: (
        cover: cover,
        contain: contain,
        50: 50%
      )
    )</code></pre>



<pre class="wp-block-code"><code>// all.scss

// 需要 functions
@import "../node_modules/bootstrap/scss/functions";

// 自定義 helpers/variables
@import "./helpers/variables";

// 自定義 helpers/utilities
@import "./helpers/utilities";

// Configuration
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/utilities";

// 排版 &amp; 元件
// 基本預設
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
// 常用
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
// 會用到
@import "../node_modules/bootstrap/scss/card";

// 工具 Helpers
@import "../node_modules/bootstrap/scss/helpers";

// 通用類別 Utilities
@import "../node_modules/bootstrap/scss/utilities/api";</code></pre>



<pre class="wp-block-code"><code>// helpers/utilities.scss - 第二組自訂定位的 utilities

    // custom background
    "background-size": (
      property: background-size,
      class: bg-s,
      values: (
        cover: cover,
        contain: contain,
        50: 50%
      )
    ),
    "background-position": (
      property: background-position,
      class: bg-p,
      values: (
        center: center center,
      )
    )</code></pre>



<pre class="wp-block-code"><code>// helpers/utilities - 6

    // custom background
    "background-size": (
      property: background-size,
      class: bg-s,
      values: (
        cover: cover,
        contain: contain,
        50: 50%
      )
    ),
    "background-position": (
      property: background-position,
      responsive: true,
      class: bg-p,
      values: (
        center: center center,
      )
    )</code></pre>



<pre class="wp-block-code"><code>// utilities.html

&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Live Sass&lt;/title&gt;
  &lt;link rel="stylesheet" href="stylesheets/all.css"&gt;
  &lt;style&gt;
    .box {
      height: 100px;
      background-color: var(--bs-primary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body class="vh-100 bg-s-cover bg-p-lg-center" style="background-image: url(https://images.unsplash.com/photo-1458966480358-a0ac42de0a7a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80);"&gt;
  
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/api/" target="_blank" rel="noreferrer noopener">通用類別 &gt; API</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">使用 Bootstrap 方法，產生獨立元件</h3>



<h4>操作步驟</h4>



<ol><li>在 helpers/utilities.scss 的 $theme-colors 加上 “hex: #69F8AE，存檔之後過一會就會套用自訂的樣式，這個方式會套用到所有的地方</li><li>有些情況只想在特定的元件下才啟用這個樣式的話，我們就可以使用 Bootstrap 另外提供的方法，我們先把剛才的 hex 註解起來</li><li>到官方文件找到文件 &gt; 元件 &gt; 按鈕 &gt; Mixins，Mixins 提供非常多的方法，那這些方法在套用之後，就可以產生一個新的色彩。這邊就有提供關於按鈕產生的 Mixins button-variant 的方法，這個方法可以傳入部分色彩，就可以產生一個新的按鈕，這個按鈕就不是透過變數的方式所產生，而是透過額外的方法。具體的話，該如何運用它，我們可以再往下可以看到他有一個套用的方式，他是使用 @include 的方式把這個方法給引入進來，那後面會載入兩個色彩</li><li>在 stylesheets 裡面新增一個資料夾，這也算是個人的習慣，會使用一個新的資料夾來存放所有的元件，那這個資料夾名稱就叫 components。那在這個資料夾內可以再產生一個新的檔案，這個檔案叫做 _custom-buttons.scss，這 _(下底線)就會讓這個 sass 檔案不會被實際編譯一個獨立的檔案。</li><li>我們把 all.scss 打開，在最下方的地方我們把這隻檔案給引入進來</li><li>在 _custom-buttons.scss 開始編輯這支檔案，</li></ol>



<pre class="wp-block-code"><code>// component.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Live Sass&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
&lt;/head&gt;
&lt;style&gt;
  .box {
    height: 100px;
    background-color: var(--bs-primary);
  }
&lt;/style&gt;
&lt;body&gt;
  &lt;button type="button" class="btn btn-primary"&gt;這是按鈕&lt;/button&gt;
  &lt;button type="button" class="btn btn-hex"&gt;這是按鈕&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss - 5.引入獨立元件

// scss-docs-start theme-colors-map
$theme-colors: (
  "primary":    $purple,
  "hex":        #69F0AE,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
) !default;
// scss-docs-end theme-colors-map</code></pre>



<pre class="wp-block-code"><code>// all.scss

// 需要 functions
@import "../node_modules/bootstrap/scss/functions";

// 自定義 helpers/variables
@import "./helpers/variables";

// 自定義 helpers/utilities
@import "./helpers/utilities";

// Configuration
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/utilities";

// 排版 &amp; 元件
// 基本預設
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
// 常用
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
// 會用到
@import "../node_modules/bootstrap/scss/card";

// 工具 Helpers
@import "../node_modules/bootstrap/scss/helpers";

// 通用類別 Utilities
@import "../node_modules/bootstrap/scss/utilities/api";

// 獨立元件
@import "./components/custom-buttons";</code></pre>



<pre class="wp-block-code"><code>// _custom-buttons.scss - 6


.btn-custom-hex {
  @include button-variant(#69F0AE, #69F0AE)
}

.btn-outline-hex {
  @include button-outline-variant(#69F0AE)
}</code></pre>



<pre class="wp-block-code"><code>// components.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Live Sass&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
&lt;/head&gt;
&lt;style&gt;
  .box {
    height: 100px;
    background-color: var(--bs-primary);
  }
&lt;/style&gt;
&lt;body&gt;
  &lt;button type="button" class="btn btn-primary"&gt;這是按鈕&lt;/button&gt;
  &lt;button type="button" class="btn btn-custom-hex"&gt;這是按鈕&lt;/button&gt;
  &lt;button type="button" class="btn btn-outline-hex"&gt;這是按鈕&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/buttons/#mixins" target="_blank" rel="noreferrer noopener">元件 &gt; 按鈕 (Buttons) &gt; Mixins</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">在 Sass 中，自訂高可用性的元件</h3>



<h4>操作步驟</h4>



<ol><li>自訂元件的概念就是當你引入 Bootstrap 的時候，你的元件不夠使用需要自行做開發的時候，會怎麼做比較好，那這一段沒有一個絕對的做法，在此只是分享在實作中會怎麼樣去自訂元件。</li><li>使用方式過去到現在差異不大，這是 Bootstrap 4 進行開發的時候會定義 all.scss、components、helpers，那跟目前版本的 Bootstrap 5 介紹的內容其實差異不大，helpers 資料夾裡面會放 _variables.scss、_utilities.scss 這兩個變數檔，各種元件會把它放在 components 資料夾裡面。在定義元件的時候，盡可能維持一個概念，在定義元件的時候預期這個元件就是可以被重複利用的，所以不管它是放在哪個頁面預期就是可以把它拿過來使用，所以它才會叫做元件。</li><li>透過元件範例進行介紹，我們在建立元件的過程中可以給它一個名稱，名稱可以用它的外觀來進行命名，比如說它就是一個進度條的外觀，那就可以給它一個 stepbar，這種命名沒有絕對的對錯，最外層的部分會一個叫做 stepbar，那內層的話在命名的過程中就會延續這個 stepbar 的名稱做開頭，後面再依它的需求進行調整，比如說這是 stepbar 的各個子項目，那它就叫做 stepbar-item。</li><li>當我們建立完 stepbar 這個元件之後，在 all.scss 把 components/_stepbar.scss 把它引入進來。在每個元件檔名前面都會有一個下底線避免編譯成獨立的檔案。</li><li>在 components/_stepbar.scss 開發上面盡可能維持一些原則，如果是個 sass 新手的話，建議把整個 CSS 檔案寫進來就好、然後套用一些變數。</li><li>如果是有經驗的 sass 開發者的話，以下事項要稍微注意一下，第一個就是許多 sass 開發者會過度的利用 sass 的層級功能，像是在 .stepbar-item 這邊如果你有子項目的時候，許多新手 sass 開發者，他會不斷的用巢狀寫下去，這是一個非常不好的寫法。如果當你遇到多個層級的時候，建議把它改成使用這種方式去做撰寫，當你的巢狀寫法跟這種寫法的結果是一模一樣的時候，請不要過度巢狀。過度巢狀是一個非常不好的寫法，除非它有特別的用意。在 Bootstrap 裡面也會避免過度巢狀，那如果它使用巢狀，那是有它的意義在，如果沒有它的意義在，請不要過度巢狀。第二點是盡可能使用變數，變數的話可以看這個範例，在 background-color 這裡有使用 $primary 的顏色，這個 $primary 是來自 Bootstrap 的變數，透過這種方式就可以確保當前的元件是符合 Bootstrap 的色彩。在這個元件下需要自訂屬於這個元件自訂的變數，當有這個需求可以把變數定義在 _variables.scss 這支檔案。另一種方式就是把變數定義在當前的元件內，這個變數就只會給予這個元件所使用，所以在這個地方有個 $size，那它就是給後面這個 $size 所套用，我們在畫面上就會看到這個元件大小是 1.5 rem。如果覺得 size 太小就可以統一使用變數來做調整，這樣的好處是說，當有許多地方跟這個尺寸、變數有連動的時候，只要調整一個地方，所有地方就會跟著統一做修改。</li><li>除此之外還有一個叫做狀態，我們在開發一個元件，它可能有不同的主題色彩或者不同的狀態，像是 hover、active 都是屬於狀態，會習慣統一把狀態往後放。所以在這邊會有個 stepbar，往後找就會找到一個 stepbar-item.active 當它啟用的時候就可以加上 active 的樣式，就會統一放在同一個區塊，好處就是當它有其他狀態的時候，就可以在狀態這個片段程式碼來進行調整。剛剛有把 $size 改成 3rem，所以我們再回到瀏覽器來看一下，就可以看到進度條它的尺寸變大了許多。</li><li>這個章就是介紹 sass 跟 Bootstrap 的混合運用方式。</li></ol>



<pre class="wp-block-code"><code>// custom-components.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Live Sass&lt;/title&gt;
  &lt;link rel="stylesheet" href="stylesheets/all.css"&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="container"&gt;
    &lt;h1&gt;自訂元件&lt;/h1&gt;

    &lt;div class="stepbar my-3"&gt;
      &lt;span class="stepbar-item"&gt;1&lt;/span&gt;
      &lt;span class="stepbar-item active"&gt;2&lt;/span&gt;
      &lt;span class="stepbar-item"&gt;3&lt;/span&gt;
    &lt;/div&gt;

    &lt;div class="stepbar my-3"&gt;
      &lt;span class="stepbar-item"&gt;1&lt;/span&gt;
      &lt;span class="stepbar-item"&gt;2&lt;/span&gt;
      &lt;span class="stepbar-item active"&gt;3&lt;/span&gt;
      &lt;span class="stepbar-item"&gt;4&lt;/span&gt;
      &lt;span class="stepbar-item"&gt;5&lt;/span&gt;
    &lt;/div&gt;

    &lt;div class="stepbar my-3"&gt;
      &lt;span class="stepbar-item"&gt;1&lt;/span&gt;
      &lt;span class="stepbar-item"&gt;2&lt;/span&gt;
      &lt;span class="stepbar-item"&gt;3&lt;/span&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.scss - 4

// 需要 functions
@import "../node_modules/bootstrap/scss/functions";

// 自定義 helpers/variables
@import "./helpers/variables";

// 自定義 helpers/utilities
@import "./helpers/utilities";

// Configuration
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/utilities";

// 排版 &amp; 元件
// 基本預設
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
// 常用
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
// 會用到
@import "../node_modules/bootstrap/scss/card";

// 工具 Helpers
@import "../node_modules/bootstrap/scss/helpers";

// 通用類別 Utilities
@import "../node_modules/bootstrap/scss/utilities/api";

// 獨立元件
@import "./components/custom-buttons";
@import "./components/stepbar";</code></pre>



<pre class="wp-block-code"><code>// components/stepbar

.stepbar {
  // 原則 1：避免過多層級
  // 原則 2：盡可能使用變數
  $size: 3rem;

  display: flex;
  justify-content: space-between;
  position: relative;
  &amp;::after {
    content: "";
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background-color: lighten($primary, 20%);
    transform: translateY(-50%);
    position: absolute;
    z-index: -1;
  }

  // level 1 外層
  .stepbar-item {
    background-color: $primary;
    width: $size;
    height: $size;
    border-radius: $size;
    border: 1px solid white;

    color: white;
    display: flex;
    justify-content: center;
    align-items: center;

  }

  // 2
  // ...
  .stepbar-inner {

  }

  // 狀態
  .stepbar-item.active {
    box-shadow: 0 0 0 1px $primary;
  }
  .stepbar-item.active ~ .stepbar-item {
    background-color: $gray-500;
  }

}</code></pre>



<h2>CH11 – 學員專屬：Bootstrap 額外元件範例</h2>



<h3>學員專屬：Bootstrap 額外範例說明</h3>



<h3>額外元件範例資源下載</h3>



<p>下載請參考附近</p>



<p>此資源僅提供給予註冊「Bootstrap 5 網頁切版整合術」的學員使用。</p>



<h2>CH12 – 個人簡歷 – 練習使用 Sass 變數開發網頁</h2>



<h3>個人簡歷：匯入 Sass</h3>



<ol><li>安裝 package.json 檔案 – npm init</li><li>安裝 Bootstrap 套件 npm install bootstrap</li><li>建立 stylesheets 資料夾，在裡面建立 helpers 資料夾，從 node_modules 資料夾複製 _utilities.scss、_variables.scss 檔案到 helpers 資料夾裡面</li><li>建立 all.scss 檔案把 Bootstrap 匯入進來，可參考 Bootstrap 文件檔案，匯入 helpers 資料夾的 variables、utilities 檔案</li><li>使用 Watch Sass 把 all.scss 檔案編譯成 all.css 檔案</li><li>建立 index.html 檔案與內容、載入 all.css</li><li>修改 helpers/_variables.scss 檔案的 theme-color-variables，$primary: #9b5d42;、$secondary: #2a2e22;，主色彩和次色彩可以從圖片經由 Chrome Console 用吸取工具吸取調整，然後儲存</li><li>使用 VSCode 用 Live Server 開啟網頁</li></ol>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;個人簡歷-Sass開發&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div class="container"&gt;
    &lt;img src="https://images.unsplash.com/photo-1501002138038-06806ed23bce?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80" alt=""&gt;
    &lt;a href="#" class="btn btn-primary"&gt;按鈕&lt;/a&gt;
    &lt;a href="#" class="btn btn-secondary"&gt;按鈕&lt;/a&gt;
  &lt;/div&gt;
  
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "./helpers/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";

@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";</code></pre>



<pre class="wp-block-code"><code>// stylesheets/helpers/_variables.scss

// scss-docs-start theme-color-variables
$primary:       #9b5d42; // $blue !default;
$secondary:     #2a2e22;  // $gray-600 !default;
$success:       $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-900 !default;
// scss-docs-end theme-color-variables</code></pre>



<ul><li><a href="https://getbootstrap.com/docs/5.1/customize/sass/" target="_blank" rel="noreferrer noopener">Customize &gt; Sass</a></li><li><a rel="noreferrer noopener" href="https://getbootstrap.com/docs/5.1/customize/optimize/" target="_blank">Customize &gt; Optimize</a></li></ul>



<h3>個人簡歷：課程相關資源</h3>



<p>本章節運用的大頭照連結 (課練習抽取色彩)：</p>



<ul><li><a href="https://unsplash.com/photos/70LUMmAw3L0" target="_blank" rel="noreferrer noopener">連結一</a></li><li><a href="https://unsplash.com/photos/G0yOf-OF-SA" target="_blank" rel="noreferrer noopener">連結二</a></li></ul>



<p>個人練習採用圖片</p>



<ul><li><a rel="noreferrer noopener" href="https://unsplash.com/photos/e5pqjD85NRg" target="_blank">Photo by Omar Lopez – 1</a></li><li><a href="https://unsplash.com/photos/LUPnb7e-4VQ" target="_blank" rel="noreferrer noopener">Photo by Omar Lopez – 2</a></li></ul>



<h3>個人簡歷：Header 首圖製作</h3>



<pre class="wp-block-code"><code>// index.html - 個人簡歷: Header 首圖製作

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;個人簡歷-Sass開發&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;style&gt;
    .bg-cover {
      background-size: cover;
      background-position: center center;
      background-repeat: no-repeat;
    }
    .bg-attachment-fixed {
      background-attachment: fixed;
    }
    .deco-box {
      height: 240px;
      width: 240px;
      background-color: var(--bs-secondary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;header class="min-vh-100 position-relative"&gt;
    &lt;div class="deco-box position-absolute top-0 start-0"&gt;&lt;/div&gt;
    &lt;div class="deco-box position-absolute bottom-0 end-0"&gt;&lt;/div&gt;
    &lt;div class="position-absolute bg-cover bg-attachment-fixed" style="top: 30px; left: 30px; right: 30px; bottom: 30px; background-image: url(https://images.unsplash.com/photo-1501002138038-06806ed23bce?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80)"&gt;&lt;/div&gt;
    &lt;div class="position-absolute top-50 start-50 translate-middle text-center text-success"&gt;
      &lt;h1 class="display-1 fw-bold"&gt;背包客&lt;/h1&gt;
      &lt;hr class="mb-1 mx-n3"&gt;
      &lt;h2&gt;Backpacker&lt;/h2&gt;
      &lt;p&gt;在對的道路上迷失是件多麼美好的事情。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "./helpers/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";

@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss

// scss-docs-start theme-color-variables
$primary:       #9b5d42; // $blue !default;
$secondary:     #2a2e22;  // $gray-600 !default;
$success:       $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-900 !default;
// scss-docs-end theme-color-variables

// Options
//
// Quickly modify global styling by enabling or disabling optional features.

$enable-caret:                true !default;
$enable-rounded:              true !default;
$enable-shadows:              false !default;
$enable-gradients:            false !default;
$enable-transitions:          true !default;
$enable-reduced-motion:       true !default;
$enable-smooth-scroll:        true !default;
$enable-grid-classes:         true !default;
$enable-cssgrid:              false !default;
$enable-button-pointers:      true !default;
$enable-rfs:                  true !default;
$enable-validation-icons:     true !default;
$enable-negative-margins:     true; // false !default;
$enable-deprecation-messages: true !default;
$enable-important-utilities:  true !default;</code></pre>



<h3>個人簡歷：自我介紹區塊</h3>



<pre class="wp-block-code"><code>// index.html - 個人簡歷: 自我介紹區塊

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;個人簡歷-Sass開發&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;style&gt;
    .bg-cover {
      background-size: cover;
      background-position: center center;
      background-repeat: no-repeat;
    }
    .bg-attachment-fixed {
      background-attachment: fixed;
    }
    .object-fit-cover {
      object-fit: cover;
    }
    .deco-box {
      height: 240px;
      width: 240px;
      background-color: var(--bs-secondary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;!-- 個人簡歷: Header 首圖製作 start --&gt;
  &lt;header class="min-vh-100 position-relative"&gt;
    &lt;div class="deco-box position-absolute top-0 start-0"&gt;&lt;/div&gt;
    &lt;div class="deco-box position-absolute bottom-0 end-0"&gt;&lt;/div&gt;
    &lt;div class="position-absolute bg-cover bg-attachment-fixed" style="top: 30px; left: 30px; right: 30px; bottom: 30px; background-image: url(https://images.unsplash.com/photo-1501002138038-06806ed23bce?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80)"&gt;&lt;/div&gt;
    &lt;div class="position-absolute top-50 start-50 translate-middle text-center text-success"&gt;
      &lt;h1 class="display-1 fw-bold"&gt;背包客&lt;/h1&gt;
      &lt;hr class="mb-1 mx-n3"&gt;
      &lt;h2&gt;Backpacker&lt;/h2&gt;
      &lt;p&gt;在對的道路上迷失是件多麼美好的事情。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- 個人簡歷: Header 首圖製作 end --&gt;

  &lt;!-- 個人簡歷: 自我介紹區塊 start --&gt;
  &lt;div class="container py-5"&gt;
    &lt;div class="row gy-3 justify-content-center flex-md-row-reverse"&gt;
      &lt;div class="col-md-4"&gt;
        &lt;img src="https://images.unsplash.com/photo-1509467283235-ad1568d50691?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="w-100 object-fit-cover" height="500" alt=""&gt;
      &lt;/div&gt;
      &lt;div class="col-md-5 d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2 class="display-4"&gt;我的旅遊類型：&lt;/h2&gt;
          &lt;p&gt;背包客（英語：backpacker，衍生自backpacking一詞），就是背著背包做長途自助旅行的人，被稱呼為背包客的旅行者往往是在有限的預算下進行旅行活動，所以他們對於旅行的規劃、景點的獨到之處也常有自成一派的見解。&lt;/p&gt;
          &lt;p&gt;在旅遊界裡，擁有豐富經驗的背包客往往相當受人關注，此外，目前背包客也能泛指登山、露營、冒險活動的戶外活動參與者。類似旅遊形式還有沙發客，以低預算甚至免費的形式進行旅遊。&lt;/p&gt;
          &lt;a href="#" class="btn btn-outline-primary mt-4 w-100"&gt;
            看更多我的旅遊類型
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- 個人簡歷: 自我介紹區塊 end --&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>個人簡歷：三欄式卡片運用</h3>



<p>在實作中建議先做其中一個就好了，因為在製作過程中會不斷調整，等到第一張卡片確定都沒有問題之後，再複製到下一張卡片。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/card/#image-overlays" target="_blank" rel="noreferrer noopener">元件 &gt; 卡片 (Card) &gt; 圖片 overlay</a></li></ul>



<h4>個人練習採用圖片</h4>



<ul><li><a rel="noreferrer noopener" href="https://unsplash.com/photos/7XAM0J3dNQM" target="_blank">Photo by Chris Galbraith</a></li><li><a rel="noreferrer noopener" href="https://unsplash.com/photos/xCiXro2avNI" target="_blank">Photo by Mathias P.R. Reding</a></li><li><a href="https://unsplash.com/photos/QldMpmrmWuc" target="_blank" rel="noreferrer noopener">Photo by Todd Trapani</a></li></ul>



<pre class="wp-block-code"><code>// index.html - 個人簡歷: 三欄式卡片運用

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;個人簡歷-Sass開發&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;style&gt;
    .bg-cover {
      background-size: cover;
      background-position: center center;
      background-repeat: no-repeat;
    }
    .bg-attachment-fixed {
      background-attachment: fixed;
    }
    .object-fit-cover {
      object-fit: cover;
    }
    .deco-box {
      height: 240px;
      width: 240px;
      background-color: var(--bs-secondary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;!-- 個人簡歷: Header 首圖製作 start --&gt;
  &lt;header class="min-vh-100 position-relative"&gt;
    &lt;div class="deco-box position-absolute top-0 start-0"&gt;&lt;/div&gt;
    &lt;div class="deco-box position-absolute bottom-0 end-0"&gt;&lt;/div&gt;
    &lt;div class="position-absolute bg-cover bg-attachment-fixed" style="top: 30px; left: 30px; right: 30px; bottom: 30px; background-image: url(https://images.unsplash.com/photo-1501002138038-06806ed23bce?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80)"&gt;&lt;/div&gt;
    &lt;div class="position-absolute top-50 start-50 translate-middle text-center text-success"&gt;
      &lt;h1 class="display-1 fw-bold"&gt;背包客&lt;/h1&gt;
      &lt;hr class="mb-1 mx-n3"&gt;
      &lt;h2&gt;Backpacker&lt;/h2&gt;
      &lt;p&gt;在對的道路上迷失是件多麼美好的事情。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- 個人簡歷: Header 首圖製作 end --&gt;

  &lt;!-- 個人簡歷: 自我介紹區塊 start --&gt;
  &lt;div class="container py-5"&gt;
    &lt;div class="row gy-3 justify-content-center flex-md-row-reverse"&gt;
      &lt;div class="col-md-4"&gt;
        &lt;img src="https://images.unsplash.com/photo-1509467283235-ad1568d50691?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="w-100 object-fit-cover" height="500" alt=""&gt;
      &lt;/div&gt;
      &lt;div class="col-md-5 d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2 class="display-4"&gt;我的旅遊類型：&lt;/h2&gt;
          &lt;p&gt;背包客（英語：backpacker，衍生自backpacking一詞），就是背著背包做長途自助旅行的人，被稱呼為背包客的旅行者往往是在有限的預算下進行旅行活動，所以他們對於旅行的規劃、景點的獨到之處也常有自成一派的見解。&lt;/p&gt;
          &lt;p&gt;在旅遊界裡，擁有豐富經驗的背包客往往相當受人關注，此外，目前背包客也能泛指登山、露營、冒險活動的戶外活動參與者。類似旅遊形式還有沙發客，以低預算甚至免費的形式進行旅遊。&lt;/p&gt;
          &lt;a href="#" class="btn btn-outline-primary mt-4 w-100"&gt;
            看更多我的旅遊類型
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- 個人簡歷: 自我介紹區塊 end --&gt;

  &lt;!-- 個人簡歷: 三欄式卡片運用 start --&gt;
  &lt;div class="bg-light py-5 m-md-5"&gt;
    &lt;div class="container"&gt;
      &lt;h2 class="display-4 text-center mb-4"&gt;
        我的旅遊景點：
      &lt;/h2&gt;
      &lt;div class="row row-cols-1 row-cols-lg-3 g-4"&gt;
        &lt;div class="col"&gt;
          &lt;div class="card bg-dark text-white"&gt;
            &lt;img src="..." class="card-img" alt="..."&gt;
            &lt;div class="card-img-overlay"&gt;
              &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
              &lt;p class="card-text"&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;
              &lt;p class="card-text"&gt;Last updated 3 mins ago&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card bg-dark text-white"&gt;
            &lt;img src="..." class="card-img" alt="..."&gt;
            &lt;div class="card-img-overlay"&gt;
              &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
              &lt;p class="card-text"&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;
              &lt;p class="card-text"&gt;Last updated 3 mins ago&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card bg-dark text-white"&gt;
            &lt;img src="..." class="card-img" alt="..."&gt;
            &lt;div class="card-img-overlay"&gt;
              &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
              &lt;p class="card-text"&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;
              &lt;p class="card-text"&gt;Last updated 3 mins ago&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- 個人簡歷: 三欄式卡片運用 end --&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>個人簡歷：卡片樣式調整</h3>



<pre class="wp-block-code"><code>// index.html - 卡片樣式調整

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;個人簡歷-Sass開發&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;style&gt;
    .bg-cover {
      background-size: cover;
      background-position: center center;
      background-repeat: no-repeat;
    }
    .bg-attachment-fixed {
      background-attachment: fixed;
    }
    .bg-dark-gradient {
      /* linear-gradient(方向性, 色彩); */
      background-image: linear-gradient(180deg, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.8));
    }
    .object-fit-cover {
      object-fit: cover;
    }
    .deco-box {
      height: 240px;
      width: 240px;
      background-color: var(--bs-secondary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;!-- 個人簡歷: Header 首圖製作 start --&gt;
  &lt;header class="min-vh-100 position-relative"&gt;
    &lt;div class="deco-box position-absolute top-0 start-0"&gt;&lt;/div&gt;
    &lt;div class="deco-box position-absolute bottom-0 end-0"&gt;&lt;/div&gt;
    &lt;div class="position-absolute bg-cover bg-attachment-fixed" style="top: 30px; left: 30px; right: 30px; bottom: 30px; background-image: url(https://images.unsplash.com/photo-1501002138038-06806ed23bce?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80)"&gt;&lt;/div&gt;
    &lt;div class="position-absolute top-50 start-50 translate-middle text-center text-success"&gt;
      &lt;h1 class="display-1 fw-bold"&gt;背包客&lt;/h1&gt;
      &lt;hr class="mb-1 mx-n3"&gt;
      &lt;h2&gt;Backpacker&lt;/h2&gt;
      &lt;p&gt;在對的道路上迷失是件多麼美好的事情。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- 個人簡歷: Header 首圖製作 end --&gt;

  &lt;!-- 個人簡歷: 自我介紹區塊 start --&gt;
  &lt;div class="container py-5"&gt;
    &lt;div class="row gy-3 justify-content-center flex-md-row-reverse"&gt;
      &lt;div class="col-md-4"&gt;
        &lt;img src="https://images.unsplash.com/photo-1509467283235-ad1568d50691?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="w-100 object-fit-cover" height="500" alt=""&gt;
      &lt;/div&gt;
      &lt;div class="col-md-5 d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2 class="display-4"&gt;我的旅遊類型：&lt;/h2&gt;
          &lt;p&gt;背包客（英語：backpacker，衍生自backpacking一詞），就是背著背包做長途自助旅行的人，被稱呼為背包客的旅行者往往是在有限的預算下進行旅行活動，所以他們對於旅行的規劃、景點的獨到之處也常有自成一派的見解。&lt;/p&gt;
          &lt;p&gt;在旅遊界裡，擁有豐富經驗的背包客往往相當受人關注，此外，目前背包客也能泛指登山、露營、冒險活動的戶外活動參與者。類似旅遊形式還有沙發客，以低預算甚至免費的形式進行旅遊。&lt;/p&gt;
          &lt;a href="#" class="btn btn-outline-primary mt-4 w-100"&gt;
            看更多我的旅遊類型
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- 個人簡歷: 自我介紹區塊 end --&gt;

  &lt;!-- 個人簡歷: 三欄式卡片運用 start --&gt;
  &lt;!-- 個人簡歷: 卡片樣式調整 start --&gt;
  &lt;div class="bg-light p-md-5 py-5 m-md-5"&gt;
    &lt;div class="container"&gt;
      &lt;h2 class="display-4 text-center mb-4"&gt;
        我的旅遊景點：
      &lt;/h2&gt;
      &lt;div class="row row-cols-1 row-cols-lg-3 g-4"&gt;
        &lt;div class="col"&gt;
          &lt;div class="card text-white border-5 h-100"&gt;
            &lt;img src="https://images.unsplash.com/photo-1534570122623-99e8378a9aa7?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="card-img h-100 object-fit-cover" alt="..."&gt;
            &lt;div class="card-img-overlay top-auto bg-dark-gradient"&gt;
              &lt;h5 class="card-title"&gt;在海邊與大海近距離接觸&lt;/h5&gt;
              &lt;p class="card-text"&gt;在海邊可以望向大海，藉由海浪的聲音消除心中的壓力，在此刻我們與大海在此刻像是彼此訴說的朋友。&lt;/p&gt;
              &lt;a href="#" class="btn btn-outline-light stretched-link w-100"&gt;看內容&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card text-white border-5 h-100"&gt;
            &lt;img src="https://images.unsplash.com/photo-1553808354-cda09bba39dc?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="card-img h-100 object-fit-cover" alt="..."&gt;
            &lt;div class="card-img-overlay top-auto bg-dark-gradient"&gt;
              &lt;h5 class="card-title"&gt;在山中生活與草木相伴&lt;/h5&gt;
              &lt;p class="card-text"&gt;在山中可以望向高山，藉由山中的慢步調與自然景觀，我們可以在此與草木相伴，就像有朋友靜靜地陪伴一樣。&lt;/p&gt;
              &lt;a href="#" class="btn btn-outline-light stretched-link w-100"&gt;看內容&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card text-white border-5 h-100"&gt;
            &lt;img src="https://images.unsplash.com/photo-1598920710727-e6c74781538c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="card-img h-100 object-fit-cover" alt="..."&gt;
            &lt;div class="card-img-overlay top-auto bg-dark-gradient"&gt;
              &lt;h5 class="card-title"&gt;向陽下的向日葵花海&lt;/h5&gt;
              &lt;p class="card-text"&gt;在好天氣下的向日葵花海，周圍花香環繞，我們可以聞著花香、看著一望無際的花海，讓我們身心上的心靈再次滋養。&lt;/p&gt;
              &lt;a href="#" class="btn btn-outline-light stretched-link w-100"&gt;看內容&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- 個人簡歷: 卡片樣式調整 end --&gt;
  &lt;!-- 個人簡歷: 三欄式卡片運用 end --&gt;
  

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss - 新增 $position-values 的 auto 樣式

// Position
//
// Define the edge positioning anchors of the position utilities.

// scss-docs-start position-map
$position-values: (
  0: 0,
  50: 50%,
  100: 100%,
  auto: auto
) !default;
// scss-docs-end position-map</code></pre>



<h3>個人簡歷：Footer 製作及表單驗證樣式調整</h3>



<pre class="wp-block-code"><code>// index.html - 個人簡歷: Footer 製作及表單驗證樣式調整

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;個人簡歷-Sass開發&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
  &lt;style&gt;
    .bg-cover {
      background-size: cover;
      background-position: center center;
      background-repeat: no-repeat;
    }
    .bg-attachment-fixed {
      background-attachment: fixed;
    }
    .bg-dark-gradient {
      /* linear-gradient(方向性, 色彩); */
      background-image: linear-gradient(180deg, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.8));
    }
    .object-fit-cover {
      object-fit: cover;
    }
    .deco-box {
      height: 240px;
      width: 240px;
      background-color: var(--bs-secondary);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;!-- 個人簡歷: Header 首圖製作 start --&gt;
  &lt;header class="min-vh-100 position-relative"&gt;
    &lt;div class="deco-box position-absolute top-0 start-0"&gt;&lt;/div&gt;
    &lt;div class="deco-box position-absolute bottom-0 end-0"&gt;&lt;/div&gt;
    &lt;div class="position-absolute bg-cover bg-attachment-fixed" style="top: 30px; left: 30px; right: 30px; bottom: 30px; background-image: url(https://images.unsplash.com/photo-1501002138038-06806ed23bce?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80)"&gt;&lt;/div&gt;
    &lt;div class="position-absolute top-50 start-50 translate-middle text-center text-success"&gt;
      &lt;h1 class="display-1 fw-bold"&gt;背包客&lt;/h1&gt;
      &lt;hr class="mb-1 mx-n3"&gt;
      &lt;h2&gt;Backpacker&lt;/h2&gt;
      &lt;p&gt;在對的道路上迷失是件多麼美好的事情。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- 個人簡歷: Header 首圖製作 end --&gt;

  &lt;!-- 個人簡歷: 自我介紹區塊 start --&gt;
  &lt;div class="container py-5"&gt;
    &lt;div class="row gy-3 justify-content-center flex-md-row-reverse"&gt;
      &lt;div class="col-md-4"&gt;
        &lt;img src="https://images.unsplash.com/photo-1509467283235-ad1568d50691?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="w-100 object-fit-cover" height="500" alt=""&gt;
      &lt;/div&gt;
      &lt;div class="col-md-5 d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2 class="display-4"&gt;我的旅遊類型：&lt;/h2&gt;
          &lt;p&gt;背包客（英語：backpacker，衍生自backpacking一詞），就是背著背包做長途自助旅行的人，被稱呼為背包客的旅行者往往是在有限的預算下進行旅行活動，所以他們對於旅行的規劃、景點的獨到之處也常有自成一派的見解。&lt;/p&gt;
          &lt;p&gt;在旅遊界裡，擁有豐富經驗的背包客往往相當受人關注，此外，目前背包客也能泛指登山、露營、冒險活動的戶外活動參與者。類似旅遊形式還有沙發客，以低預算甚至免費的形式進行旅遊。&lt;/p&gt;
          &lt;a href="#" class="btn btn-outline-primary mt-4 w-100"&gt;
            看更多我的旅遊類型
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- 個人簡歷: 自我介紹區塊 end --&gt;

  &lt;!-- 個人簡歷: 三欄式卡片運用 start --&gt;
  &lt;!-- 個人簡歷: 卡片樣式調整 start --&gt;
  &lt;div class="bg-light p-md-5 py-5 m-md-5"&gt;
    &lt;div class="container"&gt;
      &lt;h2 class="display-4 text-center mb-4"&gt;
        我的旅遊景點：
      &lt;/h2&gt;
      &lt;div class="row row-cols-1 row-cols-lg-3 g-4"&gt;
        &lt;div class="col"&gt;
          &lt;div class="card text-white border-5 h-100"&gt;
            &lt;img src="https://images.unsplash.com/photo-1534570122623-99e8378a9aa7?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="card-img h-100 object-fit-cover" alt="..."&gt;
            &lt;div class="card-img-overlay top-auto bg-dark-gradient"&gt;
              &lt;h5 class="card-title"&gt;在海邊與大海近距離接觸&lt;/h5&gt;
              &lt;p class="card-text"&gt;在海邊可以望向大海，藉由海浪的聲音消除心中的壓力，在此刻我們與大海在此刻像是彼此訴說的朋友。&lt;/p&gt;
              &lt;a href="#" class="btn btn-outline-light stretched-link w-100"&gt;看內容&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card text-white border-5 h-100"&gt;
            &lt;img src="https://images.unsplash.com/photo-1553808354-cda09bba39dc?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="card-img h-100 object-fit-cover" alt="..."&gt;
            &lt;div class="card-img-overlay top-auto bg-dark-gradient"&gt;
              &lt;h5 class="card-title"&gt;在山中生活與草木相伴&lt;/h5&gt;
              &lt;p class="card-text"&gt;在山中可以望向高山，藉由山中的慢步調與自然景觀，我們可以在此與草木相伴，就像有朋友靜靜地陪伴一樣。&lt;/p&gt;
              &lt;a href="#" class="btn btn-outline-light stretched-link w-100"&gt;看內容&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card text-white border-5 h-100"&gt;
            &lt;img src="https://images.unsplash.com/photo-1598920710727-e6c74781538c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80" class="card-img h-100 object-fit-cover" alt="..."&gt;
            &lt;div class="card-img-overlay top-auto bg-dark-gradient"&gt;
              &lt;h5 class="card-title"&gt;向陽下的向日葵花海&lt;/h5&gt;
              &lt;p class="card-text"&gt;在好天氣下的向日葵花海，周圍花香環繞，我們可以聞著花香、看著一望無際的花海，讓我們身心上的心靈再次滋養。&lt;/p&gt;
              &lt;a href="#" class="btn btn-outline-light stretched-link w-100"&gt;看內容&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- 個人簡歷: 卡片樣式調整 end --&gt;
  &lt;!-- 個人簡歷: 三欄式卡片運用 end --&gt;

  &lt;!-- 個人簡歷: Footer 製作及表單驗證樣式調整 start --&gt;
  &lt;footer class="bg-primary p-5 text-white"&gt;
    &lt;div class="container"&gt;
      &lt;h2 class="display-4 text-center"&gt;做個背包客吧：&lt;/h2&gt;
      &lt;div class="row justify-content-center"&gt;
        &lt;div class="col-md-5"&gt;
          &lt;p&gt;有共同的興趣將能搭起友誼的橋樑&lt;/p&gt;
          &lt;h3 class="h4"&gt;聯絡方式&lt;/h3&gt;
          &lt;ul class="list-unstyled"&gt;
            &lt;li&gt;&lt;i class="bi bi-envelope"&gt;&lt;/i&gt; backpacker@email.com&lt;/li&gt;
            &lt;li&gt;&lt;i class="bi bi-telephone"&gt;&lt;/i&gt; 0989-123-456&lt;/li&gt;
          &lt;/ul&gt;
          &lt;h3 class="h4 mt-5"&gt;社群關注&lt;/h3&gt;
          &lt;ul class="list-unstyled"&gt;
            &lt;li&gt;&lt;i class="bi bi-instagram"&gt;&lt;/i&gt; backpacker&lt;/li&gt;
            &lt;li&gt;&lt;i class="bi bi-facebook"&gt;&lt;/i&gt; fb.me/backpacker&lt;/li&gt;
            &lt;li&gt;&lt;i class="bi bi-twitter"&gt;&lt;/i&gt; backpacker&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;&amp;copy; 2022 by Backpacker. Created with Bootstrap 5.&lt;/p&gt;
          &lt;p&gt;Code by Gee Hsu.&lt;/p&gt;
        &lt;/div&gt;
        &lt;form class="col-md-5 needs-validation" novalidate&gt;
          &lt;div class="row g-2"&gt;
            &lt;div class="col-md-6"&gt;
              &lt;label for="validationServer01" class="form-label"&gt;姓氏 *&lt;/label&gt;
              &lt;input type="text" class="form-control" id="validationServer01" placeholder="背" required&gt;
              &lt;div class="valid-feedback"&gt;
                Looks good!
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="col-md-6"&gt;
              &lt;label for="validationServer02" class="form-label"&gt;名 *&lt;/label&gt;
              &lt;input type="text" class="form-control" id="validationServer02" placeholder="包客" required&gt;
              &lt;div class="valid-feedback"&gt;
                Looks good!
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="mb-3 col-12"&gt;
              &lt;label for="exampleFormControlInput1" class="form-label"&gt;Email *&lt;/label&gt;
              &lt;input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com" required&gt;
              &lt;div class="invalid-feedback"&gt;
                請輸入 Email，拜託
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="mb-3 col-12"&gt;
              &lt;label for="exampleFormControlTextarea1" class="form-label"&gt;留些訊息給我吧 *&lt;/label&gt;
              &lt;textarea class="form-control" id="exampleFormControlTextarea1" rows="3" required&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="text-end col-12"&gt;
              &lt;button class="btn btn-outline-light" type="submit"&gt;送出表單&lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/footer&gt;
  &lt;!-- 個人簡歷: Footer 製作及表單驗證樣式調整 end --&gt;
  

  &lt;script&gt;
    // 表單驗證
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
      'use strict'

      // Fetch all the forms we want to apply custom Bootstrap validation styles to
      var forms = document.querySelectorAll('.needs-validation')

      // Loop over them and prevent submission
      Array.prototype.slice.call(forms)
        .forEach(function (form) {
          form.addEventListener('submit', function (event) {
            if (!form.checkValidity()) {
              event.preventDefault()
              event.stopPropagation()
            }

            form.classList.add('was-validated')
          }, false)
        })
    })()
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss
// 修改驗證顏色方式一
// scss-docs-start theme-color-variables
$primary:       #9b5d42; // $blue !default;
$secondary:     #2a2e22;  // $gray-600 !default;
$success:       #00ff89; // $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-900 !default;
// scss-docs-end theme-color-variables

// 修改驗證顏色方式二
// Form validation

// scss-docs-start form-feedback-variables
$form-feedback-margin-top:          $form-text-margin-top !default;
$form-feedback-font-size:           $form-text-font-size !default;
$form-feedback-font-style:          $form-text-font-style !default;
$form-feedback-valid-color:         $success !default;
$form-feedback-invalid-color:       #f1aeb5; // $danger !default;

$form-feedback-icon-valid-color:    $form-feedback-valid-color !default;
$form-feedback-icon-valid:          url("data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'&gt;&lt;path fill='#{$form-feedback-icon-valid-color}' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/&gt;&lt;/svg&gt;") !default;
$form-feedback-icon-invalid-color:  $form-feedback-invalid-color !default;
$form-feedback-icon-invalid:        url("data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='#{$form-feedback-icon-invalid-color}'&gt;&lt;circle cx='6' cy='6' r='4.5'/&gt;&lt;path stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/&gt;&lt;circle cx='6' cy='8.2' r='.6' fill='#{$form-feedback-icon-invalid-color}' stroke='none'/&gt;&lt;/svg&gt;") !default;
// scss-docs-end form-feedback-variables</code></pre>



<ul><li><a href="https://icons.getbootstrap.com/" target="_blank" rel="noreferrer noopener">Bootstrap Icons</a></li><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/forms/validation/#server-side" target="_blank">表單 &gt; 驗證 &gt; 伺服器端</a></li><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/forms/form-control/" target="_blank">表單 &gt; 表單控制</a></li><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/forms/validation/" target="_blank">表單 &gt; 驗證</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">個人簡歷：整理 Sass 專案檔案</h3>



<h4>操作步驟</h4>



<ol><li>在 stylesheets 資料夾建立 components 資料夾，並在 components 資料夾新增 _deco-box.scss 檔案，從 helpers/_variables.scss 檔案把 $secondary 變數貼到 _deco-box.scss 的 background-color 地方</li><li>在 all.scss 把 _deco-box.scss 檔案引入進來</li><li>把可以定義成 utilities 的樣式從 index.html &lt;style&gt; 給抽離出來，建議所抽離的是比較單純的樣式，通常自己客製化的會加在最下面，像是在這邊的 .bg-attachment-fixed 這個就可以把它加到我們的 helpers/_utilities.scss 檔案裡面來</li><li>打開 helpers/_utilities.scss 檔案，自定義的設定會放在最後面的地方，這裡可以加入我們自己的 utilities，可以先加上 custom 的註解，然後接下來我們就把相關的自定義樣式給建立起來。首先建立的第一個是我們的 .bg-attachment-fixed 這一個，把 bg-attachment 這個名稱先放在這個前面，然後加入一個大括號，加入大括號之後我們要定義的屬性 property，我們要使用的屬性會是 background-attachment 的這個屬性，那我們就把這個屬性給貼過來，貼過來之後我們會再補一個逗號。目前來說這有一個問題應該是用小括號而不是大括號，因為寫 JS 的話是使用一個花括號，但在這個地方必需使用小括號。那要注意如果你這邊畫面上如果出現像這樣有個紅色的一個提示，代表我們撰寫有錯誤，目前來說這邊要使用逗號，然後我們在前面的 “visibility” 後面這邊括號後面還要補上一個逗號，這樣才是正確的。這邊我們使用的 class name 是 bg-attachment 的，那我們就把這個 bg-attachment 也把它貼過來，這是我們要用的 class name。在後面可以撰寫相對應的一些樣式，那麼所適用的樣式目前只有使用 fixed，那麼我們可以先加入 fixed 就好，那這樣的話我們就會把這樣式加入到 utilities 統一進行管理。</li><li>那我們再把另外一個樣式也把它給加進來，另外一個樣式就是 object-fit 這個樣式，我們使用相同的方式把它給貼過來，然後它所套用的屬性則是另外一個屬性 object-fit，那我們把它貼過來，那它所套用的值則是 cover。如果說你有其他的值，像是 contain 或者是其他的 object-fit 會用到的值，也都可以加到 values 裡面。存檔之後就可以把在 &lt;style&gt; 裡面的 .object-fit-cover、.bg-attachment-fixed 給移除，存檔之後回到畫面上可以得到一個相同的結果。我們可以看到畫面上的底圖它一樣是固定在原位，就算我們把 &lt;style&gt; 的樣式清除掉。</li><li>接下來再畫面上還有一個 .bg-cover、以及 .bg-dark-gradient 這兩個就不一定適合放到 utilities 裡面，那這個時候該怎麼做，會比較建議在 components 資料夾再新增一個 _utilities.scss 檔案，這個檔案就放剩餘不知道該怎麼做管理的單獨樣式，就可以放在這個檔案裡面。如果太多的話，建議稍作整理，然後把它抽離出來。這邊就把剩餘的一些樣式把它給放過來，一樣把 &lt;style&gt; 清空之後存檔。當然我們把它獨立成一個檔案之後，我們一樣回到 all.scss 必需把它匯入進來才可以做運作，我們一樣使用 @import 的方式把剛剛剩餘的 utilities 給匯入進來，存檔之後等到它編譯完成，在畫面上就可以看到這些樣式</li></ol>



<pre class="wp-block-code"><code>// stylesheets/components/_deco-box.scss

.deco-box {
      height: 240px;
      width: 240px;
      background-color: $secondary;
    }</code></pre>



<pre class="wp-block-code"><code>// all.scss - 2

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "./helpers/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";

@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";

// components
@import "./components/deco-box";</code></pre>



<pre class="wp-block-code"><code>// helpers/_utilities.scss

// custom
    "bg-attachment": (
      property: background-attachment,
      class: "bg-attachment",
      values: fixed
    ),
    "object-fit": (
      property: object-fit,
      class: "object-fit",
      values: cover
    )</code></pre>



<pre class="wp-block-code"><code>// components/_utilities.scss

.bg-cover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}
.bg-dark-gradient {
  /* linear-gradient(方向性, 色彩); */
  background-image: linear-gradient(180deg, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.8));
}</code></pre>



<pre class="wp-block-code"><code>// all.scss

// components
@import "./components/deco-box";
@import "./components/utilities";</code></pre>



<h3>個人簡歷：範例作業下載</h3>



<p>注意：</p>



<ul><li>此檔案僅用來參考，請勿複製程式碼</li></ul>



<h2 class="has-background" style="background-color:#ff6663">CH13 – 後台管理 – 功能性為導向的介面規劃</h2>



<h3>後台管理：章節說明</h3>



<h4>操作步驟</h4>



<ol><li>使用 npm init 建立 package.json 檔案</li><li>使用 npm 安裝 Bootstrap，npm install bootstrap</li><li>建立 stylesheets 資料夾，在裡面建立 components、helpers 資料夾</li><li>從 node_modules &gt; bootstrap &gt; scss 裡面的 _variables.scss、_utilities.scss 複製到 helpers 資料夾裡面</li><li>使用 Watch Sass 從 scss 檔案編譯成 css 檔案</li><li>建立 index.html 把 all.css、bootstrap icons cdn 載入</li><li>建立 .gitignore 檔案</li></ol>



<pre class="wp-block-code"><code>// all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "./helpers/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// .gitignore

.DS_Store
node_modules
/dist


# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</code></pre>



<h3>後台管理：結構規劃</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end"&gt;

    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// components/_sidebar.scss

$sidebar-width: 280px;

.sidebar {
  width: $sidebar-width;
}
.main {
  width: calc(100vw - #{$sidebar-width});
  // 變數視為一個字串
}</code></pre>



<pre class="wp-block-code"><code>// all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "./helpers/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";


// components
@import "./components/sidebar";</code></pre>



<h3 class="has-background" style="background-color:#ff6663">後台管理：可收合的側欄選單</h3>



<p>算是這個章節比較複雜的部份。</p>



<h4>製作內容說明</h4>



<ol><li>製作行動版、桌面版的差異</li><li>選單收合</li><li>套用 JS</li></ol>



<pre class="wp-block-code"><code>// components/_sidebar.scss

$sidebar-width: 280px;

// 行動版 (預設)
.sidebar {
  width: $sidebar-width;
  margin-left: -$sidebar-width;
  transition: margin-left .25s;
}
.main {
  width: 100%;
}

// 展開 sidebar
.sidebar-toggled {
  .sidebar {
    margin-left: 0;
  }
}


// 桌面版(up)
@include media-breakpoint-up(lg) {
  .sidebar {
    margin-left: 0;
    width: $sidebar-width;
  }
  .main {
    width: calc(100vw - #{$sidebar-width});
    // 變數視為一個字串
  }

  // 展開
  .sidebar-toggled {
    .sidebar {
      margin-left: -$sidebar-width;
    }
    .main {
      width: 100%;
      margin-left: 0;
    }
  }
}</code></pre>



<pre class="wp-block-code"><code>// javascripts/all.js

const toggleMenuBtn = document.querySelector('#toggle-btn');
const body = document.querySelector('body');
toggleMenuBtn.addEventListener('click', (evt) =&gt; {
  // console.log(evt);
  evt.preventDefault();
  body.classList.toggle('sidebar-toggled');
});</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end"&gt;

    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/layout/breakpoints/#media-queries" target="_blank" rel="noreferrer noopener">排版 &gt; 斷點 (Breakpoints) &gt; Media queries</a></li></ul>



<h3>後台管理：側欄選單內容</h3>



<p>側欄選單內容的程式碼：</p>



<pre class="wp-block-code"><code>// CSS

.sidebar {
 .sidebar-link {
  color: $dark;
  display: block;
  text-decoration: none;
  padding-top: 0.875rem;
  padding-bottom: 0.875rem;
  &amp;:hover {
   background-color: rgba($primary, 0.16);
  }
 }
 .sidebar-link.active {
  position: relative;
  color: $primary !important;
  background-color: rgba($primary, 0.16);
  &amp;::after {
   content: "";
   position: absolute;
   top: 0;
   left: 2px;
   height: 100%;
   width: 3px;
   background: $primary;
  }
 }
}</code></pre>



<pre class="wp-block-code"><code>// stylesheets/components/_sidebar.scss

$sidebar-width: 280px;

// 行動版 (預設)
.sidebar {
  width: $sidebar-width;
  margin-left: -$sidebar-width;
  transition: margin-left .25s;
  // sidebar-link
  .sidebar-link {
    color: $dark;
    display: block;
    text-decoration: none;
    padding-top: 0.875rem;
    padding-bottom: 0.875rem;
    &amp;:hover {
      background-color: rgba($primary, 0.16);
    }
  }
  .sidebar-link.active {
    position: relative;
    color: $primary !important;
    background-color: rgba($primary, 0.16);
    &amp;::after {
      content: "";
      position: absolute;
      top: 0;
      left: 2px;
      height: 100%;
      width: 3px;
      background: $primary;
    }
  }
}
.main {
  width: 100%;
}

// 展開 sidebar
.sidebar-toggled {
  .sidebar {
    margin-left: 0;
  }
}


// 桌面版(up)
@include media-breakpoint-up(lg) {
  .sidebar {
    margin-left: 0;
    width: $sidebar-width;
  }
  .main {
    width: calc(100vw - #{$sidebar-width});
    // 變數視為一個字串
  }

  // 展開
  .sidebar-toggled {
    .sidebar {
      margin-left: -$sidebar-width;
    }
    .main {
      width: 100%;
      margin-left: 0;
    }
  }
}</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss

// scss-docs-start theme-color-variables
$primary:       #973aa8; // $blue !default;
$secondary:     $gray-600 !default;
$success:       $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-900 !default;
// scss-docs-end theme-color-variables</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/collapse/" target="_blank" rel="noreferrer noopener">元件 &gt; 摺疊</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">後台管理：版型整理</h3>



<p>側欄和導覽列每個頁面是共用的，在實戰中會使用後端的 Template language 製作，前端方式會用 Vue, React 來製作。<br><br>以這堂課程來說不會介紹這些技術，那如何管理這些共用的版型，會比較建議目前製作的部分 index.html 改名為 layout.html 檔案。<br><br>接下來如果你要調整外面的版型都從 layout.html 去做調整，到時候再覆蓋到原始的檔案，就比較不會出錯。</p>



<pre class="wp-block-code"><code>// layout.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// stylesheets/components/_sidebar.scss

$sidebar-width: 280px;

// 行動版 (預設)
.sidebar {
  width: $sidebar-width;
  margin-left: -$sidebar-width;
  transition: margin-left .25s;
  position: fixed;
  top: 0;
  // sidebar-link
  .sidebar-link {
    color: $dark;
    display: block;
    text-decoration: none;
    padding-top: 0.875rem;
    padding-bottom: 0.875rem;
    &amp;:hover {
      background-color: rgba($primary, 0.16);
    }
  }
  .sidebar-link.active {
    position: relative;
    color: $primary !important;
    background-color: rgba($primary, 0.16);
    &amp;::after {
      content: "";
      position: absolute;
      top: 0;
      left: 2px;
      height: 100%;
      width: 3px;
      background: $primary;
    }
  }
}
.main {
  width: 100%;
}

// 展開 sidebar
.sidebar-toggled {
  .sidebar {
    margin-left: 0;
  }
  .main {
    margin-left: $sidebar-width;
  }
}


// 桌面版(up)
@include media-breakpoint-up(lg) {
  .sidebar {
    margin-left: 0;
    width: $sidebar-width;
  }
  .main {
    width: calc(100vw - #{$sidebar-width});
    margin-left: $sidebar-width;
    transition: margin-left .25s;
    // 變數視為一個字串
  }

  // 展開
  .sidebar-toggled {
    .sidebar {
      margin-left: -$sidebar-width;
    }
    .main {
      width: 100%;
      margin-left: 0;
    }
  }
}</code></pre>



<h3 class="has-background" style="background-color:#ff6663">後台管理：常見卡片區塊結構</h3>



<pre class="wp-block-code"><code>// layout.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// home.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;div class="row g-4 row-cols-lg-3 mb-4"&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;在線人數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;
                  3,996
                &lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;訂單數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;1,022&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;營業額&lt;/h2&gt;
                &lt;p class="mb-0 text-success"&gt;&lt;span class="fs-3"&gt;NT$&lt;/span&gt;&lt;span class="display-4"&gt;120,500&lt;/span&gt;&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="row g-4"&gt;
          &lt;div class="col-lg-4"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="pie-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="bar-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/chart.js"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss

// scss-docs-start border-radius-variables
$border-radius:               .25rem !default;
$border-radius-sm:            .2rem !default;
$border-radius-lg:            .75rem; // .3rem !default;
$border-radius-pill:          50rem !default;
// scss-docs-end border-radius-variables

// Cards

// scss-docs-start card-variables
$card-spacer-y:                     $spacer !default;
$card-spacer-x:                     $spacer !default;
$card-title-spacer-y:               $spacer * .5 !default;
$card-border-width:                 $border-width !default;
$card-border-color:                 rgba($black, .125) !default;
$card-border-radius:                $border-radius-lg; // $border-radius !default;
$card-box-shadow:                   null !default;
$card-inner-border-radius:          subtract($card-border-radius, $card-border-width) !default;
$card-cap-padding-y:                $card-spacer-y * .5 !default;
$card-cap-padding-x:                $card-spacer-x !default;
$card-cap-bg:                       rgba($black, .03) !default;
$card-cap-color:                    null !default;
$card-height:                       null !default;
$card-color:                        null !default;
$card-bg:                           $white !default;
$card-img-overlay-padding:          $spacer !default;
$card-group-margin:                 $grid-gutter-width * .5 !default;
// scss-docs-end card-variables</code></pre>



<pre class="wp-block-code"><code>// javascripts/all.js

const toggleMenuBtn = document.querySelector('#toggle-btn');
const body = document.querySelector('body');
toggleMenuBtn.addEventListener('click', (evt) =&gt; {
  // console.log(evt);
  evt.preventDefault();
  body.classList.toggle('sidebar-toggled');
});

// 動態圖表
(() =&gt; {
  const chartColors = {
    red: 'rgb(255, 99, 132)',
    orange: 'rgb(255, 159, 64)',
    yellow: 'rgb(255, 205, 86)',
    green: 'rgb(75, 192, 192)',
    blue: 'rgb(54, 162, 235)',
    purple: 'rgb(153, 102, 255)',
    grey: 'rgb(201, 203, 207)'
  };
  var randomScalingFactor = function () {
    return Math.round(Math.random() * 2000000);
  };

  const pieCtx = document.getElementById('pie-chart').getContext('2d');
  const barCtx = document.getElementById('bar-chart').getContext('2d');

  const config = {
    type: 'pie',
    data: {
      datasets: &#91;{
        data: &#91;
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
        ],
        backgroundColor: &#91;
          chartColors.red,
          chartColors.orange,
          chartColors.yellow,
          chartColors.green,
          chartColors.blue,
        ],
        label: 'Dataset 1'
      }],
      labels: &#91;
        '餅乾類',
        '飲料類',
        '熟食類',
        '生鮮類',
        '糖果類',
      ]
    },
    options: {
      responsive: true
    }
  };
  const barConfig = {
    type: 'bar',
    data: {
      datasets: &#91;{
        data: &#91;
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
        ],
        backgroundColor: &#91;
          chartColors.red,
          chartColors.orange,
          chartColors.yellow,
          chartColors.green,
          chartColors.blue,
          chartColors.purple,
        ],
        label: '單月營業額'
      }],
      labels: &#91;
        '一月',
        '二月',
        '三月',
        '四月',
        '五月',
        '六月',
      ]
    },
    options: {
      responsive: true
    }
  };
  const pieChart = new Chart(pieCtx, config);
  const barChart = new Chart(barCtx, barConfig);
})();</code></pre>



<h3>後台管理：動態圖表範例程式碼</h3>



<h4>動態圖表範例程式碼</h4>



<pre class="wp-block-code"><code>&lt;script src="https://cdn.jsdelivr.net/npm/chart.js"&gt;&lt;/script&gt;
&lt;script&gt;
  (() =&gt; {
    const chartColors = {
      red: 'rgb(255, 99, 132)',
      orange: 'rgb(255, 159, 64)',
      yellow: 'rgb(255, 205, 86)',
      green: 'rgb(75, 192, 192)',
      blue: 'rgb(54, 162, 235)',
      purple: 'rgb(153, 102, 255)',
      grey: 'rgb(201, 203, 207)'
    };
    var randomScalingFactor = function () {
      return Math.round(Math.random() * 2000000);
    };

    const pieCtx = document.getElementById('pie-chart').getContext('2d');
    const barCtx = document.getElementById('bar-chart').getContext('2d');

    const config = {
      type: 'pie',
      data: {
        datasets: &#91;{
          data: &#91;
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
          ],
          backgroundColor: &#91;
            chartColors.red,
            chartColors.orange,
            chartColors.yellow,
            chartColors.green,
            chartColors.blue,
          ],
          label: 'Dataset 1'
        }],
        labels: &#91;
          '大麥克全餐',
          '肥宅快樂水',
          '太爽啦義大利麵',
          '薯條加大吃不完',
          '兒童餐椅不給坐',
        ]
      },
      options: {
        responsive: true
      }
    };
    const barConfig = {
      type: 'bar',
      data: {
        datasets: &#91;{
          data: &#91;
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
          ],
          backgroundColor: &#91;
            chartColors.red,
            chartColors.orange,
            chartColors.yellow,
            chartColors.green,
            chartColors.blue,
            chartColors.purple,
          ],
          label: 'Dataset 1'
        }],
        labels: &#91;
          '一月',
          '二月',
          '三月',
          '四月',
          '五月',
          '六月',
        ]
      },
      options: {
        responsive: true
      }
    };
    const pieChart = new Chart(pieCtx, config);
    const barChart = new Chart(barCtx, barConfig);
  })();
&lt;/script&gt;</code></pre>



<h3>後台管理：表格運用</h3>



<pre class="wp-block-code"><code>// home.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;div class="row g-4 row-cols-lg-3 mb-4"&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;在線人數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;
                  3,996
                &lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;訂單數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;1,022&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;營業額&lt;/h2&gt;
                &lt;p class="mb-0 text-success"&gt;&lt;span class="fs-3"&gt;NT$&lt;/span&gt;&lt;span class="display-4"&gt;120,500&lt;/span&gt;&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="row g-4"&gt;
          &lt;div class="col-lg-4"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="pie-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="bar-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="card shadow-sm"&gt;
        &lt;div class="card-header bg-transparent"&gt;
          &lt;div class="input-group"&gt;
            &lt;span class="input-group-text border-0 bg-transparent pe-0"&gt;
              &lt;i class="bi bi-search"&gt;&lt;/i&gt;
            &lt;/span&gt;
            &lt;input type="search" class="form-control border-0 shadow-none"&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="card-body p-0"&gt;
          &lt;div class="table-responsive"&gt;
            &lt;table class="table table-hover mb-0"&gt;
              &lt;thead class="bg-light text-nowrap"&gt;
                &lt;tr class="align-middle"&gt;
                  &lt;th scope="col" class="py-3 ps-4"&gt;訂單編號&lt;/th&gt;
                  &lt;th scope="col"&gt;Email&lt;/th&gt;
                  &lt;th scope="col"&gt;顧客姓名&lt;/th&gt;
                  &lt;th scope="col"&gt;購買品項&lt;/th&gt;
                  &lt;th scope="col"&gt;付款狀態&lt;/th&gt;
                  &lt;th scope="col"&gt;購買金額&lt;/th&gt;
                  &lt;th scope="col" class="pe-4"&gt;編輯&lt;/th&gt;
                &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody class="text-nowrap"&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315171601&lt;/td&gt;
                  &lt;td&gt;bear123@email.com&lt;/td&gt;
                  &lt;td&gt;貝小熊&lt;/td&gt;
                  &lt;td&gt;食品專賣店：餅乾類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;600&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315170201&lt;/td&gt;
                  &lt;td&gt;fish123@email.com&lt;/td&gt;
                  &lt;td&gt;溪小魚&lt;/td&gt;
                  &lt;td&gt;食品專賣店：飲料類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;1,200&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315190301&lt;/td&gt;
                  &lt;td&gt;dog123@email.com&lt;/td&gt;
                  &lt;td&gt;毛小熊&lt;/td&gt;
                  &lt;td&gt;食品專賣店：熟食類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;2,200&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="card-footer bg-transparent py-3"&gt;
          &lt;nav aria-label="Page navigation example"&gt;
            &lt;ul class="pagination justify-content-end mb-0"&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Previous&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;1&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;2&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;3&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Next&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/chart.js"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>後台管理：訂單管理介面</h3>



<pre class="wp-block-code"><code>// orders.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="home.html" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="orders.html" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                訂單列表
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                單一訂單細節
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;ul class="nav nav-pills mb-4"&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill active" aria-current="page" href="#"&gt;所有訂單
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;156&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill" href="#"&gt;待處理
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;106&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill" href="#"&gt;已出貨
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;50&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill"&gt;退款
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;2&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;div class="card shadow-sm"&gt;
          &lt;div class="card-header bg-transparent"&gt;
            &lt;div class="input-group"&gt;
              &lt;div class="dropdown"&gt;
                &lt;button class="btn btn-outline-dark dropdown-toggle btn-sm" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                  操作
                &lt;/button&gt;
                &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                  &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;全部選取&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;個別選取&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;其他&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
              &lt;span class="input-group-text border-0 bg-transparent pe-0"&gt;
                &lt;i class="bi bi-search"&gt;&lt;/i&gt;
              &lt;/span&gt;
              &lt;input type="search" class="form-control border-0 shadow-none"&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-body p-0"&gt;
            &lt;div class="table-responsive"&gt;
              &lt;table class="table table-hover mb-0"&gt;
                &lt;thead class="bg-light text-nowrap"&gt;
                  &lt;tr class="align-middle"&gt;
                    &lt;th scope="col" class="ps-4"&gt;&lt;/th&gt;
                    &lt;th scope="col" class="py-3"&gt;訂單編號&lt;/th&gt;
                    &lt;th scope="col"&gt;Email&lt;/th&gt;
                    &lt;th scope="col"&gt;顧客姓名&lt;/th&gt;
                    &lt;th scope="col"&gt;購買品項&lt;/th&gt;
                    &lt;th scope="col"&gt;付款狀態&lt;/th&gt;
                    &lt;th scope="col"&gt;購買金額&lt;/th&gt;
                    &lt;th scope="col" class="pe-4"&gt;編輯&lt;/th&gt;
                  &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody class="text-nowrap"&gt;
                  &lt;tr&gt;
                    &lt;td scope="row" class="ps-4" &gt;
                      &lt;input type="checkbox" class="form-check-input"&gt;
                    &lt;/td&gt;
                    &lt;td&gt;TX20220315171601&lt;/td&gt;
                    &lt;td&gt;bear123@email.com&lt;/td&gt;
                    &lt;td&gt;貝小熊&lt;/td&gt;
                    &lt;td&gt;食品專賣店：餅乾類&lt;/td&gt;
                    &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                    &lt;td class="text-end"&gt;600&lt;/td&gt;
                    &lt;td class="text-end pe-4"&gt;
                      &lt;div class="btn-group"&gt;
                        &lt;a href="#" class="btn btn-sm btn-outline-dark"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                          &lt;button class="btn btn-sm btn-outline-dark dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                            操作
                          &lt;/button&gt;
                          &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;修改狀態&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;刪除訂單&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/div&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                    &lt;td scope="row" class="ps-4" &gt;
                      &lt;input type="checkbox" class="form-check-input"&gt;
                    &lt;/td&gt;
                    &lt;td&gt;TX20220315170201&lt;/td&gt;
                    &lt;td&gt;fish123@email.com&lt;/td&gt;
                    &lt;td&gt;溪小魚&lt;/td&gt;
                    &lt;td&gt;食品專賣店：飲料類&lt;/td&gt;
                    &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                    &lt;td class="text-end"&gt;1,200&lt;/td&gt;
                    &lt;td class="text-end pe-4"&gt;
                      &lt;div class="btn-group"&gt;
                        &lt;a href="#" class="btn btn-sm btn-outline-dark"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                          &lt;button class="btn btn-sm btn-outline-dark dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                            操作
                          &lt;/button&gt;
                          &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;修改狀態&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;刪除訂單&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/div&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                    &lt;td scope="row" class="ps-4" &gt;
                      &lt;input type="checkbox" class="form-check-input"&gt;
                    &lt;/td&gt;
                    &lt;td&gt;TX20220315190301&lt;/td&gt;
                    &lt;td&gt;dog123@email.com&lt;/td&gt;
                    &lt;td&gt;毛小熊&lt;/td&gt;
                    &lt;td&gt;食品專賣店：熟食類&lt;/td&gt;
                    &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                    &lt;td class="text-end"&gt;2,200&lt;/td&gt;
                    &lt;td class="text-end pe-4"&gt;
                      &lt;div class="btn-group"&gt;
                        &lt;a href="#" class="btn btn-sm btn-outline-dark"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                          &lt;button class="btn btn-sm btn-outline-dark dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                            操作
                          &lt;/button&gt;
                          &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;修改狀態&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;刪除訂單&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/div&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/tbody&gt;
              &lt;/table&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer bg-transparent py-3"&gt;
            &lt;nav aria-label="Page navigation example"&gt;
              &lt;ul class="pagination justify-content-end mb-0"&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Previous&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;1&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;2&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;3&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Next&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/nav&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// home.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="home.html" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="orders.html" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                訂單列表
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                單一訂單細節
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;div class="row g-4 row-cols-lg-3 mb-4"&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;在線人數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;
                  3,996
                &lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;訂單數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;1,022&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;營業額&lt;/h2&gt;
                &lt;p class="mb-0 text-success"&gt;&lt;span class="fs-3"&gt;NT$&lt;/span&gt;&lt;span class="display-4"&gt;120,500&lt;/span&gt;&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="row g-4"&gt;
          &lt;div class="col-lg-4"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="pie-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="bar-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="card shadow-sm"&gt;
        &lt;div class="card-header bg-transparent"&gt;
          &lt;div class="input-group"&gt;
            &lt;span class="input-group-text border-0 bg-transparent pe-0"&gt;
              &lt;i class="bi bi-search"&gt;&lt;/i&gt;
            &lt;/span&gt;
            &lt;input type="search" class="form-control border-0 shadow-none"&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="card-body p-0"&gt;
          &lt;div class="table-responsive"&gt;
            &lt;table class="table table-hover mb-0"&gt;
              &lt;thead class="bg-light text-nowrap"&gt;
                &lt;tr class="align-middle"&gt;
                  &lt;th scope="col" class="py-3 ps-4"&gt;訂單編號&lt;/th&gt;
                  &lt;th scope="col"&gt;Email&lt;/th&gt;
                  &lt;th scope="col"&gt;顧客姓名&lt;/th&gt;
                  &lt;th scope="col"&gt;購買品項&lt;/th&gt;
                  &lt;th scope="col"&gt;付款狀態&lt;/th&gt;
                  &lt;th scope="col"&gt;購買金額&lt;/th&gt;
                  &lt;th scope="col" class="pe-4"&gt;編輯&lt;/th&gt;
                &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody class="text-nowrap"&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315171601&lt;/td&gt;
                  &lt;td&gt;bear123@email.com&lt;/td&gt;
                  &lt;td&gt;貝小熊&lt;/td&gt;
                  &lt;td&gt;食品專賣店：餅乾類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;600&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315170201&lt;/td&gt;
                  &lt;td&gt;fish123@email.com&lt;/td&gt;
                  &lt;td&gt;溪小魚&lt;/td&gt;
                  &lt;td&gt;食品專賣店：飲料類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;1,200&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315190301&lt;/td&gt;
                  &lt;td&gt;dog123@email.com&lt;/td&gt;
                  &lt;td&gt;毛小熊&lt;/td&gt;
                  &lt;td&gt;食品專賣店：熟食類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;2,200&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="card-footer bg-transparent py-3"&gt;
          &lt;nav aria-label="Page navigation example"&gt;
            &lt;ul class="pagination justify-content-end mb-0"&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Previous&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;1&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;2&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;3&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Next&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/chart.js"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// layout.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="home.html" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="orders.html" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                訂單列表
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                單一訂單細節
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/navs-tabs/" target="_blank">元件 &gt; 導覽與頁籤</a></li><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/badge/" target="_blank">元件 &gt; 標籤</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/dropdowns/" target="_blank" rel="noreferrer noopener">元件 &gt; 下拉選單</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">後台管理：傳遞內容至 Modal 內</h3>



<pre class="wp-block-code"><code>// orders.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 訂單列表&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="home.html" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="orders.html" class="sidebar-link active"&gt;
              &lt;div class="ps-5"&gt;
                訂單列表
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                單一訂單細節
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;ul class="nav nav-pills mb-4"&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill active" aria-current="page" href="#"&gt;所有訂單
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;156&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill" href="#"&gt;待處理
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;106&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill" href="#"&gt;已出貨
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;50&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link rounded-pill"&gt;退款
              &lt;span class="badge rounded-pill bg-light text-dark"&gt;2&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;div class="card shadow-sm"&gt;
          &lt;div class="card-header bg-transparent"&gt;
            &lt;div class="input-group"&gt;
              &lt;div class="dropdown"&gt;
                &lt;button class="btn btn-outline-dark dropdown-toggle btn-sm" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                  操作
                &lt;/button&gt;
                &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                  &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;全部選取&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;個別選取&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;其他&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
              &lt;span class="input-group-text border-0 bg-transparent pe-0"&gt;
                &lt;i class="bi bi-search"&gt;&lt;/i&gt;
              &lt;/span&gt;
              &lt;input type="search" class="form-control border-0 shadow-none"&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-body p-0"&gt;
            &lt;div class="table-responsive"&gt;
              &lt;table class="table table-hover mb-0"&gt;
                &lt;thead class="bg-light text-nowrap"&gt;
                  &lt;tr class="align-middle"&gt;
                    &lt;th scope="col" class="ps-4"&gt;&lt;/th&gt;
                    &lt;th scope="col" class="py-3"&gt;訂單編號&lt;/th&gt;
                    &lt;th scope="col"&gt;Email&lt;/th&gt;
                    &lt;th scope="col"&gt;顧客姓名&lt;/th&gt;
                    &lt;th scope="col"&gt;購買品項&lt;/th&gt;
                    &lt;th scope="col"&gt;付款狀態&lt;/th&gt;
                    &lt;th scope="col"&gt;購買金額&lt;/th&gt;
                    &lt;th scope="col" class="pe-4"&gt;編輯&lt;/th&gt;
                  &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody class="text-nowrap"&gt;
                  &lt;tr&gt;
                    &lt;td scope="row" class="ps-4" &gt;
                      &lt;input type="checkbox" class="form-check-input"&gt;
                    &lt;/td&gt;
                    &lt;td&gt;TX20220315171601&lt;/td&gt;
                    &lt;td&gt;bear123@email.com&lt;/td&gt;
                    &lt;td&gt;貝小熊&lt;/td&gt;
                    &lt;td&gt;食品專賣店：餅乾類&lt;/td&gt;
                    &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                    &lt;td class="text-end"&gt;600&lt;/td&gt;
                    &lt;td class="text-end pe-4"&gt;
                      &lt;div class="btn-group"&gt;
                        &lt;a href="#" class="btn btn-sm btn-outline-dark"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                          &lt;button class="btn btn-sm btn-outline-dark dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                            操作
                          &lt;/button&gt;
                          &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;修改狀態&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal" data-bs-order-id="TX20220315171601"&gt;刪除訂單&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/div&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                    &lt;td scope="row" class="ps-4" &gt;
                      &lt;input type="checkbox" class="form-check-input"&gt;
                    &lt;/td&gt;
                    &lt;td&gt;TX20220315170201&lt;/td&gt;
                    &lt;td&gt;fish123@email.com&lt;/td&gt;
                    &lt;td&gt;溪小魚&lt;/td&gt;
                    &lt;td&gt;食品專賣店：飲料類&lt;/td&gt;
                    &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                    &lt;td class="text-end"&gt;1,200&lt;/td&gt;
                    &lt;td class="text-end pe-4"&gt;
                      &lt;div class="btn-group"&gt;
                        &lt;a href="#" class="btn btn-sm btn-outline-dark"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                          &lt;button class="btn btn-sm btn-outline-dark dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                            操作
                          &lt;/button&gt;
                          &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;修改狀態&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal" data-bs-order-id="TX20220315170201"&gt;刪除訂單&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/div&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                    &lt;td scope="row" class="ps-4" &gt;
                      &lt;input type="checkbox" class="form-check-input"&gt;
                    &lt;/td&gt;
                    &lt;td&gt;TX20220315190301&lt;/td&gt;
                    &lt;td&gt;dog123@email.com&lt;/td&gt;
                    &lt;td&gt;毛小熊&lt;/td&gt;
                    &lt;td&gt;食品專賣店：熟食類&lt;/td&gt;
                    &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                    &lt;td class="text-end"&gt;2,200&lt;/td&gt;
                    &lt;td class="text-end pe-4"&gt;
                      &lt;div class="btn-group"&gt;
                        &lt;a href="#" class="btn btn-sm btn-outline-dark"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                          &lt;button class="btn btn-sm btn-outline-dark dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                            操作
                          &lt;/button&gt;
                          &lt;ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"&gt;
                            &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;修改狀態&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal" data-bs-order-id="TX20220315190301"&gt;刪除訂單&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/div&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/tbody&gt;
              &lt;/table&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer bg-transparent py-3"&gt;
            &lt;nav aria-label="Page navigation example"&gt;
              &lt;ul class="pagination justify-content-end mb-0"&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Previous&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;1&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;2&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;3&lt;/a&gt;&lt;/li&gt;
                &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Next&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/nav&gt;
          &lt;/div&gt;
          &lt;!-- Modal --&gt;
          &lt;div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
            &lt;div class="modal-dialog"&gt;
              &lt;div class="modal-content"&gt;
                &lt;div class="modal-header"&gt;
                  &lt;h5 class="modal-title" id="exampleModalLabel"&gt;刪除訂單&lt;/h5&gt;
                  &lt;button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"&gt;&lt;/button&gt;
                &lt;/div&gt;
                &lt;div class="modal-body"&gt;
                  確認刪除「&lt;span id="deleteText"&gt;&lt;/span&gt;」的訂單嗎？
                &lt;/div&gt;
                &lt;div class="modal-footer"&gt;
                  &lt;button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"&gt;取消&lt;/button&gt;
                  &lt;button type="button" class="btn btn-danger"&gt;確認刪除&lt;/button&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/modal.js"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// home.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="home.html" class="sidebar-link active"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="orders.html" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                訂單列表
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                單一訂單細節
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;div class="row g-4 row-cols-lg-3 mb-4"&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;在線人數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;
                  3,996
                &lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;訂單數&lt;/h2&gt;
                &lt;p class="display-4 mb-0"&gt;1,022&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body text-end"&gt;
                &lt;h2 class="display-6"&gt;營業額&lt;/h2&gt;
                &lt;p class="mb-0 text-success"&gt;&lt;span class="fs-3"&gt;NT$&lt;/span&gt;&lt;span class="display-4"&gt;120,500&lt;/span&gt;&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="row g-4"&gt;
          &lt;div class="col-lg-4"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="pie-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col"&gt;
            &lt;div class="card shadow-sm h-100"&gt;
              &lt;div class="card-body"&gt;
                &lt;canvas id="bar-chart" class="img-fluid"&gt;&lt;/canvas&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="card shadow-sm"&gt;
        &lt;div class="card-header bg-transparent"&gt;
          &lt;div class="input-group"&gt;
            &lt;span class="input-group-text border-0 bg-transparent pe-0"&gt;
              &lt;i class="bi bi-search"&gt;&lt;/i&gt;
            &lt;/span&gt;
            &lt;input type="search" class="form-control border-0 shadow-none"&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="card-body p-0"&gt;
          &lt;div class="table-responsive"&gt;
            &lt;table class="table table-hover mb-0"&gt;
              &lt;thead class="bg-light text-nowrap"&gt;
                &lt;tr class="align-middle"&gt;
                  &lt;th scope="col" class="py-3 ps-4"&gt;訂單編號&lt;/th&gt;
                  &lt;th scope="col"&gt;Email&lt;/th&gt;
                  &lt;th scope="col"&gt;顧客姓名&lt;/th&gt;
                  &lt;th scope="col"&gt;購買品項&lt;/th&gt;
                  &lt;th scope="col"&gt;付款狀態&lt;/th&gt;
                  &lt;th scope="col"&gt;購買金額&lt;/th&gt;
                  &lt;th scope="col" class="pe-4"&gt;編輯&lt;/th&gt;
                &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody class="text-nowrap"&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315171601&lt;/td&gt;
                  &lt;td&gt;bear123@email.com&lt;/td&gt;
                  &lt;td&gt;貝小熊&lt;/td&gt;
                  &lt;td&gt;食品專賣店：餅乾類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;600&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315170201&lt;/td&gt;
                  &lt;td&gt;fish123@email.com&lt;/td&gt;
                  &lt;td&gt;溪小魚&lt;/td&gt;
                  &lt;td&gt;食品專賣店：飲料類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;1,200&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td scope="row" class="ps-4"&gt;TX20220315190301&lt;/td&gt;
                  &lt;td&gt;dog123@email.com&lt;/td&gt;
                  &lt;td&gt;毛小熊&lt;/td&gt;
                  &lt;td&gt;食品專賣店：熟食類&lt;/td&gt;
                  &lt;td&gt;&lt;div class="text-muted"&gt;尚未付款&lt;/div&gt;&lt;/td&gt;
                  &lt;td class="text-end"&gt;2,200&lt;/td&gt;
                  &lt;td class="text-end pe-4"&gt;
                    &lt;a href="#" class="btn btn-sm btn-outline-dark me-2"&gt;編輯 &lt;i class="bi bi-pen"&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="card-footer bg-transparent py-3"&gt;
          &lt;nav aria-label="Page navigation example"&gt;
            &lt;ul class="pagination justify-content-end mb-0"&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Previous&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;1&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;2&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;3&lt;/a&gt;&lt;/li&gt;
              &lt;li class="page-item"&gt;&lt;a class="page-link" href="#"&gt;Next&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/nav&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/chart.js"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/chart.js"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// javascripts/all.js

const toggleMenuBtn = document.querySelector('#toggle-btn');
const body = document.querySelector('body');
toggleMenuBtn.addEventListener('click', (evt) =&gt; {
  // console.log(evt);
  evt.preventDefault();
  body.classList.toggle('sidebar-toggled');
});</code></pre>



<pre class="wp-block-code"><code>// javascripts/chart.js

// 動態圖表
(() =&gt; {
  const chartColors = {
    red: 'rgb(255, 99, 132)',
    orange: 'rgb(255, 159, 64)',
    yellow: 'rgb(255, 205, 86)',
    green: 'rgb(75, 192, 192)',
    blue: 'rgb(54, 162, 235)',
    purple: 'rgb(153, 102, 255)',
    grey: 'rgb(201, 203, 207)'
  };
  var randomScalingFactor = function () {
    return Math.round(Math.random() * 2000000);
  };

  const pieCtx = document.getElementById('pie-chart').getContext('2d');
  const barCtx = document.getElementById('bar-chart').getContext('2d');

  const config = {
    type: 'pie',
    data: {
      datasets: &#91;{
        data: &#91;
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
        ],
        backgroundColor: &#91;
          chartColors.red,
          chartColors.orange,
          chartColors.yellow,
          chartColors.green,
          chartColors.blue,
        ],
        label: 'Dataset 1'
      }],
      labels: &#91;
        '餅乾類',
        '飲料類',
        '熟食類',
        '生鮮類',
        '糖果類',
      ]
    },
    options: {
      responsive: true
    }
  };
  const barConfig = {
    type: 'bar',
    data: {
      datasets: &#91;{
        data: &#91;
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
          randomScalingFactor(),
        ],
        backgroundColor: &#91;
          chartColors.red,
          chartColors.orange,
          chartColors.yellow,
          chartColors.green,
          chartColors.blue,
          chartColors.purple,
        ],
        label: '單月營業額'
      }],
      labels: &#91;
        '一月',
        '二月',
        '三月',
        '四月',
        '五月',
        '六月',
      ]
    },
    options: {
      responsive: true
    }
  };
  const pieChart = new Chart(pieCtx, config);
  const barChart = new Chart(barCtx, barConfig);
})();</code></pre>



<pre class="wp-block-code"><code>// javascripts/modal.js

// 互動視窗 Modal
const modalByDelete = document.querySelector('#deleteModal');
modalByDelete.addEventListener('show.bs.modal', function(event) {
  const button = event.relatedTarget;
  const orderId = button.dataset.bsOrderId;
  // console.log(button, orderId);
  const modalText = modalByDelete.querySelector('#deleteText');

  modalText.textContent = orderId;
});</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/modal/" target="_blank">元件 &gt; 互動視窗</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/modal/#varying-modal-content" target="_blank" rel="noreferrer noopener">元件 &gt; 互動視窗 &gt; 不同的互動視窗內容</a></li></ul>



<h3>後台管理：單一產品頁面製作</h3>



<pre class="wp-block-code"><code>// order.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 首頁&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="home.html" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="orders.html" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                訂單列表
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link active"&gt;
              &lt;div class="ps-5"&gt;
                單一訂單細節
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;div class="row"&gt;
          &lt;div class="col-lg-3 mb-3"&gt;
            &lt;div class="list-group sticky-top" style="top: 80px;"&gt;
              &lt;a href="#" class="list-group-item list-group-item-action active" aria-current="true"&gt;
                摘要
              &lt;/a&gt;
              &lt;a href="#" class="list-group-item list-group-item-action"&gt;購買品項&lt;/a&gt;
              &lt;a href="#" class="list-group-item list-group-item-action"&gt;發票管理&lt;/a&gt;
              &lt;a href="#" class="list-group-item list-group-item-action"&gt;危險操作&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="col-lg-9"&gt;
            &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// helpers/_variables.scss

// List group

// scss-docs-start list-group-variables
$list-group-color:                  $gray-900 !default;
$list-group-bg:                     $white !default;
$list-group-border-color:           rgba($black, .125) !default;
$list-group-border-width:           $border-width !default;
$list-group-border-radius:          $border-radius-lg; // $border-radius !default;

$list-group-item-padding-y:         $spacer * .5 !default;
$list-group-item-padding-x:         $spacer !default;
$list-group-item-bg-scale:          -80% !default;
$list-group-item-color-scale:       40% !default;

$list-group-hover-bg:               $gray-100 !default;
$list-group-active-color:           $component-active-color !default;
$list-group-active-bg:              $component-active-bg !default;
$list-group-active-border-color:    $list-group-active-bg !default;

$list-group-disabled-color:         $gray-600 !default;
$list-group-disabled-bg:            $list-group-bg !default;

$list-group-action-color:           $gray-700 !default;
$list-group-action-hover-color:     $list-group-action-color !default;

$list-group-action-active-color:    $body-color !default;
$list-group-action-active-bg:       $gray-200 !default;
// scss-docs-end list-group-variables</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/list-group/#links-and-buttons" target="_blank" rel="noreferrer noopener">元件 &gt; 列表群組 &gt; 連結和按鈕</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">後台管理：Sticky 與 scroll spy 的混合運用</h3>



<pre class="wp-block-code"><code>// order.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;後台管理 - 單一訂單細節&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;
&lt;/head&gt;
&lt;body data-bs-spy="scroll" data-bs-target="#detail-list-item" data-bs-offset="80"&gt;
  
  &lt;!-- 後台管理：結構規劃 start --&gt;
  &lt;div class="d-flex"&gt;
    &lt;aside class="sidebar vh-100 border-end pt-3 d-flex bg-white flex-column"&gt;
      &lt;!-- 1. 後台名稱 --&gt;
      &lt;div class="px-4"&gt;
        &lt;strong&gt;食品專賣店&lt;/strong&gt;
        - 後台管理
      &lt;/div&gt;
      &lt;!-- 2. 選單 --&gt;
      &lt;div class="overflow-auto mt-3"&gt;
        &lt;div&gt;
          &lt;a href="home.html" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-house me-2"&gt;&lt;/i&gt;
              首頁
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;a href="#menu-order" class="sidebar-link" data-bs-toggle="collapse"&gt;
            &lt;div class="d-flex justify-content-between px-4"&gt;
              &lt;p class="mb-0"&gt;
                &lt;i class="bi bi-card-checklist me-2"&gt;&lt;/i&gt;
                訂單管理
              &lt;/p&gt;
              &lt;i class="bi bi-caret-down"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/a&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="orders.html" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                訂單列表
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="order.html" class="sidebar-link active"&gt;
              &lt;div class="ps-5"&gt;
                單一訂單細節
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="collapse" id="menu-order"&gt;
            &lt;a href="#" class="sidebar-link"&gt;
              &lt;div class="ps-5"&gt;
                其他項目
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-card-list me-2"&gt;&lt;/i&gt;
              產品列表
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;a href="#" class="sidebar-link"&gt;
            &lt;div class="px-4"&gt;
              &lt;i class="bi bi-list-stars me-2"&gt;&lt;/i&gt;
              顧客評價
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 3. 登出按鈕 --&gt;
      &lt;a href="#" class="mt-auto sidebar-link"&gt;
        &lt;div class="px-4"&gt;
          &lt;i class="bi bi-box-arrow-right me-2"&gt;&lt;/i&gt;
          登出
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/aside&gt;
    &lt;main class="main"&gt;
      &lt;div class="bg-white w-100 border-bottom sticky-top"&gt;
        &lt;a href="#" class="d-inline-block py-3 px-4 border-end" id="toggle-btn"&gt;
          &lt;i class="bi bi-arrows-angle-expand"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;

      &lt;div class="p-4"&gt;
        &lt;!-- 主要內容 --&gt;
        &lt;div class="row"&gt;
          &lt;div class="col-lg-3 mb-3"&gt;
            &lt;nav id="detail-list-item" class="list-group sticky-top" style="top: 80px;"&gt;
              &lt;a href="#card-summary" class="list-group-item list-group-item-action active" aria-current="true"&gt;
                摘要
              &lt;/a&gt;
              &lt;a href="#card-detail" class="list-group-item list-group-item-action"&gt;購買品項&lt;/a&gt;
              &lt;a href="#card-invoice" class="list-group-item list-group-item-action"&gt;發票管理&lt;/a&gt;
              &lt;a href="#card-danger" class="list-group-item list-group-item-action"&gt;危險操作&lt;/a&gt;
            &lt;/nav&gt;
          &lt;/div&gt;
          &lt;div class="col-lg-9"&gt;
            &lt;div class="card mb-3"&gt;
              &lt;div class="card-header py-4" id="card-summary"&gt;
                摘要
              &lt;/div&gt;
              &lt;div class="card-body"&gt;
                &lt;dl class="row mb-0"&gt;
                  &lt;dt class="col-sm-3 text-truncate"&gt;訂單編號&lt;/dt&gt;
                  &lt;dd class="col-sm-9"&gt;TX20220315171601&lt;/dd&gt;
                  &lt;dt class="col-sm-3 text-truncate"&gt;訂單金額&lt;/dt&gt;
                  &lt;dd class="col-sm-9"&gt;600&lt;/dd&gt;
                  &lt;dt class="col-sm-3 text-truncate"&gt;訂單狀態&lt;/dt&gt;
                  &lt;dd class="col-sm-9"&gt;待處理&lt;/dd&gt;
                  &lt;dt class="col-sm 3 text-truncate"&gt;發票狀態&lt;/dt&gt;
                  &lt;dd class="col-sm-9"&gt;未開立&lt;/dd&gt;
                &lt;/dl&gt;
              &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class="card mb-3"&gt;
              &lt;div class="card-header py-4" id="card-detail"&gt;
                購買品項
              &lt;/div&gt;
              &lt;div class="card-body p-0"&gt;
                &lt;table class="table table-hover mb-0 text-nowrap align-middle w-100" style="font-size: 14px;"&gt;
                  &lt;thead class="bg-light"&gt;
                    &lt;tr&gt;
                      &lt;th scope="col" class="py-3 ps-4 border-0"&gt;&lt;/th&gt;
                      &lt;th scope="col" class="py-3 border-0"&gt;貨號&lt;/th&gt;
                      &lt;th scope="col" class="py-3 border-0"&gt;商品名稱&lt;/th&gt;
                      &lt;th scope="col" class="py-3 border-0"&gt;購買價格&lt;/th&gt;
                      &lt;th scope="col" class="py-3 border-0"&gt;訂購數量&lt;/th&gt;
                      &lt;th scope="col" class="py-3 border-0"&gt;出貨狀態&lt;/th&gt;
                      &lt;th scope="col" class="py-3 pe-3 border-0"&gt;編輯&lt;/th&gt;
                    &lt;/tr&gt;
                  &lt;/thead&gt;
                  &lt;tbody class="text-nowrap"&gt;
                    &lt;tr class="align-middle"&gt;
                      &lt;td class="ps-4"&gt;&lt;input type="checkbox" class="form-check-input"&gt;&lt;/td&gt;
                      &lt;td scope="row"&gt;P20220315171601&lt;/td&gt;
                      &lt;td&gt;餅乾類&lt;/td&gt;
                      &lt;td&gt;600&lt;/td&gt;
                      &lt;td&gt;1&lt;/td&gt;
                      &lt;td class="text-muted"&gt;尚未處理&lt;/td&gt;
                      &lt;td class="text-center pe-3"&gt;
                        &lt;div class="btn-group"&gt;
                          &lt;button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"&gt;編輯&lt;/button&gt;
                          &lt;ul class="dropdown-menu"&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;尚未處理&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已出貨&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已取貨&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;hr class="dropdown-divider"&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item text-danger"&gt;刪除品項&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/div&gt;
                      &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="align-middle"&gt;
                      &lt;td class="ps-4"&gt;&lt;input type="checkbox" class="form-check-input"&gt;&lt;/td&gt;
                      &lt;td scope="row"&gt;P20220315170201&lt;/td&gt;
                      &lt;td&gt;飲料類&lt;/td&gt;
                      &lt;td&gt;1,200&lt;/td&gt;
                      &lt;td&gt;2&lt;/td&gt;
                      &lt;td class="text-muted"&gt;尚未處理&lt;/td&gt;
                      &lt;td class="text-center pe-3"&gt;
                        &lt;div class="btn-group"&gt;
                          &lt;button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"&gt;編輯&lt;/button&gt;
                          &lt;ul class="dropdown-menu"&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;尚未處理&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已出貨&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已取貨&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;hr class="dropdown-divider"&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item text-danger"&gt;刪除品項&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/div&gt;
                      &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="align-middle"&gt;
                      &lt;td class="ps-4"&gt;&lt;input type="checkbox" class="form-check-input"&gt;&lt;/td&gt;
                      &lt;td scope="row"&gt;P20220315190301&lt;/td&gt;
                      &lt;td&gt;熟食類&lt;/td&gt;
                      &lt;td&gt;2,200&lt;/td&gt;
                      &lt;td&gt;5&lt;/td&gt;
                      &lt;td class="text-muted"&gt;尚未處理&lt;/td&gt;
                      &lt;td class="text-center pe-3"&gt;
                        &lt;div class="btn-group"&gt;
                          &lt;button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"&gt;編輯&lt;/button&gt;
                          &lt;ul class="dropdown-menu"&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;尚未處理&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已出貨&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已取貨&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;hr class="dropdown-divider"&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="#" class="dropdown-item text-danger"&gt;刪除品項&lt;/a&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/div&gt;
                      &lt;/td&gt;
                    &lt;/tr&gt;
                  &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;div class="px-4 py-3"&gt;
                  &lt;div class="btn-group"&gt;
                    &lt;button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"&gt;
                      出貨狀態管理
                    &lt;/button&gt;
                    &lt;ul class="dropdown-menu"&gt;
                      &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;尚未處理&lt;/a&gt;&lt;/li&gt;
                      &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已出貨&lt;/a&gt;&lt;/li&gt;
                      &lt;li&gt;&lt;a href="#" class="dropdown-item"&gt;已取貨&lt;/a&gt;&lt;/li&gt;
                      &lt;li&gt;&lt;hr class="dropdown-divider"&gt;&lt;/li&gt;
                      &lt;li&gt;&lt;a href="#" class="dropdown-item text-danger"&gt;刪除品項&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class="card mb-3"&gt;
              &lt;div class="card-header py-4" id="card-invoice"&gt;
                發票管理
              &lt;/div&gt;
              &lt;div class="card-body"&gt;
                &lt;div class="row mb-3"&gt;
                  &lt;label for="invoiceType" class="col-sm-2 col-form-label"&gt;發票類型&lt;/label&gt;
                  &lt;div class="col-sm-10"&gt;
                    &lt;select name="" id="invoiceType" class="form-select"&gt;
                      &lt;option value=""&gt;個人發票&lt;/option&gt;
                      &lt;option value=""&gt;營業人三聯式發票&lt;/option&gt;
                      &lt;option value=""&gt;捐贈發票&lt;/option&gt;
                    &lt;/select&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="row mb-3"&gt;
                  &lt;label for="taxNumber" class="col-sm-2 col-form-label"&gt;統一編號&lt;/label&gt;
                  &lt;div class="col-sm-10"&gt;
                    &lt;input type="text" id="taxNumber" class="form-control" value="11223355"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="row mb-3"&gt;
                  &lt;label for="companyName" class="col-sm-2 col-form-label"&gt;公司名稱&lt;/label&gt;
                  &lt;div class="col-sm-10"&gt;
                    &lt;input type="text" id="companyName" class="form-control" value="食品專賣店"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="text-end"&gt;
                  &lt;button type="button" class="btn btn-outline-primary"&gt;更多資訊&lt;/button&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class="card mb-3"&gt;
              &lt;div class="card-header py-4" id="card-danger"&gt;
                危險操作
              &lt;/div&gt;
              &lt;div class="card-body"&gt;
                &lt;div class="row align-items-center mb-3"&gt;
                  &lt;div class="col-2"&gt;
                    &lt;button type="button" class="btn btn-outline-secondary w-100"&gt;退款&lt;/button&gt;
                  &lt;/div&gt;
                  &lt;div class="col"&gt;退還用戶款項&lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="row align-items-center mb-3"&gt;
                  &lt;div class="col-2"&gt;
                    &lt;button type="button" class="btn btn-outline-secondary w-100"&gt;折讓&lt;/button&gt;
                  &lt;/div&gt;
                  &lt;div class="col"&gt;
                    針對已開立的訂單退回部分款項
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="row align-items-center mb-3"&gt;
                  &lt;div class="col-2"&gt;
                    &lt;button type="button" class="btn btn-outline-danger w-100"&gt;刪除訂單&lt;/button&gt;
                  &lt;/div&gt;
                  &lt;div class="col"&gt;
                    將訂單刪除，並移除相關訂單資訊
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;

            &lt;div&gt;
              &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;
  &lt;!-- 後台管理：結構規劃 end --&gt;

  &lt;!-- JavaScript Bundle with Popper --&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
  &lt;script src="./javascripts/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/content/typography/#description-list-alignment" target="_blank">內容 &gt; 文字排版 &gt; 描述型列表對齊</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/scrollspy/" target="_blank" rel="noreferrer noopener">元件 &gt; 滾動監控</a></li></ul>



<h3>後台管理：作業製作</h3>



<ol><li>每個分頁都做完，上傳至 Google Drive, GitHub</li><li>只做一頁，把所有分頁集合在一起</li></ol>



<h3>後台管理：範例程式碼參考</h3>



<p>注意：本章節提供 Codepen 範例程式碼，請勿直接複製，盡可能自行完成作業</p>



<p><a href="https://codepen.io/Wcc723/pen/JjymyYB" target="_blank" rel="noreferrer noopener">範例連結</a></p>



<p>製作作業時，請按照以下規則：</p>



<ul><li>請調整其他顏色，與範例不同</li><li>請完成所有的功能 (包含所有表格的下拉選單)</li><li>可選擇多檔繳交 (需附上完整 Sass)，或類似範例單一頁面繳交均可</li></ul>



<h2 class="has-background" style="background-color:#ff6663">CH14 – Landing Page 設計稿練習</h2>



<h3>Landing Page 設計稿練習：章節簡介</h3>



<ul><li>Sketch</li><li>Adobe XD</li><li>Figma</li></ul>



<h4>個人練習採用的圖片</h4>



<ul><li><a rel="noreferrer noopener" href="https://unsplash.com/photos/P1qyEf1g0HU" target="_blank">Photo by Glenn Carstens-Peters</a></li><li><a rel="noreferrer noopener" href="https://stocksnap.io/photo/white-shapes-HOGKNEMAUX" target="_blank">White Shapes Free Stock Image</a></li><li><a rel="noreferrer noopener" href="https://www.freepik.com/free-vector/business-team-planning-working-process-flat-vector-illustration-cartoon-colleagues-talking-sharing-thoughts-smiling-company-office-teamwork-workflow-concept_10606194.htm" target="_blank">Vector by pch.vector – 01</a></li><li><a rel="noreferrer noopener" href="https://www.freepik.com/free-vector/company-employees-sharing-thoughts-ideas_8270975.htm#page=6&amp;position=0&amp;from_view=author" target="_blank">Vector by pch.vector – 02</a></li><li><a rel="noreferrer noopener" href="https://www.freepik.com/free-vector/customer-giving-quality-feedback_8270988.htm#page=6&amp;position=29&amp;from_view=author" target="_blank">Vector by pch.vector – 03</a></li><li><a href="https://www.freepik.com/free-vector/cartoon-man-sitting-home-with-laptop_9649152.htm#query=freelancer&amp;position=2&amp;from_view=author" target="_blank" rel="noreferrer noopener">Vector by pch.vector – 04</a></li></ul>



<h3>Landing Page 設計稿練習：課程資源</h3>



<p><a href="https://hexschool.github.io/bootstrap5-homework/index.html" target="_blank" rel="noreferrer noopener">設計稿連結</a></p>



<p>圖檔連結可參考影音課程。</p>



<h3 class="has-background" style="background-color:#ff6663">Landing Page 設計稿練習：導覽列製作</h3>



<pre class="wp-block-code"><code>// .gitignore

.DS_Store
node_modules
/dist


# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?</code></pre>



<pre class="wp-block-code"><code>// stylesheets/all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "../node_modules/bootstrap/scss/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";</code></pre>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; 接案家&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link active" aria-current="page" href="#"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// stylesheets/helpers/_variables.scss

// scss-docs-start navbar-theme-variables
$navbar-dark-color:                 rgba($white, .55) !default;
$navbar-dark-hover-color:           rgba($white, .75) !default;
$navbar-dark-active-color:          $white !default;
$navbar-dark-disabled-color:        rgba($white, .25) !default;
$navbar-dark-toggler-icon-bg:       url("data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'&gt;&lt;path stroke='#{$navbar-dark-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/&gt;&lt;/svg&gt;") !default;
$navbar-dark-toggler-border-color:  rgba($white, .1) !default;

$navbar-light-color:                rgba($black, .55) !default;
$navbar-light-hover-color:          rgba($black, .7) !default;
$navbar-light-active-color:         rgba($info, .9); // rgba($black, .9) !default;
$navbar-light-disabled-color:       rgba($black, .3) !default;
$navbar-light-toggler-icon-bg:      url("data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'&gt;&lt;path stroke='#{$navbar-light-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/&gt;&lt;/svg&gt;") !default;
$navbar-light-toggler-border-color: rgba($black, .1) !default;

$navbar-light-brand-color:                $navbar-light-active-color !default;
$navbar-light-brand-hover-color:          $navbar-light-active-color !default;
$navbar-dark-brand-color:                 $navbar-dark-active-color !default;
$navbar-dark-brand-hover-color:           $navbar-dark-active-color !default;
// scss-docs-end navbar-theme-variables</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/navbar/" target="_blank" rel="noreferrer noopener">元件 &gt; 導覽列 (Navbar)</a></li></ul>



<h3>Landing Page 設計稿練習：Header 圖片</h3>



<p>開發過程中，設計稿桌面版、行動版一起觀看。</p>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; 接案家&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link active" aria-current="page" href="#"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;!-- Landing Page 設計稿練習：Header 圖片 start --&gt;
  &lt;header class="header px-4 py-5 d-flex align-items-lg-center justify-content-center" style="background-image: url(https://images.unsplash.com/photo-1497091071254-cc9b2ba7c48a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=874&amp;q=80);"&gt;
    &lt;div class="text-white text-center"&gt;
      &lt;p class="fs-5"&gt;你是不是也有需要&lt;/p&gt;
      &lt;h1 class="fw-bold"&gt;找個接案家？&lt;/h1&gt;
      &lt;p&gt;想有人幫你做網站開發、設計稿設計、程式編碼，&lt;br&gt;響應式排版、客戶使用者體驗！&lt;br&gt;提供店家在網路上，有更多機會讓更多人可以看到你的店家。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- Landing Page 設計稿練習：Header 圖片 end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// stylesheets/components/_header.scss

.header {
  height: 627px;
  background-size: cover;
  background-position: bottom center;
}</code></pre>



<pre class="wp-block-code"><code>// stylesheets/all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "../node_modules/bootstrap/scss/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";

@import "./components/header";</code></pre>



<h3>Landing Page 設計稿練習：多欄式卡片</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; 接案家&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link active" aria-current="page" href="#"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;!-- Landing Page 設計稿練習：Header 圖片 start --&gt;
  &lt;header class="header px-4 py-5 d-flex align-items-lg-center justify-content-center" style="background-image: url(https://images.unsplash.com/photo-1497091071254-cc9b2ba7c48a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=874&amp;q=80);"&gt;
    &lt;div class="text-white text-center"&gt;
      &lt;p class="fs-5"&gt;你是不是也有需要&lt;/p&gt;
      &lt;h1 class="fw-bold"&gt;找個接案家？&lt;/h1&gt;
      &lt;p&gt;想有人幫你做網站開發、設計稿設計、程式編碼，&lt;br&gt;響應式排版、客戶使用者體驗！&lt;br&gt;提供店家在網路上，有更多機會讓更多人可以看到你的店家。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- Landing Page 設計稿練習：Header 圖片 end --&gt;

  &lt;!-- Landing Page 設計稿練習：多欄式卡片 start --&gt;
  &lt;section class="container my-5"&gt;
    &lt;div class="row flex-row-reverse"&gt;
      &lt;div class="col-lg-6  d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2&gt;讓我們幫你建立專屬的網站&lt;/h2&gt;
          &lt;p class="lh-lg text-secondary"&gt;我們有專業的網頁工程師、網頁設計師，&lt;br&gt;也有新星、來自各地的專業人才，&lt;br&gt;幫您製作您心目中的樣式、版型。&lt;br&gt;讓你專注把心力花在你覺得更須優先的事情上！&lt;br&gt;(依專案內容報價、可行性是否接案)&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-6"&gt;
        &lt;img src="https://img.freepik.com/free-vector/cartoon-man-sitting-home-with-laptop_74855-6963.jpg?w=996&amp;t=st=1647914030~exp=1647914630~hmac=31a82c3465d7d99f8f5f546e5b59a34f281c0a3512b6fa5d1d7555376cd43038" class="w-100" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：多欄式卡片 end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>Landing Page 設計稿練習：特殊卡片排版</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; 接案家&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link active" aria-current="page" href="#"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;!-- Landing Page 設計稿練習：Header 圖片 start --&gt;
  &lt;header class="header px-4 py-5 d-flex align-items-lg-center justify-content-center" style="background-image: url(https://images.unsplash.com/photo-1497091071254-cc9b2ba7c48a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=874&amp;q=80);"&gt;
    &lt;div class="text-white text-center"&gt;
      &lt;p class="fs-5"&gt;你是不是也有需要&lt;/p&gt;
      &lt;h1 class="fw-bold"&gt;找個接案家？&lt;/h1&gt;
      &lt;p&gt;想有人幫你做網站開發、設計稿設計、程式編碼，&lt;br&gt;響應式排版、客戶使用者體驗！&lt;br&gt;提供店家在網路上，有更多機會讓更多人可以看到你的店家。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- Landing Page 設計稿練習：Header 圖片 end --&gt;

  &lt;!-- Landing Page 設計稿練習：多欄式卡片 start --&gt;
  &lt;section class="container my-5"&gt;
    &lt;div class="row flex-row-reverse"&gt;
      &lt;div class="col-lg-6  d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2&gt;讓我們幫你建立專屬的網站&lt;/h2&gt;
          &lt;p class="lh-lg text-secondary"&gt;我們有專業的網頁工程師、網頁設計師，&lt;br&gt;也有新星、來自各地的專業人才，&lt;br&gt;幫您製作您心目中的樣式、版型。&lt;br&gt;讓你專注把心力花在你覺得更須優先的事情上！&lt;br&gt;(依專案內容報價、可行性是否接案)&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-6"&gt;
        &lt;img src="https://img.freepik.com/free-vector/cartoon-man-sitting-home-with-laptop_74855-6963.jpg?w=996&amp;t=st=1647914030~exp=1647914630~hmac=31a82c3465d7d99f8f5f546e5b59a34f281c0a3512b6fa5d1d7555376cd43038" class="w-100" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：多欄式卡片 end --&gt;

  &lt;!-- Landing Page 設計稿練習：特殊卡片排版 start --&gt;
  &lt;section class="py-5" style="background-image: url('https://cdn.stocksnap.io/img-thumbs/960w/white-shapes_HOGKNEMAUX.jpg'); background-size: cover;"&gt;
    &lt;div class="container"&gt;
      &lt;h2 class="text-center mb-4"&gt;你有這些需求嗎？&lt;/h2&gt;
      &lt;div class="row row-cols-1 row-cols-lg-4 g-3 g-lg-4"&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-vector-pen fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;網頁設計&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;對於網頁設計稿，提供多種版型參考製作。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-image fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;圖片應用&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;擁有一堆店家相關的產品、活動，沒有地方可以使用。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-code fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;程式編碼&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;網頁設計搞切版，經由程式編碼成網頁畫面。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-shop fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;店家網站開發&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;屬於店家個人網站可以有更多的內容呈現給顧客。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：特殊卡片排版 end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "./helpers/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";

@import "./components/header";</code></pre>



<pre class="wp-block-code"><code>// stylesheets/helpers/_utilities.scss

// Text
    // scss-docs-start utils-text
    "font-family": (
      property: font-family,
      class: font,
      values: (monospace: var(--#{$variable-prefix}font-monospace))
    ),
    "font-size": (
      rfs: true,
      property: font-size,
      class: fs,
      values: $font-sizes
    ),
    // custom
    "font-size-static": (
      rfs: true,
      property: font-size,
      class: fs-s,
      values: (
        48: 48px
      )
    ),
    "font-style": (
      property: font-style,
      class: fst,
      values: italic normal
    ),
    "font-weight": (
      property: font-weight,
      class: fw,
      values: (
        light: $font-weight-light,
        lighter: $font-weight-lighter,
        normal: $font-weight-normal,
        bold: $font-weight-bold,
        bolder: $font-weight-bolder
      )
    ),
    "line-height": (
      property: line-height,
      class: lh,
      values: (
        1: 1,
        sm: $line-height-sm,
        base: $line-height-base,
        lg: $line-height-lg,
      )
    ),
    "text-align": (
      responsive: true,
      property: text-align,
      class: text,
      values: (
        start: left,
        end: right,
        center: center,
      )
    ),
    "text-decoration": (
      property: text-decoration,
      values: none underline line-through
    ),
    "text-transform": (
      property: text-transform,
      class: text,
      values: lowercase uppercase capitalize
    ),
    "white-space": (
      property: white-space,
      class: text,
      values: (
        wrap: normal,
        nowrap: nowrap,
      )
    ),
    "word-wrap": (
      property: word-wrap word-break,
      class: text,
      values: (break: break-word),
      rtl: false
    ),
    // scss-docs-end utils-text</code></pre>



<h3 class="has-background" style="background-color:#ff6663">Landing Page 設計稿練習：表單響應式卡片排版</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; &lt;span style="color: #333333;"&gt;接案家&lt;/span&gt;&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link active" aria-current="page" href="#"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="#"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info" href="#"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;!-- Landing Page 設計稿練習：Header 圖片 start --&gt;
  &lt;header class="header px-4 py-5 d-flex align-items-lg-center justify-content-center" style="background-image: url(https://images.unsplash.com/photo-1497091071254-cc9b2ba7c48a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=874&amp;q=80);"&gt;
    &lt;div class="text-white text-center"&gt;
      &lt;p class="fs-5"&gt;你是不是也有需要&lt;/p&gt;
      &lt;h1 class="fw-bold"&gt;找個接案家？&lt;/h1&gt;
      &lt;p&gt;想有人幫你做網站開發、設計稿設計、程式編碼，&lt;br&gt;響應式排版、客戶使用者體驗！&lt;br&gt;提供店家在網路上，有更多機會讓更多人可以看到你的店家。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- Landing Page 設計稿練習：Header 圖片 end --&gt;

  &lt;!-- Landing Page 設計稿練習：多欄式卡片 start --&gt;
  &lt;section class="container my-5"&gt;
    &lt;div class="row flex-row-reverse"&gt;
      &lt;div class="col-lg-6  d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2&gt;讓我們幫你建立專屬的網站&lt;/h2&gt;
          &lt;p class="lh-lg text-secondary"&gt;我們有專業的網頁工程師、網頁設計師，&lt;br&gt;也有新星、來自各地的專業人才，&lt;br&gt;幫您製作您心目中的樣式、版型。&lt;br&gt;讓你專注把心力花在你覺得更須優先的事情上！&lt;br&gt;(依專案內容報價、可行性是否接案)&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-6"&gt;
        &lt;img src="https://img.freepik.com/free-vector/cartoon-man-sitting-home-with-laptop_74855-6963.jpg?w=996&amp;t=st=1647914030~exp=1647914630~hmac=31a82c3465d7d99f8f5f546e5b59a34f281c0a3512b6fa5d1d7555376cd43038" class="w-100" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：多欄式卡片 end --&gt;

  &lt;!-- Landing Page 設計稿練習：特殊卡片排版 start --&gt;
  &lt;section class="py-5" style="background-image: url('https://cdn.stocksnap.io/img-thumbs/960w/white-shapes_HOGKNEMAUX.jpg'); background-size: cover;"&gt;
    &lt;div class="container"&gt;
      &lt;h2 class="text-center mb-4"&gt;你有這些需求嗎？&lt;/h2&gt;
      &lt;div class="row row-cols-1 row-cols-lg-4 g-3 g-lg-4"&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-vector-pen fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;網頁設計&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;對於網頁設計稿，提供多種版型參考製作。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-image fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;圖片應用&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;擁有一堆店家相關的產品、活動，沒有地方可以使用。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-code fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;程式編碼&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;網頁設計搞切版，經由程式編碼成網頁畫面。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-shop fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;店家網站開發&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;屬於店家個人網站可以有更多的內容呈現給顧客。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：特殊卡片排版 end --&gt;

  &lt;!-- Landing Page 設計稿練習：表單響應式卡片排版 start --&gt;
  &lt;section class="py-5 container"&gt;
    &lt;h2 class="text-center mb-4"&gt;方案費用&lt;/h2&gt;
    &lt;div class="row row-cols-1 row-cols-lg-3 g-3 g-lg-4"&gt;
      &lt;div class="col"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-header border-0 text-center text-secondary"&gt;
            小小接案家
          &lt;/div&gt;
          &lt;div class="card-body text-center flex-grow-0"&gt;
            &lt;img src="https://img.freepik.com/free-vector/business-team-planning-working-process-flat-vector-illustration-cartoon-colleagues-talking-sharing-thoughts-smiling-company-office-teamwork-workflow-concept_74855-9813.jpg?w=826&amp;t=st=1647914011~exp=1647914611~hmac=ff2fb348d4926011451bac062af4a3aa4c6a5e1bed69184b16748b972569d90f" class="img-fluid" style="height: 195px;" alt=""&gt;
            &lt;div class="text-info mt-3" style="height: 56px;"&gt;
              NT &lt;strong class="fs-1"&gt;1500&lt;/strong&gt; /天
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;ul class="list-group list-group-flush border-top border-bottom"&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 一天工作時間 4 小時
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 不接受急件
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 單一服務需求
            &lt;/li&gt;
          &lt;/ul&gt;
          &lt;div class="card-body d-flex"&gt;
            &lt;button type="button" class="btn btn-info w-100 align-self-end"&gt;選擇方案&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-header border-0 text-center bg-info text-white"&gt;
            接一整天囉
          &lt;/div&gt;
          &lt;div class="card-body text-center flex-grow-0"&gt;
            &lt;img src="https://img.freepik.com/free-vector/company-employees-sharing-thoughts-ideas_74855-5469.jpg?w=826&amp;t=st=1647914017~exp=1647914617~hmac=2b53174196afb7d52d3d7ea5fe1f954ee2909527859840e9930e8f16a6f7fa19" class="img-fluid" style="height: 195px;" alt=""&gt;
            &lt;div class="text-info mt-3" style="height: 56px;"&gt;
              NT &lt;strong class="fs-1"&gt;3500&lt;/strong&gt; /天
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;ul class="list-group list-group-flush border-top border-bottom"&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 一天工作時間 8 小時
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 不接受急件
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 多個服務提供
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 有問題可小部分修改
            &lt;/li&gt;
          &lt;/ul&gt;
          &lt;div class="card-body d-flex"&gt;
            &lt;button type="button" class="btn btn-info w-100 align-self-end"&gt;選擇方案&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-header border-0 text-center text-secondary"&gt;
            盡心盡力的人生
          &lt;/div&gt;
          &lt;div class="card-body text-center flex-grow-0"&gt;
            &lt;img src="https://img.freepik.com/free-vector/customer-giving-quality-feedback_74855-5482.jpg?w=996&amp;t=st=1647914023~exp=1647914623~hmac=c12d3dc02623204a0474a6c26a6782c6d5bc444e4478da5ddbfbf37de2cb7b07" class="img-fluid" style="height: 195px;" alt=""&gt;
            &lt;div class="text-info mt-3 fs-5 d-flex justify-content-center"  style="height: 56px;"&gt;
              &lt;div class=" align-self-center"&gt;
                客製化詢價
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;ul class="list-group list-group-flush border-top border-bottom"&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 一系列的服務、完成，您交辦的客製化專案，歡迎與我們聯繫！
            &lt;/li&gt;
          &lt;/ul&gt;
          &lt;div class="card-body d-flex"&gt;
            &lt;button type="button" class="btn btn-info w-100 align-self-end"&gt;線上諮詢&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：表單響應式卡片排版 end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/card/#kitchen-sink" target="_blank">元件 &gt; 卡片 (Card) &gt; 混合樣式</a></li></ul>



<h4>討論區問題回答</h4>



<p>.card-body 的部分加上 .flex-grow-0 就會改為依內容改變高度，因此兩個 .card-body 的文字大小不同造成高度有些微差異</p>



<p>在 .card-body 固定高度是可以的，也可以針對「客製化詢價」和「NT 666 / 月」設定相同的行高，讓內容的高度相等</p>



<h3 class="has-background" style="background-color:#ff6663">Landing Page 設計稿練習：章節練習說明</h3>



<h4>自我練習製作</h4>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; &lt;span style="color: #333333;"&gt;接案家&lt;/span&gt;&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link active" aria-current="page" href="index.html"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#intro"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#plan"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="qa.html"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info" href="#"&gt;方案購買&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;!-- Landing Page 設計稿練習：Header 圖片 start --&gt;
  &lt;header class="header px-4 py-5 d-flex align-items-lg-center justify-content-center" style="background-image: url(https://images.unsplash.com/photo-1497091071254-cc9b2ba7c48a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=874&amp;q=80);"&gt;
    &lt;div class="text-white text-center"&gt;
      &lt;p class="fs-5"&gt;你是不是也有需要&lt;/p&gt;
      &lt;h1 class="fw-bold"&gt;找個接案家？&lt;/h1&gt;
      &lt;p&gt;想有人幫你做網站開發、設計稿設計、程式編碼，&lt;br&gt;響應式排版、客戶使用者體驗！&lt;br&gt;提供店家在網路上，有更多機會讓更多人可以看到你的店家。&lt;/p&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;!-- Landing Page 設計稿練習：Header 圖片 end --&gt;

  &lt;!-- Landing Page 設計稿練習：多欄式卡片 start --&gt;
  &lt;section class="container py-5" id="intro"&gt;
    &lt;div class="row flex-row-reverse"&gt;
      &lt;div class="col-lg-6  d-flex align-items-center"&gt;
        &lt;div&gt;
          &lt;h2&gt;讓我們幫你建立專屬的網站&lt;/h2&gt;
          &lt;p class="lh-lg text-secondary"&gt;我們有專業的網頁工程師、網頁設計師，&lt;br&gt;也有新星、來自各地的專業人才，&lt;br&gt;幫您製作您心目中的樣式、版型。&lt;br&gt;讓你專注把心力花在你覺得更須優先的事情上！&lt;br&gt;(依專案內容報價、可行性是否接案)&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-6"&gt;
        &lt;img src="https://img.freepik.com/free-vector/cartoon-man-sitting-home-with-laptop_74855-6963.jpg?w=996&amp;t=st=1647914030~exp=1647914630~hmac=31a82c3465d7d99f8f5f546e5b59a34f281c0a3512b6fa5d1d7555376cd43038" class="w-100" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：多欄式卡片 end --&gt;

  &lt;!-- Landing Page 設計稿練習：特殊卡片排版 start --&gt;
  &lt;section class="py-5" style="background-image: url('https://cdn.stocksnap.io/img-thumbs/960w/white-shapes_HOGKNEMAUX.jpg'); background-size: cover;"&gt;
    &lt;div class="container"&gt;
      &lt;h2 class="text-center mb-4"&gt;你有這些需求嗎？&lt;/h2&gt;
      &lt;div class="row row-cols-1 row-cols-lg-4 g-3 g-lg-4"&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-vector-pen fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;網頁設計&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;對於網頁設計稿，提供多種版型參考製作。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-image fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;圖片應用&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;擁有一堆店家相關的產品、活動，沒有地方可以使用。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-code fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;程式編碼&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;網頁設計搞切版，經由程式編碼成網頁畫面。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="col"&gt;
          &lt;div class="card border-0 shadow h-100"&gt;
            &lt;div class="card-body text-center py-4"&gt;
              &lt;i class="bi bi-shop fs-s-48 text-info"&gt;&lt;/i&gt;
              &lt;h3 class="h4"&gt;店家網站開發&lt;/h3&gt;
              &lt;p class="text-secondary card-text lh-lg"&gt;屬於店家個人網站可以有更多的內容呈現給顧客。&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：特殊卡片排版 end --&gt;

  &lt;!-- Landing Page 設計稿練習：表單響應式卡片排版 start --&gt;
  &lt;section class="py-5 container" id="plan"&gt;
    &lt;h2 class="text-center mb-4"&gt;方案費用&lt;/h2&gt;
    &lt;div class="row row-cols-1 row-cols-lg-3 g-3 g-lg-4"&gt;
      &lt;div class="col"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-header border-0 text-center text-secondary"&gt;
            小小接案家
          &lt;/div&gt;
          &lt;div class="card-body text-center flex-grow-0"&gt;
            &lt;img src="https://img.freepik.com/free-vector/business-team-planning-working-process-flat-vector-illustration-cartoon-colleagues-talking-sharing-thoughts-smiling-company-office-teamwork-workflow-concept_74855-9813.jpg?w=826&amp;t=st=1647914011~exp=1647914611~hmac=ff2fb348d4926011451bac062af4a3aa4c6a5e1bed69184b16748b972569d90f" class="img-fluid" style="height: 195px;" alt=""&gt;
            &lt;div class="text-info mt-3" style="height: 56px;"&gt;
              NT &lt;strong class="fs-1"&gt;1500&lt;/strong&gt; /天
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;ul class="list-group list-group-flush border-top border-bottom"&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 一天工作時間 4 小時
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 不接受急件
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 單一服務需求
            &lt;/li&gt;
          &lt;/ul&gt;
          &lt;div class="card-body d-flex"&gt;
            &lt;button type="button" class="btn btn-info w-100 align-self-end"&gt;選擇方案&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-header border-0 text-center bg-info text-white"&gt;
            接一整天囉
          &lt;/div&gt;
          &lt;div class="card-body text-center flex-grow-0"&gt;
            &lt;img src="https://img.freepik.com/free-vector/company-employees-sharing-thoughts-ideas_74855-5469.jpg?w=826&amp;t=st=1647914017~exp=1647914617~hmac=2b53174196afb7d52d3d7ea5fe1f954ee2909527859840e9930e8f16a6f7fa19" class="img-fluid" style="height: 195px;" alt=""&gt;
            &lt;div class="text-info mt-3" style="height: 56px;"&gt;
              NT &lt;strong class="fs-1"&gt;3500&lt;/strong&gt; /天
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;ul class="list-group list-group-flush border-top border-bottom"&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 一天工作時間 8 小時
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 不接受急件
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 多個服務提供
            &lt;/li&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 有問題可小部分修改
            &lt;/li&gt;
          &lt;/ul&gt;
          &lt;div class="card-body d-flex"&gt;
            &lt;button type="button" class="btn btn-info w-100 align-self-end"&gt;選擇方案&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-header border-0 text-center text-secondary"&gt;
            盡心盡力的人生
          &lt;/div&gt;
          &lt;div class="card-body text-center flex-grow-0"&gt;
            &lt;img src="https://img.freepik.com/free-vector/customer-giving-quality-feedback_74855-5482.jpg?w=996&amp;t=st=1647914023~exp=1647914623~hmac=c12d3dc02623204a0474a6c26a6782c6d5bc444e4478da5ddbfbf37de2cb7b07" class="img-fluid" style="height: 195px;" alt=""&gt;
            &lt;div class="text-info mt-3 fs-5 d-flex justify-content-center"  style="height: 56px;"&gt;
              &lt;div class=" align-self-center"&gt;
                客製化詢價
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;ul class="list-group list-group-flush border-top border-bottom"&gt;
            &lt;li class="list-group-item text-secondary ps-5"&gt;
              &lt;i class="bi bi-check-lg text-info position-absolute start-0 ms-3"&gt;&lt;/i&gt; 一系列的服務、完成，您交辦的客製化專案，歡迎與我們聯繫！
            &lt;/li&gt;
          &lt;/ul&gt;
          &lt;div class="card-body d-flex"&gt;
            &lt;button type="button" class="btn btn-info w-100 align-self-end"&gt;線上諮詢&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Landing Page 設計稿練習：表單響應式卡片排版 end --&gt;

  &lt;!-- 自行練習製作 練習和 footer start --&gt;
  &lt;section class="py-5 container"&gt;
    &lt;h2 class="text-center mb-4"&gt;需要可以聯絡我們&lt;/h2&gt;
    &lt;div class="row row-cols-1 row-cols-lg-3 g-3 g-lg-4 justify-content-center"&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-telephone-fill text-info me-2"&gt;&lt;/i&gt; 06-222-3333
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-facebook text-info me-2"&gt;&lt;/i&gt; 我就是個接案家
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-question-lg text-info me-2"&gt;&lt;/i&gt; 常見問題
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;footer class="bg-secondary text-white py-4"&gt;
    &lt;div class="container"&gt;
      &lt;p class="text-center m-0"&gt;Copyright © 2022 接案家.All rights reserved.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/footer&gt;
  &lt;!-- 自行練習製作 練習和 footer end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// qa.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; &lt;span style="color: #333333;"&gt;接案家&lt;/span&gt;&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#intro"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#plan"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link active" aria-current="page" href="qa.html"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info" href="#"&gt;方案購買&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;!-- 自行練習製作 Q&amp;A start --&gt;
  &lt;section class="py-5" style="background-image: url('https://cdn.stocksnap.io/img-thumbs/960w/white-shapes_HOGKNEMAUX.jpg'); background-size: cover;"&gt;
    &lt;div class="container"&gt;
      &lt;h3 class="text-center text-info fw-bold mb-1 fs-6"&gt;Q&amp;A&lt;/h3&gt;
      &lt;h2 class="text-center mb-4"&gt;常見問題&lt;/h2&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  
  &lt;section class="container py-5"&gt;
    &lt;div class="row justify-content-center"&gt;
      &lt;div class="col-lg-9"&gt;
        &lt;div class="accordion" id="accordionExample"&gt;
          &lt;div class="accordion-item"&gt;
            &lt;h2 class="accordion-header" id="headingOne"&gt;
              &lt;button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne"&gt;
                方案服務內容可以調整嗎？
              &lt;/button&gt;
            &lt;/h2&gt;
            &lt;div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample"&gt;
              &lt;div class="accordion-body"&gt;
                討論確定後，開始製作後只能小部分修改。太多修改部分，需另外加購方案天數。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="accordion-item"&gt;
            &lt;h2 class="accordion-header" id="headingTwo"&gt;
              &lt;button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo"&gt;
                小小接案家、接一整天囉兩者的差異？
              &lt;/button&gt;
            &lt;/h2&gt;
            &lt;div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample"&gt;
              &lt;div class="accordion-body"&gt;
                小小接案家是一天工作時間為 4 小時。&lt;br&gt;
                接一整天囉是一天工作時間為 8 小時。&lt;br&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="accordion-item"&gt;
            &lt;h2 class="accordion-header" id="headingThree"&gt;
              &lt;button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree"&gt;
                付款方式有哪些呢？
              &lt;/button&gt;
            &lt;/h2&gt;
            &lt;div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample"&gt;
              &lt;div class="accordion-body"&gt;
                現金、轉帳為主，其他方式暫不支援。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- 自行練習製作 Q&amp;A end --&gt;

  &lt;!-- 自行練習製作 聯絡和 footer start --&gt;
  &lt;section class="py-5 container"&gt;
    &lt;h2 class="text-center mb-4"&gt;需要可以聯絡我們&lt;/h2&gt;
    &lt;div class="row row-cols-1 row-cols-lg-3 g-3 g-lg-4 justify-content-center"&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-telephone-fill text-info me-2"&gt;&lt;/i&gt; 06-222-3333
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-facebook text-info me-2"&gt;&lt;/i&gt; 我就是個接案家
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-question-lg text-info me-2"&gt;&lt;/i&gt; 常見問題
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;footer class="bg-secondary text-white py-4"&gt;
    &lt;div class="container"&gt;
      &lt;p class="text-center m-0"&gt;Copyright © 2022 接案家.All rights reserved.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/footer&gt;
  &lt;!-- 自行練習製作 聯絡和 footer end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// stylesheets/helpers/_variables.scss

// scss-docs-start theme-color-variables
$primary:       $blue !default;
$secondary:     $gray-600 !default;
$success:       $green !default;
$info:          #4a6fa5; // $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-900 !default;
// scss-docs-end theme-color-variables</code></pre>



<h4>課程章節練習說明</h4>



<pre class="wp-block-code"><code>// payment.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; &lt;span style="color: #333333;"&gt;接案家&lt;/span&gt;&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#intro"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#plan"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="qa.html"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info active" aria-current="page" href="payment.html"&gt;方案購買&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;section class="py-5" style="background-image: url('https://cdn.stocksnap.io/img-thumbs/960w/white-shapes_HOGKNEMAUX.jpg'); background-size: cover;"&gt;
    &lt;div class="container"&gt;
      &lt;h4 class="text-center text-info fw-bold"&gt;EXTRA EARN&lt;/h3&gt;
      &lt;h2 class="text-center mb-4"&gt;開始找個接案家&lt;/h2&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;!-- Langing Page 設計稿練習：章節練習說明 start --&gt;
  &lt;section class="py-5 container"&gt;
    &lt;div class="row justify-content-center"&gt;
      &lt;div class="col-lg-8"&gt;
        &lt;form action="" class="p-lg-5 shadow-lg"&gt;
          &lt;h3 class="deco-line mb-3"&gt;選擇方案&lt;/h3&gt;
          &lt;div class="row row-cols-1 row-cols-lg-3"&gt;
            &lt;div class="col"&gt;
              &lt;button type="button" class="btn btn-outline-info w-100 btn-lg py-3 text-dark"&gt;
                小小接案家&lt;br class="d-none d-lg-block"&gt;
                NT 1500 /天
              &lt;/button&gt;
            &lt;/div&gt;
            &lt;div class="col"&gt;
              &lt;button type="button" class="btn btn-outline-info w-100 btn-lg py-3 text-dark"&gt;
                接一整天囉&lt;br class="d-none d-lg-block"&gt;
                NT 3500 /天
              &lt;/button&gt;
            &lt;/div&gt;
            &lt;div class="col"&gt;
              &lt;button type="button" class="btn btn-outline-info w-100 btn-lg py-3 text-dark active btn-special"&gt;
                盡心盡力的人生&lt;br class="d-none d-lg-block"&gt;
                客製化詢價
              &lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Langing Page 設計稿練習：章節練習說明 end --&gt;

  &lt;!-- 自行練習製作 練習和 footer start --&gt;
  &lt;section class="py-5 container"&gt;
    &lt;h2 class="text-center mb-4"&gt;需要可以聯絡我們&lt;/h2&gt;
    &lt;div class="row row-cols-1 row-cols-lg-3 g-3 g-lg-4 justify-content-center"&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-telephone-fill text-info me-2"&gt;&lt;/i&gt; 06-222-3333
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-facebook text-info me-2"&gt;&lt;/i&gt; 我就是個接案家
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-question-lg text-info me-2"&gt;&lt;/i&gt; 常見問題
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;footer class="bg-secondary text-white py-4"&gt;
    &lt;div class="container"&gt;
      &lt;p class="text-center m-0"&gt;Copyright © 2022 接案家.All rights reserved.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/footer&gt;
  &lt;!-- 自行練習製作 練習和 footer end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// stylesheet/helpers/_utilities.scss

    // scss-docs-start utils-shadow
    // shadow-lg(尺寸 → 中斷點)
    "shadow": (
      property: box-shadow,
      class: shadow,
      values: (
        null: $box-shadow,
        sm: $box-shadow-sm,
        // lg: $box-shadow-lg,
        none: none,
      )
    ),
    // scss-docs-end utils-shadow</code></pre>



<pre class="wp-block-code"><code>// stylesheets/components/_deco-line.scss

.deco-line {
  padding-left: 1rem;
  position: relative;
  &amp;::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    width: 3px;
    background-color: $info;
  }
}</code></pre>



<p>&amp; 直接把上面的 .deco-line 層級繼承過來。</p>



<pre class="wp-block-code"><code>// stylesheets/components/_custom-btn.scss

.btn-special {
  &amp;.active {
    box-shadow: $box-shadow-sm;
  }
}</code></pre>



<pre class="wp-block-code"><code>// all.scss

// Configuration
@import "../node_modules/bootstrap/scss/functions";
@import "./helpers/variables";
@import "./helpers/utilities";

@import "../node_modules/bootstrap/scss/mixins";

// Layout &amp; components
@import "../node_modules/bootstrap/scss/root";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/tables";
@import "../node_modules/bootstrap/scss/forms";
@import "../node_modules/bootstrap/scss/buttons";
@import "../node_modules/bootstrap/scss/transitions";
@import "../node_modules/bootstrap/scss/dropdown";
@import "../node_modules/bootstrap/scss/button-group";
@import "../node_modules/bootstrap/scss/nav";
@import "../node_modules/bootstrap/scss/navbar";
@import "../node_modules/bootstrap/scss/card";
@import "../node_modules/bootstrap/scss/accordion";
@import "../node_modules/bootstrap/scss/breadcrumb";
@import "../node_modules/bootstrap/scss/pagination";
@import "../node_modules/bootstrap/scss/badge";
@import "../node_modules/bootstrap/scss/alert";
@import "../node_modules/bootstrap/scss/progress";
@import "../node_modules/bootstrap/scss/list-group";
@import "../node_modules/bootstrap/scss/close";
@import "../node_modules/bootstrap/scss/toasts";
@import "../node_modules/bootstrap/scss/modal";
@import "../node_modules/bootstrap/scss/tooltip";
@import "../node_modules/bootstrap/scss/popover";
@import "../node_modules/bootstrap/scss/carousel";
@import "../node_modules/bootstrap/scss/spinners";
@import "../node_modules/bootstrap/scss/offcanvas";
@import "../node_modules/bootstrap/scss/placeholders";

// Helpers
@import "../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../node_modules/bootstrap/scss/utilities/api";

// Custom Components
@import "./components/header";
@import "./components/deco-line";
@import "./components/custom-btn";</code></pre>



<h4>自我練習製作</h4>



<pre class="wp-block-code"><code>// payment.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-tw"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;接案家&lt;/title&gt;
  &lt;link rel="stylesheet" href="./stylesheets/all.css"&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"&gt;

  &lt;link rel="preconnect" href="https://fonts.googleapis.com/"&gt;
  &lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&gt;
  &lt;link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap" rel="stylesheet"&gt;
  &lt;style&gt;
    body {
      font-family: 'Noto Sans TC', sans-serif;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;!-- Landing Page 設計稿練習：導覽列製作 start --&gt;
  &lt;nav class="navbar navbar-expand-lg navbar-light bg-white"&gt;
    &lt;div class="container"&gt;
      &lt;a class="navbar-brand" href="#"&gt;&lt;i class="bi bi-house-fill text-info"&gt;&lt;/i&gt; &lt;span style="color: #333333;"&gt;接案家&lt;/span&gt;&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav ms-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html"&gt;首頁&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#intro"&gt;服務介紹&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="index.html#plan"&gt;方案費用&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item mx-3"&gt;
            &lt;a class="nav-link" href="qa.html"&gt;常見問題&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="btn btn-info active" aria-current="page" href="payment.html"&gt;方案購買&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Landing Page 設計稿練習：導覽列製作 end --&gt;

  &lt;section class="py-5" style="background-image: url('https://cdn.stocksnap.io/img-thumbs/960w/white-shapes_HOGKNEMAUX.jpg'); background-size: cover;"&gt;
    &lt;div class="container"&gt;
      &lt;h4 class="text-center text-info fw-bold"&gt;EXTRA EARN&lt;/h3&gt;
      &lt;h2 class="text-center mb-4"&gt;開始找個接案家&lt;/h2&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;!-- Langing Page 設計稿練習：章節練習說明 start --&gt;
  &lt;section class="py-5 container"&gt;
    &lt;div class="row justify-content-center"&gt;
      &lt;div class="col-lg-8 shadow"&gt;
        &lt;form action="" class="p-lg-5 shadow-lg"&gt;
          &lt;h3 class="deco-line mb-3"&gt;選擇方案&lt;/h3&gt;
          &lt;div class="row row-cols-1 row-cols-lg-3 g-2 mb-5"&gt;
            &lt;div class="col"&gt;
              &lt;button type="button" class="btn btn-outline-info w-100 btn-lg py-3 text-dark"&gt;
                小小接案家&lt;br class="d-none d-lg-block"&gt;
                NT 1500 /天
              &lt;/button&gt;
            &lt;/div&gt;
            &lt;div class="col"&gt;
              &lt;button type="button" class="btn btn-outline-info w-100 btn-lg py-3 text-dark"&gt;
                接一整天囉&lt;br class="d-none d-lg-block"&gt;
                NT 3500 /天
              &lt;/button&gt;
            &lt;/div&gt;
            &lt;div class="col"&gt;
              &lt;button type="button" class="btn btn-outline-info w-100 btn-lg py-3 text-white active btn-special"&gt;
                盡心盡力的人生&lt;br class="d-none d-lg-block"&gt;
                客製化詢價
              &lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;!-- 自行練習製作 表單 start --&gt;
          &lt;h3 class="deco-line mb-3"&gt;填寫資料&lt;/h3&gt;
          &lt;div class="row g-3"&gt;
            &lt;div class="col-md-6"&gt;
              &lt;label for="inputText1" class="form-label"&gt;名字&lt;/label&gt;
              &lt;input type="text" class="form-control" id="inputText1"&gt;
            &lt;/div&gt;
            &lt;div class="col-md-6"&gt;
              &lt;label for="inputText2" class="form-label"&gt;姓氏&lt;/label&gt;
              &lt;input type="text" class="form-control" id="inputText2"&gt;
            &lt;/div&gt;
            &lt;div class="col-12"&gt;
              &lt;label for="inputTel1" class="form-label"&gt;手機號碼&lt;/label&gt;
              &lt;input type="tel" class="form-control" id="inputTel1" placeholder="範例：0989-222-333"&gt;
            &lt;/div&gt;
            &lt;div class="col-12"&gt;
              &lt;label for="inputEmail1" class="form-label"&gt;電子郵件&lt;/label&gt;
              &lt;input type="text" class="form-control" id="inputEmail1" placeholder="範例：receiver@gmail.com"&gt;
            &lt;/div&gt;
            &lt;div class="col-12"&gt;
              &lt;label for="inputAddress1" class="form-label"&gt;住址&lt;/label&gt;
              &lt;input type="text" class="form-control" id="inputAddress1"&gt;
            &lt;/div&gt;
            &lt;div class="col-12"&gt;
              &lt;label for="inputTime" class="form-label"&gt;方便聯繫時間&lt;/label&gt;
              &lt;select id="inputTime" class="form-select"&gt;
                &lt;option selected&gt;13:00- 17:00&lt;/option&gt;
                &lt;option&gt;09:00-12:00&lt;/option&gt;
              &lt;/select&gt;
            &lt;/div&gt;
            &lt;div class="col-12"&gt;
              &lt;label for="inputAddress2" class="form-label"&gt;住址&lt;/label&gt;
              &lt;input type="text" class="form-control" id="inputAddress2"&gt;
            &lt;/div&gt;
            &lt;div class="col-12"&gt;
              &lt;div class="form-check p-0"&gt;
                &lt;label class="form-label"&gt;加購服務&lt;/label&gt;
              &lt;/div&gt;
              &lt;div class="form-check form-check-inline"&gt;
                &lt;input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1"&gt;
                &lt;label class="form-check-label" for="inlineCheckbox1"&gt;設計諮詢 1 次&lt;/label&gt;
              &lt;/div&gt;
              &lt;div class="form-check form-check-inline"&gt;
                &lt;input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="option2"&gt;
                &lt;label class="form-check-label" for="inlineCheckbox2"&gt;功能諮詢 1 次&lt;/label&gt;
              &lt;/div&gt;
              &lt;div class="form-check form-check-inline"&gt;
                &lt;input class="form-check-input" type="checkbox" id="inlineCheckbox3" value="option3"&gt;
                &lt;label class="form-check-label" for="inlineCheckbox3"&gt;錯誤諮詢 1 次&lt;/label&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="col-12 mb-2"&gt;
              &lt;label for="exampleFormControlTextarea1" class="form-label"&gt;備註說明&lt;/label&gt;
              &lt;textarea class="form-control" id="exampleFormControlTextarea1" rows="3"&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="col-12"&gt;
              &lt;button type="submit" class="btn btn-info w-100 py-2 text-dark"&gt;選擇方案&lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;!-- 自行練習製作 表單 end --&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  &lt;!-- Langing Page 設計稿練習：章節練習說明 end --&gt;

  &lt;!-- 自行練習製作 練習和 footer start --&gt;
  &lt;section class="py-5 container"&gt;
    &lt;h2 class="text-center mb-4"&gt;需要可以聯絡我們&lt;/h2&gt;
    &lt;div class="row row-cols-1 row-cols-lg-3 g-3 g-lg-4 justify-content-center"&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-telephone-fill text-info me-2"&gt;&lt;/i&gt; 06-222-3333
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-facebook text-info me-2"&gt;&lt;/i&gt; 我就是個接案家
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col-lg-3 col-9"&gt;
        &lt;div class="card border-0 shadow h-100"&gt;
          &lt;div class="card-body text-center py-4 fs-4"&gt;
            &lt;a href="#" class="text-decoration-none link-dark stretched-link"&gt;
              &lt;i class="bi bi-question-lg text-info me-2"&gt;&lt;/i&gt; 常見問題
            &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;footer class="bg-secondary text-white py-4"&gt;
    &lt;div class="container"&gt;
      &lt;p class="text-center m-0"&gt;Copyright © 2022 接案家.All rights reserved.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/footer&gt;
  &lt;!-- 自行練習製作 練習和 footer end --&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h2 class="has-background" style="background-color:#ff6663">CH15 – 最終挑戰</h2>



<h3>最終作業繳交說明</h3>



<h3>最終挑戰說明</h3>



<h3>最終挑戰課程資源</h3>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Bootstrap 5 網頁切版整合術(1)</title>
		<link>/wordpress_blog/bs5-weblayout-1/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Mon, 28 Mar 2022 05:11:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=320</guid>

					<description><![CDATA[課程學習：六角學院 CH2 – 環境建置 Bootstrap 文 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>課程學習：<a href="https://courses.hexschool.com/p/bootstrap-5" target="_blank" rel="noreferrer noopener">六角學院</a></p>



<h2>CH2 – 環境建置</h2>



<h3>Bootstrap 文件介紹</h3>



<figure class="wp-block-table"><table><tbody><tr><td>Getting started</td><td>快速開始</td></tr><tr><td>Customize</td><td>自定義</td></tr><tr><td>Layout</td><td>排版</td></tr><tr><td>Content</td><td>內容</td></tr><tr><td>Form</td><td>表單</td></tr><tr><td>Components</td><td>元件</td></tr><tr><td>Helpers</td><td>工具</td></tr><tr><td>Utilities</td><td>通用類別</td></tr><tr><td>Extend</td><td>擴增</td></tr><tr><td>About</td><td>關於</td></tr></tbody></table><figcaption>中英文對照</figcaption></figure>



<h3>Bootstrap 中英文文件連結</h3>



<ul><li><a href="https://getbootstrap.com/" target="_blank" rel="noreferrer noopener">官方原文 Bootstrap</a></li><li><a href="https://bootstrap5.hexschool.com/" target="_blank" rel="noreferrer noopener">六角學院繁體中文版本</a></li></ul>



<h3>VSCode 基礎環境建置</h3>



<h3>VSCode 與相關資源連結</h3>



<ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">VSCode 官方網站</a></li></ul>



<p>相關套件:</p>



<ul><li><a rel="noreferrer noopener" href="https://www.casper.tw/development/2019/12/01/vscode-chinese/" target="_blank">繁體中文版安裝說明</a></li><li><a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank">Live Server</a></li><li><a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass" target="_blank">Live Sass (後方課程會運用到)</a></li><li><a rel="noreferrer noopener" href="https://www.casper.tw/development/2020/12/13/vscode-extension/" target="_blank">更多參考套件</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=andischerer.theme-atom-one-dark" target="_blank" rel="noreferrer noopener">老師使用的樣式主題 Atom One Dark</a></li></ul>



<h3>語系設置與 Bootstrap CDN</h3>



<ul><li><a href="https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry" target="_blank" rel="noreferrer noopener">語系參考文件</a></li></ul>



<pre class="wp-block-code"><code>// index.html - 1 語系

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-TW"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;p lang="zh-TW"&gt;繁體台灣 zh-TW：骨，花、學、崎、雨&lt;/p&gt;
  &lt;p lang="zh-HK"&gt;繁體香港 zh-HK：骨，花，學、崎、雨&lt;/p&gt;
  &lt;p lang="zh-CN"&gt;簡中 zh-CN：骨，花、學、崎、雨&lt;/p&gt;
  &lt;p lang="ja"&gt;日文 ja：骨、花、學、崎、雨&lt;/p&gt;
  &lt;hr&gt;
  &lt;p lang="zh-TW"&gt;繁體台灣 zh-TW：骨，花、學、崎、雨&lt;/p&gt;
  &lt;p lang="zh-Hant-TW"&gt;繁體台灣 zh-Hant-TW：骨，花、學、崎、雨&lt;/p&gt;
  &lt;p lang="zh-HK"&gt;繁體香港 zh-HK：骨，花，學、崎、雨&lt;/p&gt;
  &lt;p lang="zh-Hant-HK"&gt;繁體香港 zh-Hant-HK：骨，花，學、崎、雨&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// index.html - 2

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-TW"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Bootstrap 5&lt;/title&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous"&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;button type="button" class="btn btn-primary"&gt;Primary&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Secondary&lt;/button&gt;
  &lt;button type="button" class="btn btn-success"&gt;Success&lt;/button&gt;
  &lt;button type="button" class="btn btn-danger"&gt;Danger&lt;/button&gt;
  &lt;button type="button" class="btn btn-warning"&gt;Warning&lt;/button&gt;
  &lt;button type="button" class="btn btn-info"&gt;Info&lt;/button&gt;
  &lt;button type="button" class="btn btn-light"&gt;Light&lt;/button&gt;
  &lt;button type="button" class="btn btn-dark"&gt;Dark&lt;/button&gt;

  &lt;button type="button" class="btn btn-link"&gt;Link&lt;/button&gt;

  &lt;hr&gt;

  &lt;button type="button" class="btn btn-outline-primary" data-bs-toggle="button" autocomplete="off"&gt;Toggle button&lt;/button&gt;
  &lt;button type="button" class="btn btn-outline-primary active" data-bs-toggle="button" autocomplete="off" aria-pressed="true"&gt;Active toggle button&lt;/button&gt;
  &lt;button type="button" class="btn btn-outline-primary" disabled data-bs-toggle="button" autocomplete="off"&gt;Disabled toggle button&lt;/button&gt;


  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/getting-started/introduction/" target="_blank" rel="noreferrer noopener">快速開始 &gt; 簡介</a></li></ul>



<h3>CSS 的 Class 運用</h3>



<h4>樣式補充說明</h4>



<pre class="wp-block-code"><code>&lt;button type="button" class="btn btn-primary"&gt;Primary&lt;/button&gt;</code></pre>



<p>Bootstrap 中會加入大量的 Class 來套用樣式，每一個 Class 都代表了部分的結構、樣式、狀態等等…</p>



<p>Class 其中的:</p>



<ul><li>class 是 HTML 標籤的屬性名稱 – 每個標籤只能有一個</li><li>btn 則是其值 – 每個 Class 可以用空白隔開多個值</li></ul>



<h3 class="has-background" style="background-color:#ff6663">快速體驗 Bootstrap 建立一個網站</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="zh-TW"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Bootstrap 5&lt;/title&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous"&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;nav class="navbar navbar-expand-lg navbar-dark bg-dark"&gt;
    &lt;div class="container-fluid"&gt;
      &lt;a class="navbar-brand" href="#"&gt;Navbar&lt;/a&gt;
      &lt;button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav me-auto mb-2 mb-lg-0"&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link active" aria-current="page" href="#"&gt;Home&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link" href="#"&gt;Link&lt;/a&gt;
          &lt;/li&gt;
          &lt;li class="nav-item dropdown"&gt;
            &lt;a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false"&gt;
              Dropdown
            &lt;/a&gt;
            &lt;ul class="dropdown-menu" aria-labelledby="navbarDropdown"&gt;
              &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;Action&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;Another action&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;hr class="dropdown-divider"&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a class="dropdown-item" href="#"&gt;Something else here&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;a class="nav-link disabled"&gt;Disabled&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        &lt;form class="d-flex"&gt;
          &lt;input class="form-control me-2" type="search" placeholder="Search" aria-label="Search"&gt;
          &lt;button class="btn btn-outline-success" type="submit"&gt;Search&lt;/button&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;

  &lt;div class="container my-4"&gt;
    &lt;div class="row row-cols-1 row-cols-md-2 g-4"&gt;
      &lt;div class="col"&gt;
        &lt;div class="card"&gt;
          &lt;img src="https://images.unsplash.com/photo-1645516956968-dee62f4a9090?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80" class="card-img-top" alt="..."&gt;
          &lt;div class="card-body"&gt;
            &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
            &lt;p class="card-text"&gt;This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card"&gt;
          &lt;img src="https://images.unsplash.com/photo-1645516956968-dee62f4a9090?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80" class="card-img-top" alt="..."&gt;
          &lt;div class="card-body"&gt;
            &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
            &lt;p class="card-text"&gt;This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card"&gt;
          &lt;img src="https://images.unsplash.com/photo-1645516956968-dee62f4a9090?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80" class="card-img-top" alt="..."&gt;
          &lt;div class="card-body"&gt;
            &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
            &lt;p class="card-text"&gt;This is a longer card with supporting text below as a natural lead-in to additional content.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="col"&gt;
        &lt;div class="card"&gt;
          &lt;img src="https://images.unsplash.com/photo-1645516956968-dee62f4a9090?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=870&amp;q=80" class="card-img-top" alt="..."&gt;
          &lt;div class="card-body"&gt;
            &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
            &lt;p class="card-text"&gt;This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;footer class="bg-light py-4"&gt;
    &lt;div class="container"&gt;
      &lt;p class="mb-0"&gt;這裡是 Footer&lt;/p&gt;
    &lt;/div&gt;
  &lt;/footer&gt;

  &lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h2>CH3 – Bootstrap 文件介紹</h2>



<h3>知識點：box-sizing</h3>



<p>由於 padding 及 border 會改變元素運算後的寬度，避免麻煩的計算，Bootstrap 預設載入 box-sizing: border-box</p>



<p><strong>定義的寬度 = 實際呈現的寬度</strong></p>



<figure class="wp-block-gallery has-nested-images columns-2 is-cropped">
<figure class="wp-block-image size-large"><img loading="lazy" width="1275" height="801" data-id="327"  src="/wordpress_blog/wp-content/uploads/2022/04/border-box.png" alt="" class="wp-image-327"/><figcaption>box-sizing: content-box</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1369" height="807" data-id="326"  src="/wordpress_blog/wp-content/uploads/2022/04/content-box.png" alt="" class="wp-image-326"/><figcaption>box-sizing: border-box</figcaption></figure>
</figure>



<h3>知識點：CSS Variables (CSS 變數)</h3>



<pre class="wp-block-code"><code>// 範例程式碼

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Bootstrap 5&lt;/title&gt;
  &lt;style&gt;
    /* 全域 */
    :root {
      --primary: #69f0ae;
    }

    .box {
      height: 100px;
      width: 100px;
      padding: 20px;
      border: 5px solid #eee;
    }

    .bg-primary {
      background-color: var(--primary);
    }

    /* 進階技巧 */
    .local {
      --primary: orange;
    }

  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="box bg-primary"&gt;&lt;/div&gt;
  &lt;div class="local"&gt;
    &lt;div class="box bg-primary"&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>知識點：rem 單位</h3>



<p>網頁文字預設大小是 16px。</p>



<p>rem 與 em 的差別。</p>



<p>最外層設定會使用 :root 或者 html</p>



<pre class="wp-block-code"><code>// css_rem_em.html - 範例程式碼

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Bootstrap 5&lt;/title&gt;
  &lt;style&gt;
    html {
      font-size: 20px;
    }
    .em2 {
      font-size: 2em;
    }
    .rem2 {
      font-size: 2rem;
    }
    .py-1 {
      padding-top: 1rem;
      padding-bottom: 1rem;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div&gt;
    Lorem, ipsum.
  &lt;/div&gt;
  &lt;div class="em2"&gt;
    Lorem, ipsum.
    &lt;strong class="em2"&gt;Lorem, ipsum.&lt;/strong&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;div class="rem2 py-1"&gt;
    Lorem, ipsum.
    &lt;strong class="rem2"&gt;Lorem, ipsum.&lt;/strong&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>知識點：系統預設字體</h3>



<h4>樣式補充說明</h4>



<figure class="wp-block-image size-full"><img loading="lazy" width="1536" height="601" src="/wordpress_blog/wp-content/uploads/2022/04/樣式補充說明.png" alt="" class="wp-image-329"/><figcaption>樣式補充說明</figcaption></figure>



<h4>Bootstrap 預設字體</h4>



<figure class="wp-block-image size-full"><img loading="lazy" width="1511" height="693" src="/wordpress_blog/wp-content/uploads/2022/04/Bootstrap預設字體.png" alt="" class="wp-image-330"/><figcaption>Bootstrap 預設字體</figcaption></figure>



<h3>CSS Reset 做了什麼</h3>



<ul><li><a href="https://github.com/twbs/bootstrap/blob/v5.1.0/dist/css/bootstrap-reboot.css" target="_blank" rel="noreferrer noopener">Reboot 專用 CSS</a></li></ul>



<pre class="wp-block-code"><code>// reboot.html - 範例程式碼

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Bootstrap 5&lt;/title&gt;
  &lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous"&gt;
  &lt;style&gt;
    .box {
      height: 100px;
      width: 100px;
      padding: 20px;
      background-color: #ccc;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;!-- 重點 1: 會套用 Bootstrap 預設字體、字體大小、行間距等等 --&gt;
  &lt;h1&gt;h1. Bootstrap heading&lt;/h1&gt;
  &lt;h2&gt;h2. Bootstrap heading&lt;/h2&gt;

  &lt;!-- 重點 2: 套用 box-sizing --&gt;
  &lt;div class="box"&gt;&lt;/div&gt;

  &lt;!-- 重點 3: 套用 list 等其他標準 Normalize 樣式 --&gt;
  &lt;ul&gt;
    &lt;li&gt;All lists have their top margin removed&lt;/li&gt;
    &lt;li&gt;And their bottom margin normalized&lt;/li&gt;
    &lt;li&gt;
      Nested lists have no bottom margin
      &lt;ul&gt;
        &lt;li&gt;This way they have a more even appearance&lt;/li&gt;
        &lt;li&gt;Particularly when followed by more list items&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The left padding has also been reset&lt;/li&gt;
  &lt;/ul&gt;

  &lt;!-- 重點 4: 包含 Bootstrap 所釋出的變數色彩 --&gt;
  &lt;div class="box" style="background-color: var(--bs-primary);"&gt;

  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/content/reboot/" target="_blank" rel="noreferrer noopener">內容 &gt; 重置</a></li></ul>



<h3>六角學院專屬「Bootstrap 練習手冊」</h3>



<p>使用 ctrl + p 然後把檔名貼上，開啟練習的檔案。</p>



<h3>Bootstrap 5 練習手冊連結</h3>



<ul><li><a href="https://github.com/hexschool/bootstrap5-starter-files" target="_blank" rel="noreferrer noopener">Bootstrap 5 練習手冊</a></li></ul>



<p>解壓縮後請<strong>務必使用 Live Server 開啟</strong>。</p>



<h3>文字運用</h3>



<p>建議使用上使用 &lt;del&gt;、&lt;ins&gt;，避免使用舊的標籤 &lt;s&gt;、&lt;u&gt;。</p>



<p>text-align: left, right, center</p>



<p>left → start、right → end</p>



<p>list-unstyled 開發中常用的 class</p>



<p>dl、dt、dd</p>



<p>格線系統</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/content/typography/" target="_blank" rel="noreferrer noopener">內容 &gt; 文字排版</a></li></ul>



<h3>基本圖片運用</h3>



<p>img-fluid</p>



<p>rounded、img-thumbnail</p>



<p>clearfix、float-start、float-end</p>



<p>mx-auto</p>



<p>text-center</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/content/images/" target="_blank" rel="noreferrer noopener">內容 &gt; 圖片</a></li></ul>



<h3>圖片區</h3>



<p>figure、figure-caption</p>



<p>text-center、text-end</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/content/figures/" target="_blank" rel="noreferrer noopener">內容 &gt; 圖片區</a></li></ul>



<h3>表格運用</h3>



<p>table、thead、tbody、tfoot</p>



<p>table-primary、table-success、table-dark</p>



<p>table-primary、table-secondary、table-success、table-danger、table-warning、table-info、table-light、table-dark</p>



<p>table-striped</p>



<p>table-hover</p>



<p>table-active</p>



<p>table-bordered、border-warning</p>



<p>table-borderless</p>



<p>align-middle、align-top、align-bottom</p>



<p>巢狀</p>



<p>結構: 表頭 thead、表尾 tfoot、tbody、表格標題 caption, caption-top</p>



<p>table-responsive、table-responsive{-sm|-md|-lg|-xl|-xxl}</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/content/tables/" target="_blank">內容 &gt; 表格</a></li><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/utilities/borders/" target="_blank">通用類別 &gt; 邊框</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/vertical-align/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 垂直對齊</a></li></ul>



<h3>測驗：Bootstrap 文件介紹</h3>



<h2>CH4 – Flex 與網格系統介紹</h2>



<h3>基礎格線觀念</h3>



<p>但是網頁並不像是平面設計是靜止不動的，會因為使用者的裝置大小、瀏覽器顯示區域、甚至是操作方式，都會改變內容或者排版。<br><strong>所以說，在網頁設計上的格線尺寸該如何分割?</strong></p>



<p>會以 960px 為基準，也是因為早期電腦螢幕通常為1024px，960px 的設計是最為剛好。<br>而 12 欄則是較多數字的<strong>公倍數</strong>。</p>



<p>12 Column Grid</p>



<ul><li>3 9</li><li>6 6</li><li>3 3 3 3</li></ul>



<p>Total Width、Number of Columns、Gutter on outside、Gutter Width、Column Width</p>



<p>Columns、Count、Width、Gutter</p>



<p>Bootstrap 則是基於此概念作為延伸。</p>



<h4>Bootstrap 5 還有…</h4>



<ol><li>預設包含 12 欄</li><li>除了預設欄以外，亦可使用等比欄位劃分</li><li>包含 5 種預設 Gutter 寬度</li><li>提供欄、列的組合形式</li></ol>



<h3>繪圖軟體與格線之間的關聯性</h3>



<ul><li><a rel="noreferrer noopener" href="https://www.figma.com/" target="_blank">Figma</a></li></ul>



<h3>響應式中斷點</h3>



<p>在 Bootstrap 的格線系統、後面的章節都非常重要。</p>



<p>斷點在特定的寬度會觸發樣式。</p>



<p>Bootstrap 是行動優先。</p>



<p>none、block</p>



<p>技巧: 先思考行動版，再補桌面版。</p>



<p>d-{breakpoint}-{value}</p>



<p>d-none、d-xl-none、d-xxl-none</p>



<p>d-none, d-xl-block</p>



<p>text-center, text-lg-start</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/layout/breakpoints/" target="_blank">排版 &gt; 斷點</a></li><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/utilities/display/" target="_blank">通用類別 &gt; Display</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/text/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 文字</a></li></ul>



<h3>格線容器</h3>



<p>容器就是主要內容放置的區塊。</p>



<h4>Bootstrap 容器概念</h4>



<p>Bootstrap 的 container Class 主要是用來定義最外層的容器<br>在使用上分為兩大類:<br>分別為應對<strong>滿版寬度</strong>及<strong>階段固定寬度</strong>兩種</p>



<h4>container-fluid</h4>



<figure class="wp-block-image size-full"><img loading="lazy" width="1307" height="869" src="/wordpress_blog/wp-content/uploads/2022/04/container-fluid.png" alt="" class="wp-image-333"/><figcaption>container-fluid</figcaption></figure>



<p>如果網頁內容<strong>不需要嚴謹的定義最大寬度</strong><br>可以使用 container-fluid</p>



<p>對於網頁內容寬度的階段美感都很要求<br>且<strong>需要最大寬度的限制</strong>可使用 container</p>



<figure class="wp-block-gallery has-nested-images columns-1">
<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="687" data-id="339"  src="/wordpress_blog/wp-content/uploads/2022/04/container-1.png" alt="" class="wp-image-339"/><figcaption>container-1</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="684" data-id="338"  src="/wordpress_blog/wp-content/uploads/2022/04/container-2.png" alt="" class="wp-image-338"/><figcaption>container-2</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="651" data-id="336"  src="/wordpress_blog/wp-content/uploads/2022/04/container-3.png" alt="" class="wp-image-336"/><figcaption>container-3</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="668" data-id="335"  src="/wordpress_blog/wp-content/uploads/2022/04/container-4.png" alt="" class="wp-image-335"/><figcaption>container-4</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="715" data-id="337"  src="/wordpress_blog/wp-content/uploads/2022/04/container-5.png" alt="" class="wp-image-337"/><figcaption>container-5</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="592" data-id="340"  src="/wordpress_blog/wp-content/uploads/2022/04/container-6.png" alt="" class="wp-image-340"/><figcaption>container-6</figcaption></figure>
</figure>



<p>最常用的是 container、container-fluid</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/layout/containers/" target="_blank" rel="noreferrer noopener">排版 &gt; 容器</a></li></ul>



<h3>欄:上篇</h3>



<p>格線的基本架構 container, row, col</p>



<p>外層至少要有一層 container</p>



<p>網頁開發中出現水平卷軸算是蠻嚴重的失誤。</p>



<p>寬度運用: 限制單欄寬度 (預設為 12 欄)、換行、等寬欄(col)、彈性寬度(col-auto)</p>



<p>col 會自動平均分配剩餘的空間</p>



<p>col-auto 會依據內容調整空間</p>



<p>巢狀</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/layout/columns/" target="_blank" rel="noreferrer noopener">排版 &gt; 欄</a></li></ul>



<h3>欄:下篇</h3>



<p>響應式</p>



<p>技巧: 先思考行動版，再補桌面版。</p>



<p>行動版 &gt; 平板 md &gt; 桌面版 xl</p>



<p>col-6、col-md-4、col-xl-3</p>



<p>行動版是單欄情況下，我們可以不製作 col-12。<br>當有其他 col 中斷點，可不加入 col-12。</p>



<p>推移 (offset): 目前大多會透過 flex 特性推移，offset 的運用情境較少。</p>



<h3>欄與欄的間距: Gutter 觀念說明</h3>



<h4>Gutter 的運作概念</h4>



<p>Gutter 在 CSS 中是如何製作的?</p>



<pre class="wp-block-code"><code>// 範例程式碼

.row {
  margin-right: -0.75rem;
  margin-left: -0.75rem;
}

.col-* {
  padding-right: 0.75rem;
  padding-left: 0.75rem;
}</code></pre>



<pre class="wp-block-code"><code>// Bootstrap 實作的程式碼

.row {
  --bs-gutter-x: 1.5rem;
  margin-right: calc(var(--bs-gutter-x) * -.5);
  margin-left: calc(var(--bs-gutter-x) * -.5);
}

.row &gt; * {
  padding-right: calc(var(--bs-gutter-x) * .5);
  padding-left: calc(var(--bs-gutter-x) * .5);
}</code></pre>



<ol><li>格線系統結構由外而內為 .container, .row, .col-**</li><li>class=”row” 內層建議使用 class=”col-xx”</li><li>最外層，在幫它補一個 class=”container” 吧</li></ol>



<h3>欄與欄的間距: Gutter</h3>



<p>Gutter 的運用: 查看 gutter 的原始碼</p>



<p>可調整的 gutter: 使用 gx-{ 1-5 } 調整水平間距</p>



<p>運用情境: 在內層加上 gx-2</p>



<p>延伸: 垂直 gutter，使用方式: gx, gy, g</p>



<p>延伸: no-gutters，使用 gx-0 移除 gutter</p>



<p>響應式: 桌面版使用大間距、行動版移除間距</p>



<p>行列式: 使用 row-cols-{欄數} 定義內層欄數</p>



<p>運用情境: 使用 row-cols-{中斷點}-{欄數} 來製作不同欄線規劃，桌面版 xl: 4 大欄、平板 md: 3 大欄、行動版 xs: 2 欄</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/layout/gutters/" target="_blank" rel="noreferrer noopener">排版 &gt; Gutter</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">CSS Flex 與格線系統</h3>



<h4>Flex 需要了解的</h4>



<figure class="wp-block-gallery has-nested-images columns-1 is-cropped">
<figure class="wp-block-image size-large"><img loading="lazy" width="1755" height="659" data-id="346"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex01.png" alt="" class="wp-image-346"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1715" height="669" data-id="345"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex02.png" alt="" class="wp-image-345"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1885" height="713" data-id="348"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex03.png" alt="" class="wp-image-348"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1883" height="713" data-id="347"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex04.png" alt="" class="wp-image-347"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1907" height="707" data-id="349"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex05.png" alt="" class="wp-image-349"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1895" height="715" data-id="350"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex06.png" alt="" class="wp-image-350"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1909" height="709" data-id="351"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex07.png" alt="" class="wp-image-351"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1895" height="733" data-id="353"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex08.png" alt="" class="wp-image-353"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1915" height="763" data-id="354"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex09.png" alt="" class="wp-image-354"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1857" height="695" data-id="352"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex10.png" alt="" class="wp-image-352"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1863" height="695" data-id="355"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex11.png" alt="" class="wp-image-355"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1835" height="503" data-id="356"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex12.png" alt="" class="wp-image-356"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1477" height="573" data-id="357"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex13.png" alt="" class="wp-image-357"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1571" height="543" data-id="358"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex14.png" alt="" class="wp-image-358"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1445" height="651" data-id="362"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex15.png" alt="" class="wp-image-362"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1413" height="613" data-id="359"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex16.png" alt="" class="wp-image-359"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1787" height="401" data-id="360"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex17.png" alt="" class="wp-image-360"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1763" height="509" data-id="361"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex18.png" alt="" class="wp-image-361"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1771" height="521" data-id="363"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex19.png" alt="" class="wp-image-363"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1891" height="657" data-id="366"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex20.png" alt="" class="wp-image-366"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1921" height="675" data-id="364"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex21.png" alt="" class="wp-image-364"/></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1921" height="667" data-id="365"  src="/wordpress_blog/wp-content/uploads/2022/04/Flex22.png" alt="" class="wp-image-365"/><figcaption>Flex 01~22</figcaption></figure>
</figure>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/flex/" target="_blank" rel="noreferrer noopener">通用類別 &gt; Flex</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">Utilities 通用類別: 間隔 Spacing</h3>



<p>{property}{sides}-{size}、{property}{sides}-{breakpoint}-{size}</p>



<p>property 設定: m、p</p>



<p>sides 設定: t、b、s、e、x、y、blank</p>



<p>size 設定: 0、1、2、3、4、5</p>



<p>基本運用: 為以下區塊推移不同水平距離、為以下區塊推移垂直距離、清除文字的向下 margin、為按鈕加上更大的水平 padding。</p>



<p>水平置中 margin-left: auto; margin-right: auto;、mx-auto</p>



<p>負值運用，注意：此功能預設是被關閉的，需要調整設定檔案才會開啟，未來課程會介紹如何調整 Bootstrap Sass 即可開啟此功能。</p>



<p>Gap: display grid 適合排版極為複雜的格線，大部分的網頁運用建議還是以 Bootstrap 網格系統為主。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/spacing/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 間距</a></li></ul>



<h3 class="has-palette-1-color-5-background-color has-background">Utilities 通用類別: Flex</h3>



<p>啟用 flex，flex 包含行內及區塊兩種 (大多實戰以區塊為主，行內則較少使用)</p>



<p>方向性:<br>使用&nbsp;<code>.flex-row</code>&nbsp;來設定水平的方向(瀏覽器預設值)，或是使用&nbsp;<code>.flex-row-reverse</code>&nbsp;來作水平方向的反轉。<br>使用&nbsp;<code>.flex-column</code>&nbsp;設置垂直方向，或者使用&nbsp;<code>.flex-column-reverse</code>&nbsp;作垂直方向的反轉。</p>



<p>Justify content，包含以下的 justify content 運用方式<br>justify-content-start、justify-content-end、justify-content-center、justify-content-between、justify-content-around、justify-content-evenly</p>



<p>Align items，包含以下 align-items 運用方式<br>align-items-start、align-items-end、align-items-center、align-items-baseline、align-items-stretch</p>



<p>Align self，內層元素的對齊方式<br>align-self-start、align-self-end、align-self-center、align-self-baseline、align-self-stretch</p>



<p>Auto margins (重要技巧)，使用 margin auto 推移區塊<br>me-auto、ms-auto</p>



<p>With align-items<br>mb-auto、mt-auto</p>



<p>Wrap，使用&nbsp;<code>.flex-nowrap</code>&nbsp;完全不換行 (瀏覽器預設)，使用&nbsp;<code>.flex-wrap</code>&nbsp;進行換行，或使用&nbsp;<code>.flex-wrap-reverse</code>&nbsp;進行反向換行</p>



<p>Order，<code>order</code>&nbsp;只能使用從 0 到 5 的整數值，任何額外值則需要自定義的 CSS</p>



<p>Align content，<strong>注意！</strong>&nbsp;此特性對於單行的 Flex 項目沒有作用。<br>align-content-start、align-content-end、align-content-center、align-content-around、align-content-stretch</p>



<p>Media object，加入 flex-row-reverse 為區塊反轉</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/flex/" target="_blank" rel="noreferrer noopener">通用類別 &gt; Flex</a></li></ul>



<h3>格線系統與 Utilities 的混合運用</h3>



<p>Flex 運用，置中排列、分散排列、兩端分散、反轉、垂直置中、單一元素垂直置中、order 排序。</p>



<p>Spacing 運用，推移置另一端、換行間距(使用 utilites margin)。</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/layout/grid/" target="_blank">排版 &gt; 網格</a></li><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/utilities/flex/" target="_blank">通用類別 &gt; Flex</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/spacing/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 間距</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">格線系統: 實作練習</h3>



<p>置中圖片，不需要所有內容都佔滿 12 欄寬。</p>



<p>基本三欄式，可以善用 flex 特性，將部分內容進行推移達到等高的視覺效果。</p>



<p>交錯式排列，技巧</p>



<ul><li>只有主要內容需要套用容器、格線，背景可不需要套用</li><li>左右交錯也是很棒的視覺方式</li></ul>



<p>左選單、右側內容</p>



<ul><li>可善用 gutter 的大小差異，製作不同間距的格線</li><li>相同視覺群組，距離會較為接近</li></ul>



<h3 class="has-background" style="background-color:#ff6663">格線系統: 常見錯誤</h3>



<p>外層缺少 .container</p>



<p>.row 內層加入 .col 以外的內容</p>



<p>都是 12 欄，可不需要使用格線功能</p>



<p>.col-md… 在行動版都是 .col-12，因此不需要加入</p>



<p>調整格線系統的水平間距(有風險的行為)</p>



<h3>測驗: Flex 與網格系統介紹</h3>



<h2>CH5 – 通用類別 Utilities 與 工具 Helpers</h2>



<h3>Utilities 與 Helpers 基本介紹</h3>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/utilities/api/" target="_blank">通用類別 &gt; API</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/clearfix/" target="_blank" rel="noreferrer noopener">工具 &gt; 清楚浮動</a></li></ul>



<h3>Background – 背景色彩 ★★</h3>



<p>Background color，情境色均可套用在被景色另外還包含額外幾種背景專屬色彩，bg-body、bg-white、bg-transparent。</p>



<p>漸層色，另外可加上 .bg-gradient 套用漸層色。<strong>注意：此功能預設不會開啟，需要調整變數才能啟用</strong>。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/background/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 背景</a></li></ul>



<h3>Border – 邊框 ★★</h3>



<p>Border，增加、對於無邊框來說可以加上 .border，或是 .border-{‘ 向} 來加入 border，減少、也可以加上 .border-0，或是 .border-{方向}-0 來移除 border。</p>



<p>邊框顏色，使用 .border-{情境色彩} 來加入 border 的顏色。</p>



<p>邊框寬度，使用 .border-{1-5 數值} 來調整邊框寬度。</p>



<p>Border-radius，可以加上 .rounded，或是 .rounded-{方向} 來加入 圓角。以及使用 .rounded-pill、.rounded-circle 來製作不同圓的樣式。尺寸，可以加上 .rounded-{ 0-3 } 來調整 圓角 大小。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/borders/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 邊框</a></li></ul>



<h3>Text color – 文字色彩</h3>



<p>Colors，單純的文字顏色，可以使用 .text- { 情境色彩 } 來進行套用。</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/utilities/colors/" target="_blank">通用類別 &gt; 顏色</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/colored-links/" target="_blank" rel="noreferrer noopener">工具 &gt; 連結顏色</a></li></ul>



<h3>Display – 盒模型 ★★★</h3>



<p>Notation，.d-{value} for 預設裝置、.d-{breakpoint}-{value} for sm, md, lg, xl, and xxl。</p>



<p>value 為以下其中一個: none、inline、inline-block、block、grid、table、table-cell、table-row、flex、inline-flex。</p>



<p>Examples，使用 display inline、display-block 轉換以下盒模型。</p>



<p>隱藏元素，需求: 桌面板顯示、行動版隱藏。</p>



<p>運用在列印的 Display。</p>



<p>Flex 常見運用情境，水平等距排列、兩左一右、垂直排列。<br>justify-content-between、ms-auto、flex-column</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/display/" target="_blank" rel="noreferrer noopener">通用類別 &gt; Display</a></li></ul>



<h3>Float – 浮動</h3>



<p>Overview，float-start、float-end、float-none。</p>



<p>Responsive</p>



<p>實戰運用，製作繞圖排文 float-start, me-3, mb-3、float-end, ms-3, mb-3。</p>



<p>清除浮動: 為以下元素套用 clearfix，使用 Google Elments 檢視。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/float/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 浮動</a></li></ul>



<h3>Interactions – 互動 ★</h3>



<p>Text selection，user-select-all、user-select-auto、user-select-none。</p>



<p>Pointer events，pe-none、pe-auto。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/interactions/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 互動</a></li></ul>



<h3>Overflow- 溢出</h3>



<p>使用四個預設的值與類別，即時的調整&nbsp;<code>overflow</code>&nbsp;屬性。預設情況下這些類別並非響應式的</p>



<p>overflow-auto、overflow-hidden、overflow-visible、overflow-scroll。</p>



<p>實戰技巧，使用 overflow-auto 製作水平滾動項目。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/overflow/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 溢出</a></li></ul>



<h3>Position – 位置 ★★</h3>



<p>Arrange elements，格式為 {property}-{position}<br>property 為以下的其中一種:<br>top、start、bottom、end<br>position 為以下的其中一種:<br>0 – 0、50 – 50%、100 – 100%<br><br>你可以為元素加上 position-absolute, position-relative 改變定位形式，同時可透過 {property}-{position} 的形式加上定位。</p>



<p>Center elements<br>可以透過轉換通用類別&nbsp;<code>.translate-middle</code>&nbsp;將元素置中。<br>透過添加&nbsp;<code>.translate-middle-x</code>&nbsp;或&nbsp;<code>.translate-middle-y</code>&nbsp;類別，元素將只能在水平或垂直方向上定位。</p>



<p>Examples<br>可以將這些類別與現有的元件結合使用，創造新的元件。請記得你可以透過在&nbsp;<code>$position-values</code>&nbsp;變數添加實體以擴展它的功能。</p>



<p>Fixed top，將元素固定在螢幕的頂端 .fixed-top<br>Fixed bottom，將元素固定在螢幕的底部 .fixed-bottom</p>



<p>Sticky top，只有在滾動離開該元素之後才會執行。&nbsp;<code>.sticky-top</code>&nbsp;通用類別使用 CSS 的&nbsp;<code>position: sticky</code>，並非所有瀏覽器都完全支持。</p>



<p>Responsive sticky top，.sticky-top 通用類別也支持響應式變化<br>sticky-sm-top、sticky-md-top、sticky-lg-top、sticky-xl-top。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/position/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 位置</a></li></ul>



<h3>Shadow – 陰影 ★</h3>



<p>Examples，為以下方框加入不同等級陰影<br>shadow-none、shadow-sm、shadow、shadow-lg</p>



<p>案例說明: 請千萬不要把陰影加在格線上。</p>



<p>陰影的運用<br><a href="https://material-design.hexschool.io/environment/elavation.html#material-design-%E4%B8%AD%E7%9A%84%E5%B1%A4%E9%AB%98" target="_blank" rel="noreferrer noopener">很棒的陰影運用文章</a></p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/shadows/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 陰影</a></li></ul>



<h3>Sizing – 尺寸 ★★</h3>



<p>Relative to the parent<br>分別加入 25%, 50%, 75%, 100% 和 auto</p>



<p>實戰運用<br>讓你的卡片等高呈現</p>



<p>還可以根據需求使用&nbsp;<code>max-width: 100%;</code>&nbsp;和&nbsp;<code>max-height: 100%;</code>&nbsp;通用類別</p>



<p>相對於視窗<br>vh, vw 以及 min</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/sizing/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 尺寸</a></li></ul>



<h3>Text – 文字 ★</h3>



<p>Text alignment (文字對齊)<br>加入 text-{start, center, end}</p>



<p>中斷點示範:<br>桌面版靠左、行動版置中</p>



<p>Text wrapping and overflow<br>使用&nbsp;<code>.text-wrap</code>&nbsp;類別來斷行文字。<br>可搭配&nbsp;<code>.text-nowrap</code>&nbsp;類別防止換行。</p>



<p>Word break (文字斷行)<br>使用&nbsp;<code>.text-break</code>&nbsp;設定&nbsp;<code>word-wrap: break-word</code>&nbsp;和&nbsp;<code>word-break: break-word</code>&nbsp;預防長文破壞元件的排版。</p>



<p>Text transform (文字變換)<br>請注意&nbsp;<code>.text-capitalize</code>&nbsp;只有將第一個字母轉為大寫，而其他字母不受影響。</p>



<p>Font size (文字大小)<br>使用 fs-{ 1-6} 來調整文字大小。</p>



<p>Font weight and italics (文字粗細和斜體)<br><code>font-style</code>&nbsp;通用類別的縮寫為&nbsp;<code>.fst-*</code>，&nbsp;<code>font-weight</code>&nbsp;通用類別的縮寫為&nbsp;<code>.fw-*</code>。</p>



<p>Line height (行高)</p>



<p>Monospace (等寬字體)</p>



<p>Reset color (重置色彩)<br>使用&nbsp;<code>.text-reset</code>&nbsp;來重置一個文字或連結色彩，以便它們繼承父層的顏色。</p>



<p>Text decoration (文字裝飾)<br>加入 .text-decoration-{ underline, line-through, none } 改變文字裝飾。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/text/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 文字</a></li></ul>



<h3>Vertical alignment – 垂直對齊 ★</h3>



<p>使用&nbsp;<a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align" target="_blank">vertical-alignment</a>&nbsp;通用類別改變元素的對齊<br>請注意，垂直對齊僅影響 inline、inline-block、inline-table、和 table 元素。</p>



<p>搭配 inline 元素:<br>註：inline 中不太建議調整 align-*，這會受到字體不同影響其結果。</p>



<p>搭配 table cell 元素:<br>註：這是實戰常用技巧，尤其是 align-middle。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/vertical-align/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 垂直對齊</a></li></ul>



<h3>Visibility – 可視性</h3>



<p>依需求使用&nbsp;<code>.visible</code>&nbsp;或&nbsp;<code>.invisible</code><br>這完全不會改變&nbsp;<code>display</code>&nbsp;的值，也不影響佈局 –&nbsp;<code>.invisible</code>&nbsp;元素仍會佔用頁面空間。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/utilities/visibility/" target="_blank" rel="noreferrer noopener">通用類別 &gt; 可視性</a></li></ul>



<h3>Helper: Clearfix – 清除浮動</h3>



<p>清除浮動<br>透過將&nbsp;<code>.clearfix</code>&nbsp;<strong>添加到父元素之中</strong>&nbsp;可以輕鬆的清除&nbsp;<code>float</code>&nbsp;所造成的副作用。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/clearfix/" target="_blank" rel="noreferrer noopener">工具 &gt; 清除浮動</a></li></ul>



<h3>Helper: Colored links – 連結顏色 ★★</h3>



<p>連結顏色<br>你可以使用&nbsp;<code>.link-*</code>&nbsp;類別為連結著色。不同於&nbsp;<a href="https://bootstrap5.hexschool.com/docs/5.0/utilities/colors/#colors" target="_blank" rel="noreferrer noopener">.text-* 類別</a>， 這些類別具有&nbsp;<code>:hover</code>&nbsp;和&nbsp;<code>:focus</code>&nbsp;狀態<br>將以下顏色替換為 .link-{情境色彩}</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/colored-links/" target="_blank" rel="noreferrer noopener">工具 &gt; 連結顏色</a></li></ul>



<h3>Helper: Ratio – 比例 ★</h3>



<p>Example<br>將所有嵌入如&nbsp;<code>&lt;iframe&gt;</code>&nbsp;包在帶有&nbsp;<code>.ratio</code>&nbsp;和長寬比 class 的父元素中。我們的通用選擇器&nbsp;<code>.ratio &gt; *</code>&nbsp;會自動調整直接子元素的大小。<br>加入 ratio-{ 16×9, 1×1, 4×3, 21×9 } 調整以下比例。</p>



<p>Custom ratios (自訂比率)<br>例如，要創建 2×1 的長寬比，請在&nbsp;<code>.ratio</code>&nbsp;上設置&nbsp;<code>--bs-aspect-ratio: 50%</code><br>必要設定寬、數值為寬的 %</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/ratio/" target="_blank" rel="noreferrer noopener">工具 &gt; 比例</a></li></ul>



<h3>Helper: Visually hidden – 視覺隱藏</h3>



<p>視覺隱藏<br>在視覺上隱藏元素，但仍允許其透過&nbsp;<code>.visually-hidden</code>&nbsp;呈現給輔助技術（例如螢幕閱讀器）。在預設的情況下，使用&nbsp;<code>.visually-hidden-focusable</code>&nbsp;可以在視覺上隱藏元素，但是當元素被聚焦時（例如，使用鍵盤的用戶）可以顯示該元素。也可以將&nbsp;<code>.visually-hidden-hidden-focusable</code>&nbsp;應用於容器中的&nbsp;<code>:focus-within</code>，當容器的任何子元素都獲得焦點時，將顯示該容器。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/visually-hidden/" target="_blank" rel="noreferrer noopener">工具 &gt; 視覺隱藏</a></li></ul>



<h3>Helper: Stretched link – 連結延伸 ★★</h3>



<p>連結延伸<br>在一個連結上添加&nbsp;<code>.stretched-link</code>&nbsp;將可以使它的&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block">containing block</a>&nbsp;變得可點擊，這是透過&nbsp;<code>::after</code>&nbsp;虛擬元素達成的。在大多數的情況下，這意味著本身帶有&nbsp;<code>position: relative;</code>，且內部包裝了具有&nbsp;<code>.stretched-link</code>&nbsp;類別之連結的元素將變得可點擊</p>



<p>在 Bootstrap 中卡片元件預設便帶有&nbsp;<code>position: relative</code>，因此在這個情況下你可以安全的在卡片中的連結添加&nbsp;<code>.stretched-link</code>，而無須更改任何其他 HTML。<br>為以下連結加入 .stretched-link</p>



<p>大多數自定義的元件並不預設帶有&nbsp;<code>position: relative</code>，因此必須添加&nbsp;<code>position: relative</code>，避免連結延伸到父容器以外的地方。<br>請確保延伸的外層包含 .position-relative</p>



<p>Identifying the containing block<br>如果延伸連結沒有確實運作，<a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block" target="_blank">containing block</a>&nbsp;將可能是問題所在。以下的 CSS 屬性將使一個元素成為 containing block。<br>static 以外的 position 值<br>none 以外的 transform 或 perspective 值<br>在 transform 或 perspective 使用 will-change 作為值<br>none 以外的 filter 值，或是在 filter 使用 will-change 作為值 (只會在 Firefox 作用)</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/stretched-link/" target="_blank" rel="noreferrer noopener">工具 &gt; 連結延伸</a></li></ul>



<h3>Helper: Text truncation – 文字截斷 ★</h3>



<p>文字截斷<br>對於較長的內容，可以添加&nbsp;<code>.text-truncate</code>&nbsp;類別，以透過刪節號截斷文字。<strong>需為&nbsp;<code>display: inline-block</code>&nbsp;或是&nbsp;<code>display: block</code></strong>。</p>



<p>實戰案例、補充</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/helpers/text-truncation/" target="_blank" rel="noreferrer noopener">工具 &gt; 文字截斷</a></li></ul>



<h3>測驗: 通用類別 Utilities 與 工具</h3>



<h2>CH6 – 表單運用</h2>



<h3>知識點: 網頁親和性</h3>



<p>範例<br>幫助文字需要與控制元件相關聯<br>幫助文字應該使用&nbsp;<code>aria-describedby</code>&nbsp;與表單控制元件相關連，這將確保輔助技術（例如螢幕閱讀器）在用戶 focus 或輸入 input 時將了解此幫助文字。</p>



<p>關於 ARIA 的文章<br><a href="https://developer.mozilla.org/zh-TW/docs/Learn/Accessibility/WAI-ARIA_basics" target="_blank" rel="noreferrer noopener">MDN WAI-ARIA 基礎</a>、<a href="https://developers.google.com/web/fundamentals/accessibility/semantics-aria?hl=zh-tw" target="_blank" rel="noreferrer noopener">Google ARIA 簡介</a></p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/getting-started/accessibility/" target="_blank" rel="noreferrer noopener">快速開始 &gt; 網頁親和性</a></li></ul>



<h3>表單運用概觀</h3>



<p>概觀<br>確保在輸入框上使用正確的&nbsp;<code>type</code>&nbsp;屬性（例如，<code>email</code>&nbsp;用於電子郵件地址或&nbsp;<code>number</code>&nbsp;用於數字信息），以利用較新的輸入控制，如電子郵件驗證、號碼選擇等。相關內容可參考：<a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input" target="_blank">連結</a><br>完成以下表單範例:<br>加上 .form-control, .form-label, .form-text<br>確保 label for 與 input id 有正確對應<br>確保 input type 使用正確<br>確保 button 有正確套用 type</p>



<p>表單文字<br>加上 .form-text (且 id 與 input 屬性的 aria-describedby 進行對應)</p>



<p>可以使用任何典型的行內 HTML 元素實現行內文字。</p>



<p>禁用表格<br>為以下表單加上 disabled</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/overview/" target="_blank" rel="noreferrer noopener">表單 &gt; 概觀</a></li></ul>



<h3>表單元素常用的 form-control</h3>



<p>範例<br>為表單加上 .form-control</p>



<p>尺寸<br>為表單加上 .form-control-{ sm, lg } 等不同尺寸</p>



<p>禁用<br>為表單加上 disabled 屬性</p>



<p>僅能閱讀<br>為表單加上 readonly 屬性</p>



<p>僅能閱讀的文本<br>為 input 套用 readonly 及加上 .form-control-plaintext 樣式</p>



<p>檔案 input</p>



<p>顏色<br>為 input 加上 .form-control-color 樣式</p>



<p>資料清單<br>資料清單允許你創造一組可以在 input 內部被存取 (並自動補齊) 的&nbsp;<code>&lt;option&gt;</code>。它們跟&nbsp;<code>&lt;select&gt;</code>&nbsp;元素很相似，但是在樣式設定上具有更多限制與差異。雖然大部分的瀏覽器和作業系統都包含一些對於&nbsp;<code>&lt;datalist&gt;</code>&nbsp;元素的支持，但他們的樣式充其量是不一致的。<br>建立 datalist 結構 (包含 datalist 及option 元素)<br>datalist 補上 id，並與 input list 屬性進行對應</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/form-control/" target="_blank" rel="noreferrer noopener">表單 &gt; 表單控制</a></li></ul>



<h3>表單 Select .form-select</h3>



<p>預設<br>為元素補上 .form-select</p>



<p>尺寸<br>為元素加上 .form-select-{ sm, lg } 調整尺寸</p>



<p>同時支持 multiple 屬性<br>為元素加上 multiple 使其可以多選<br>為元素加上 size 限制顯示尺寸</p>



<p>禁用<br>為元素加上 disabled 使其無法運作</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/select/" target="_blank" rel="noreferrer noopener">表單 &gt; 選擇功能表</a></li></ul>



<h3>表單的 Radio 與 Checkbox 運用</h3>



<p>檢查<br>為元素分別加上 .form-check, .form-check-input, .form-check-label<br>注意，label 與 input id 請務必對應上</p>



<p>Indeterminate (狀態不確定)<br>啟用下方的 JavaScript 查看結果。</p>



<p>禁用<br>為以下元素加上 disabled</p>



<p>選項按鈕<br>使用 type=”radio” 看有何不同 (注意: name 屬性必須一致)</p>



<p>禁用<br>為以下元素加上 disabled</p>



<p>切換開關<br>為以下元素加上 .form-switch 套用視覺效果</p>



<p>行內<br>加上 .form-check-inline 使其轉換成單行</p>



<p>沒有標籤</p>



<p>切換按鈕<br>通過使用&nbsp;<code>.btn</code>&nbsp;而非&nbsp;<code>.form-check-label</code>&nbsp;樣式在&nbsp;元素上創建類似 button 的核取方塊和選項按鈕。<br>核取方塊切換按鈕<br>此方法並沒有套用 JavaScript，是使用純 CSS 所完成，套用條件:<br>必須加上 .btn-check<br>id 必須完全對應<br>input 與 label 元素必須相鄰</p>



<p>選項切換按鈕</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/checks-radios/" target="_blank" rel="noreferrer noopener">表單 &gt; 核取方塊和選項按鈕</a></li></ul>



<h3>表單的 Range 樣式</h3>



<p>概觀<br>將以下的 input type 改為 range<br>為以下元素加上 .form-range</p>



<p>禁用<br>為以下元素加上 disabled</p>



<p>最小與最大<br>有隱含值&nbsp;<code>min</code>&nbsp;和&nbsp;<code>max, 0</code>&nbsp;和&nbsp;<code>100</code>&nbsp;的區別，可以為&nbsp;<code>min</code>&nbsp;和&nbsp;<code>max</code>&nbsp;屬性賦予新的值<br>為以下元素加上 min 及 max 屬性</p>



<p>間距數值 (steps)<br>預設的情況，範圍輸入會 “讀取” 整數值。可以使用 step 值來改變<br>為以下元素加上 step 屬性</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/range/" target="_blank" rel="noreferrer noopener">表單 &gt; 範圍</a></li></ul>



<h3>群組式 input</h3>



<p>基本範例<br>透過 input-group, input-group-text, form-control 製作群組 input</p>



<p>Wrapping<br>加入 flex-nowrap 調整換行形式</p>



<p>尺寸<br>不支援調整 input 群組中單一元素的大小<br>使用 .input-group-{ sm, lg } 調整大小 (不支援各別元素調整)</p>



<p>核取方塊和選項按鈕<br>使用 input-group-text 搭配 form-check-input 製作選項按鈕</p>



<p>多個 input<br>驗證樣式僅適用於只有單個 &lt;input&gt; 的 input 群組。</p>



<p>多附加組件</p>



<p>按鈕附加元件<br>搭配 .btn 製作 input-group</p>



<p>帶下拉式選單的按鈕<br>搭配元件的 .dropdown-toggle 製作下拉式選單</p>



<p>分段按鈕<br>加入 .dropdown-toggle-split 製作分段按鈕</p>



<p>自訂表單<br>自定義選單樣式<br>搭配 .form-select 製作選單樣式<br>自定義檔案 input</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/input-group/" target="_blank" rel="noreferrer noopener">表單 &gt; Input 群組</a></li></ul>



<h3>表單驗證技巧</h3>



<p>自定義樣式<br>為了自定義 Bootstrap 表單驗證訊息，您需要將布林屬性&nbsp;<code>novalidate</code>&nbsp;添加到&nbsp;<code>&lt;form&gt;</code>&nbsp;中。這將會禁用瀏覽器預設的回饋工具提示，不過 JavaScript 的表單驗證 API 依然有效。<br>如何啟用 JavaScript 驗證<br>表單加入 novalidate 屬性<br>表單加入 needs-validation className(名稱可自訂)<br>加入 valid-feedback, invalid-feedback 回應結果<br>加入 JavaScript 驗證片段程式碼</p>



<p>瀏覽器預設值<br>瀏覽器本身就存在著預設驗證功能，但這並不會調整任何樣式</p>



<p>伺服器端<br>伺服器端意味著手動加入回饋樣式，回饋樣式包含:<br>is-valid, is-invalid<br>valid-feedback, invalid-feedback</p>



<p>支持的元素<br><code>&lt;input&gt;</code>&nbsp;和帶有&nbsp;<code>.form-control</code>&nbsp;的&nbsp;<code>&lt;textarea&gt;</code>&nbsp;(在 input 群組中最多包含一個&nbsp;<code>.form-control</code>)<br>帶有&nbsp;<code>.form-select</code>&nbsp;的&nbsp;<code>&lt;select&gt;</code><br><code>.form-check</code><br><br>,was-validated 是一個狀態，代表已經驗證過 (但驗證狀態還是會依據用戶行為再次調整)</p>



<p>工具提示<br>加上 valid-tooltip, invalid-tooltip 加上工具提示的視覺效果</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/validation/" target="_blank" rel="noreferrer noopener">表單 &gt; 驗證</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">新的表單樣式! form-floating</h3>



<p>範例<br>加入 .form-floating 製作浮動標籤</p>



<p>如果已經定義 value ，則&nbsp;<code>&lt;label&gt;</code>&nbsp;會自動調整為其浮動位置。<br>加入 value 屬性在以下 input</p>



<p>表單驗證樣式也可以按預期運作</p>



<p>文字欄位<br>預設情況下，帶有 .form-control 的&nbsp;<code>&lt;textarea&gt;</code>&nbsp;會跟&nbsp;<code>&lt;input&gt;</code>&nbsp;有相同的高度。<br>將以下改為 textarea 標籤</p>



<p>不要使用&nbsp;<code>rows</code>&nbsp;屬性來自定義&nbsp;<code>&lt;textarea&gt;</code>&nbsp;的高度，而是使用 height 屬性 (透過行內設定，或是自定義的 CSS)</p>



<p>選擇<br>為以下套用 .form-floating, form-select</p>



<p>排版<br>請確保將表單元素放在 column 類別裡面<br>將以下表單套用格線系統</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/floating-labels/" target="_blank" rel="noreferrer noopener">表單 &gt; 浮動標籤</a></li></ul>



<h3>表單排版技巧</h3>



<p>通用類別<br>使用 mb-{ 1-5 } 調整表單間距</p>



<p>表單網格<br>使用格線系統排版表單</p>



<p>Gutters<br>調整表單之間的 gutter</p>



<p>可以使用網格 (Grid) 系統建立更複雜的排版。<br>使用格線系統，並加入 g-{ 1-5 } 完成複雜的排版</p>



<p>水平表單<br>透過將&nbsp;<code>.row</code>&nbsp;類別加入表單群組來建立使用網格系統的水平表單，並使用&nbsp;<code>.col-*-*</code>&nbsp;類別來指定標籤和表單控制 (Form controls) 的寬度。請確保有在&nbsp;<code>&lt;label&gt;</code>&nbsp;添加&nbsp;<code>.col-form-label</code>&nbsp;，使它們與相關的表單控制垂直置中。<br>在以下 label 加入 col-form-label 使其對齊</p>



<p>水平表單標籤尺寸<br>使用 col-form-label-{ sm, lg } 改變標籤尺寸</p>



<p>欄尺寸<br>使用不同 col-{ 中斷點 } 製作不同寬度 input</p>



<p>自動調整尺寸<br>使用 col-auto 符合 input 尺寸</p>



<p>你可以再次將其與有指定大小的 column 類別混合使用</p>



<p>行內表單<br>使用 .row-cols-* 類別來建立水平排版。<br>使用 .row-cols-lg-auto 來套用水平、垂直自動切換的排版形式</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/forms/layout/" target="_blank" rel="noreferrer noopener">表單 &gt; 排版</a></li></ul>



<h2 class="has-background" style="background-color:#ff6663">CH7 – Bootstrap 最實用的工具 – 元件</h2>



<h3>元件簡介</h3>



<h4>元件結構<br>結構與樣式分離</h4>



<figure class="wp-block-image size-full"><img loading="lazy" width="1536" height="664" src="/wordpress_blog/wp-content/uploads/2022/04/結構與樣式分離.png" alt="" class="wp-image-390"/><figcaption>結構與樣式分離</figcaption></figure>



<h4>元件組合規則</h4>



<p>元件模組大致包含以下規則</p>



<ul><li>模組 (button, modal, pagination)</li><li>主題 (theme colors, primary, danger…)</li><li>樣式 (size, style)</li><li>狀態 (active, disabled)</li></ul>



<figure class="wp-block-gallery has-nested-images columns-1 is-cropped">
<figure class="wp-block-image size-large"><img loading="lazy" width="1455" height="801" data-id="393"  src="/wordpress_blog/wp-content/uploads/2022/04/元件簡介01.png" alt="" class="wp-image-393"/><figcaption>元件簡介01</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="847" data-id="397"  src="/wordpress_blog/wp-content/uploads/2022/04/元件簡介02.png" alt="" class="wp-image-397"/><figcaption>元件簡介02</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1483" height="649" data-id="396"  src="/wordpress_blog/wp-content/uploads/2022/04/元件簡介03.png" alt="" class="wp-image-396"/><figcaption>元件簡介03</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="714" data-id="394"  src="/wordpress_blog/wp-content/uploads/2022/04/元件簡介04.png" alt="" class="wp-image-394"/><figcaption>元件簡介04</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="730" data-id="398"  src="/wordpress_blog/wp-content/uploads/2022/04/元件簡介05.png" alt="" class="wp-image-398"/><figcaption>元件簡介05</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="1536" height="782" data-id="395"  src="/wordpress_blog/wp-content/uploads/2022/04/元件簡介06.png" alt="" class="wp-image-395"/><figcaption>元件簡介06</figcaption></figure>
</figure>



<h3>元件與 JavaScript 之間的關係</h3>



<p>關於 Data 屬性<br>在 Bootstrap 中，如果要透過 HTML 正確對應 JavaScript 互動方法，均需要使用 data-bs-* 來調用。</p>



<p>建構方式呼叫 Bootstrap JavaScript API</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/modal/" target="_blank" rel="noreferrer noopener">元件 &gt; 互動視窗</a></li></ul>



<h3>手風琴 (Accordion)</h3>



<p>範例<br>使用 Accordion 的摺疊效果<br>務必載入 Bootstrap JavaScript<br>外層元素必須要有 ID，內層的元素 data-bs-parent 必須對應外層（確保只會展開一個<br>被折疊的項目，必須有獨立的 ID 名稱，按鈕加入 data-bs-toggle=”collapse” 及 data-bs-target 對應此名稱</p>



<p>Flush<br>加上&nbsp;<code>.accordion-flush</code>&nbsp;來移除預設&nbsp;<code>background-color</code>、 外框和圓角使該手風琴能和父容器緊鄰。</p>



<p>Always open<br>移除內層 data-bs-parent 則可以將 accordion 的效果總是展開。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/accordion/" target="_blank" rel="noreferrer noopener">元件 &gt; 手風琴 (Accordion)</a></li></ul>



<h3>警報 (Alerts) ★</h3>



<p>範例<br>使用 alert 加上 alert- {情境色} 製作警告框</p>



<p>連結顏色<br>使用 alert-link 套用警告框內的連結色彩</p>



<p>額外的內容<br>alert 的樣式還包含了 .alert-heading、分隔線、段落等。</p>



<p>Icons<br>You can use&nbsp;<a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.0/utilities/flex/" target="_blank">flexbox utilities</a>&nbsp;and&nbsp;<a rel="noreferrer noopener" href="https://icons.getbootstrap.com/" target="_blank">Bootstrap Icons</a>&nbsp;to create alerts with icons.<br>使用 Flex 重新對齊以下內容<br>快速使用 Bootstrap Icon 在 Alert 內<br>載入 Bootstrap ICON CDN<br>加入 ICON，並使用 utilities 調整大小、間距</p>



<p>移除<br>加上一個關閉按鈕 並賦予&nbsp;<code>.alert-dismissible</code>&nbsp;類別，使警報的右上角新增額外的 padding 和關閉按鈕。<br>在關閉按鈕加上&nbsp;<code>data-bs-dismiss="alert"</code>&nbsp;屬性來觸發 JavaScript 函式。務必使用&nbsp;<code>&lt;button&gt;</code>&nbsp;元素，讓它可以跨裝置正常運行。<br>要以動態方式移除警報，可以使用&nbsp;<code>.fade</code>&nbsp;和&nbsp;<code>.show</code>&nbsp;類別。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/alerts/" target="_blank" rel="noreferrer noopener">元件 &gt; 警報 (Alerts)</a></li></ul>



<h3>標籤 (Badges) ★</h3>



<p>範例<br>標籤可以運用在標題上<br>標籤可以做為連結或按鈕的一部分</p>



<p>背景顏色<br>可以使用 bg-{情境色} 來調整 badge 的色彩，必要時可加入 text-dark 將文字改為深色。</p>



<p>膠囊標籤<br>使用&nbsp;<code>.rounded-pill</code>&nbsp;通用類別可以透過&nbsp;<code>border-radius</code>&nbsp;使標籤增加圓角。</p>



<p>定位技巧<br>使用通用類別，製作按鈕的額外提示效果。<br>外層加入: position-relative<br>內層: position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/badge/" target="_blank" rel="noreferrer noopener">元件 &gt; 標籤 (Badge)</a></li></ul>



<h3>麵包屑 (Breadcrumb) ★</h3>



<p>Example<br>加入麵包屑<br>外層 ol 加入 .breadcrumb<br>li 加入 .breadcrumb-item<br>當前頁面加入 .active</p>



<p>Dividers<br>透過&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before">::before</a>&nbsp;以及&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content">content</a>&nbsp;而自動被加入在 CSS 中。可以透過修改本地 CSS 自定義屬性&nbsp;<code>--bs-breadcrumb-divider</code>&nbsp;或&nbsp;<code>$breadcrumb-divider</code>&nbsp;Sass 變數來改變<br>也可以使用<strong>嵌入式 SVG 圖示</strong>。通過我們的 CSS 自定義屬性，或是使用 Sass 變數來應用它。</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/breadcrumb/" target="_blank">元件 &gt; 麵包屑 (Breadcrumb</a><a href="https://bootstrap5.hexschool.com/docs/5.1/components/breadcrumb/" target="_blank" rel="noreferrer noopener">)</a></li></ul>



<h3>按鈕 (Buttons) ★★★</h3>



<p>Examples<br>按鈕結構包含 btn 加入 btn-{情境色}。</p>



<p>Button tags<br>按鈕可以運用在各種標籤上。</p>



<p>Outline buttons<br>可以使用 btn-outline-{情境色} 製作 outline 形式的按鈕。</p>



<p>Sizes<br>可以使用 btn-lg, btn-sm 製作大小類型的按鈕。</p>



<p>Disabled state<br>button 標籤的按鈕可以加入 disabled 的屬性禁用按鈕。<br>使用&nbsp;<code>&lt;a&gt;</code>&nbsp;元素的禁用其行為與其他按鈕略有不同：<br><code>&lt;a&gt;</code>&nbsp;不支援&nbsp;<code>disabled</code>&nbsp;屬性，所以你必須添加&nbsp;<code>.disabled</code>&nbsp;使它在視覺上看起來被禁用。<br>加入一些友善的樣式，以禁用游標上的所有&nbsp;<code>pointer-events</code>。<br>禁用按鈕應包含&nbsp;<code>aria-disabled="true"</code>&nbsp;屬性來向輔助性技術指示元素的狀態。<br>tabindex=”-1″</p>



<p>Block buttons<br>官方文件寫法 Display Grid（加入 d-grid gap-2）。<br>另一種寫法搭配使用 width: 100%。</p>



<p>以下為一個響應式的範例<br>行動版為滿寬，桌面版為單行。</p>



<p>可以使用網格系統的欄 (column) 類別來調整區塊級別按鈕的寬度（加入 col-6）。</p>



<p>Toggle states<br>加入&nbsp;<code>data-bs-toggle="button"</code>&nbsp;來切換按鈕的&nbsp;<code>active</code>&nbsp;狀態。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/buttons/" target="_blank" rel="noreferrer noopener">元件 &gt; 按鈕 (Buttons)</a></li></ul>



<h3>按鈕群組 (Button group) ★★</h3>



<p>Basic example<br>使用 btn-group 為多個按鈕加入群組。</p>



<p>Mixed styles<br>內層按鈕可以加上 btn-{情境色}。</p>



<p>Outlined styles<br>btn-outline-{情境色} 的外框按鈕一樣可以運用。</p>



<p>Checkbox and radio button groups<br>可以搭配 input, label 製作<br>checkbox 需加上 .btn-check<br>input 在前、label 在後<br>label for 與 input id 需要對應<br>之前在表單的核取方塊切換按鈕也有介紹過。</p>



<p>Button toolbar<br>btn-toolbar 可以包含多個 btn-group</p>



<p>將 input 群組與工具列中的按鈕群組進行混合<br>可以搭配 input-group 一起使用</p>



<p>Sizing<br>只需要在每個帶有&nbsp;<code>.btn-group</code>&nbsp;的元件加上&nbsp;<code>.btn-group-{lg, sm}</code>&nbsp;即可。</p>



<p>Nesting<br>當您想要下拉式功能表與按鈕群組混合時，只需要將&nbsp;<code>.btn-group</code>&nbsp;放在另一個&nbsp;<code>.btn-group</code>&nbsp;中即可。</p>



<p>Vertical variation<br>加入 .btn-group-vertical 將一組按鈕垂直堆疊而不是水平呈現。<strong>此處不支援分割下拉式功能表</strong>。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/button-group/" target="_blank" rel="noreferrer noopener">元件 &gt; 按鈕群組 (Button group)</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">卡片 (Cards) ★★★</h3>



<p>Example<br>加入以下 .card 套用卡片效果</p>



<p>Content types</p>



<p>Body<br>卡片的建構區塊為&nbsp;<code>.card-body</code>。當你需要在卡片填充內容的時候請使用它</p>



<p>Titles, text, and links<br>.card-title, .card-link, .card-subtitle</p>



<p>Images<br>.card-img-top, .card-text</p>



<p>List groups<br>使用&nbsp;<code>.list-group-flush</code>&nbsp;在卡片內建立列表群組</p>



<p>混合樣式<br>卡片可以搭配 list-group 製作不同組合</p>



<p>Header and footer<br>為以下範例加入 .card-header<br>卡片頁首的樣式可以透過在&nbsp;<code>&lt;h*&gt;</code>&nbsp;元素添加&nbsp;<code>.card-header</code>&nbsp;來調整<br>為以下範例加入 .card-header, .card-footer</p>



<p>Sizing<br>卡片預設沒有特定的起始&nbsp;<code>width</code>，除非另有聲明，否則它們的寬度將是 100％<br>搭配格線系統安排卡片排版</p>



<p>Using utilities<br>使用 utilities w-* 限制卡片寬度</p>



<p>Using custom CSS<br>直接使用 style 限制寬度也是沒問題的</p>



<p>Text alignment<br>使用 utilities 調整卡片內文字對齊</p>



<p>Navigation<br>搭配 nav-tabs 製作導覽列</p>



<p>Images<br>Image caps<br>使用 .card-img-top, card-img-bottom 將圖片符合卡片視覺效果。</p>



<p>Image overlays<br>使用 .card-img, card-img-overlay 將圖片置於背景。</p>



<p>Horizontal<br>使用格線系統，製作水平類型的排版效果。</p>



<p>Card styles<br>Background and color<br>使用 bg-{情境色} 製作不同顏色的卡片</p>



<p>Border<br>使用 border-{情境色} 製作不同邊框色彩的卡片</p>



<p>Mixins utilities</p>



<p>Card layout<br><strong>這些排版選項還不是響應式的</strong><br>Card groups<br>加入 .card-group 製作群組卡片<br>當在卡片群組使用 .card-footer，它們的內容將會自動對齊</p>



<p>網格卡片<br>使用行列式製作<br>行動版為單欄、桌面版為雙欄<br>如果需要相等高度時，把&nbsp;<code>.h-100</code>&nbsp;添加於卡片上。如果希望卡片預設就是等高，可以在 Sass 設置 $card-height: 100%。<br>卡片頁尾也會自動對齊</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/card/" target="_blank">元件 &gt; 卡片 (Card)</a></li></ul>



<h3>輪播 (Carousel)</h3>



<p>Example<br><strong>需要將&nbsp;<code>.active</code>&nbsp;添加到其中一個輪播元素上</strong>，否則輪播將不可見。另外一定要在&nbsp;<code>.carousel&nbsp;</code>上為控制項元件設置一個唯一的&nbsp;<code>id</code>，特別是當你在一個頁面上使用多個輪播的時候。控制項和指示器元素必須具有與&nbsp;<code>.carousel</code>&nbsp;元素之 id 符合的&nbsp;<code>data-bs-target</code>&nbsp;屬性（或是連結的&nbsp;<code>href</code>）。</p>



<p>Slides only<br>外層加上 data-bs-ride=”carousel”，並給予唯一的 ID<br>內層元素需要有一個 active</p>



<p>With controls<br>加入上一個與下一個控制項時，我們建議使用&nbsp;<code>&lt;button&gt;</code>&nbsp;元素，當然你也可以使用&nbsp;<code>&lt;a&gt;</code>&nbsp;來當作 button 使用，記得要替&nbsp;<code>&lt;a&gt;</code>&nbsp;元素加上&nbsp;<code>role="button"</code>。<br>打開以下註解使用控制器，注意：控制器上的 data-bs-target 需對應外層 ID。</p>



<p>With indicators<br>打開以下註解使用指引器，指引器的 data-bs-target 需對應外層 ID，並且 data-bs-slide-to 需對應特定的投影片索引（從 0 開始計算）。</p>



<p>With captions<br>在任意&nbsp;<code>.carousel-item</code>&nbsp;中使用&nbsp;<code>.carousel-caption</code>&nbsp;替幻燈片添加字幕。</p>



<p>Crossfade<br>將&nbsp;<code>.carousel-fade</code>&nbsp;加到輪播中，以使用淡入淡出的取代滑動的動畫效果。</p>



<p>Individual&nbsp;<code>.carousel-item</code>&nbsp;interval<br>在&nbsp;<code>.carousel-item</code>&nbsp;上添加&nbsp;<code>data-bs-interval=""</code>&nbsp;以更改自動循環至下一個項目的延遲時間。</p>



<p>Disable touch swiping<br>使用 data-bs-touch=”false” 禁止觸控事件。</p>



<p>Dark variant<br>在&nbsp;<code>.carousel</code>&nbsp;上添加&nbsp;<code>.carousel-dark</code>&nbsp;以獲得暗色系的控制項、指示器及字幕。控制項已透過 CSS 屬性&nbsp;<code>filter</code>&nbsp;從它們預設的白色充填反轉。字幕與控制項具有用來自定義&nbsp;<code>color</code>&nbsp;及&nbsp;<code>background-color</code>&nbsp;的額外 Sass 變數。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/carousel/" target="_blank" rel="noreferrer noopener">元件 &gt; 輪播 (Carousel)</a></li></ul>



<h3>關閉按鈕 (Close button) ★</h3>



<p>之前有提到是在元件 &gt; 警報 的移除的地方有提到、使用到。</p>



<p>Example<br>提供一個選項，透過&nbsp;<code>.btn-close</code>&nbsp;以關閉或解除元件。</p>



<p>Disabled state</p>



<p>White variant<br>透過&nbsp;<code>.btn-close-white</code>&nbsp;類別將預設的&nbsp;<code>.btn-close</code>&nbsp;改為白色。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/close-button/" target="_blank" rel="noreferrer noopener">元件 &gt; 關閉按鈕 (Close button)</a></li></ul>



<h3>摺疊 (Collapse) ★★</h3>



<p>像是一個功能。</p>



<p>Example<br>點擊以下按鈕，透過改變 Class 來顯示及隱藏另一個元素：<br>.collapse 隱藏內容。<br><code>.collapsing</code>&nbsp;會在轉換的過程中被套用。<br><code>.collapse.show</code>&nbsp;顯示內容。<br>基本使用方式：<br>按鈕加上 data-bs-toggle=”collapse”<br>加上 href 或 data-bs-target 來對應項目</p>



<p>Multiple targets<br>id 僅能用來對應單一元素，如果要對應複數元素則可以使用 className。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/collapse/" target="_blank" rel="noreferrer noopener">元件 &gt; 摺疊 (Collapse)</a></li></ul>



<h3>下拉選單 (Dropdowns) ★</h3>



<p>Examples<br>Single button<br>在&nbsp;<code>.dropdown</code>&nbsp;中包裝下拉選單的切換（你的按鈕或連結）和下拉式功能表，或者另外一個聲明&nbsp;<code>position：relative;</code>&nbsp;的元素。 可以從&nbsp;<code>&lt;a&gt;</code>&nbsp;或&nbsp;<code>&lt;button&gt;</code>&nbsp;元素裡觸發下拉選單。<br>按鈕外層加上 .dropdown、<br>按鈕加上 .dropdown-toggle、<br>下拉選單項目為 .dropdown-menu、<br>按鈕加上 data-bs-toggle=”dropdown”。<br>透過&nbsp;<code>&lt;a&gt;</code>：</p>



<p>尺寸<br>按鈕下拉選單可以使用所有尺寸的按鈕，包括預設及分割下拉按鈕(套用 btn-sm, btn-lg) 。</p>



<p>Split button<br>添加了&nbsp;<code>.dropdown-toggle-split</code>&nbsp;以在下拉插入符號做適當間隔。</p>



<p>Dark dropdowns<br>透過在目前現有的&nbsp;<code>.dropdown-menu</code>&nbsp;增加&nbsp;<code>.dropdown-menu-dark</code>&nbsp;屬性。</p>



<p>Directions<br>Dropup<br>可以加上 dropup, dropend, dropstart 改變方向性。</p>



<p>Menu items<br>可以選擇在下拉選單中使用&nbsp;<code>&lt;button&gt;</code>&nbsp;元素，而不是僅使用&nbsp;<code>&lt;a&gt;</code>。<br>可以使用&nbsp;<code>.dropdown-item-text</code>&nbsp;創建非交互式下拉選單。</p>



<p>Active</p>



<p>Disabled</p>



<p>Menu alignment<br>在預設的情況下，下拉選單會自動從父選單的頂部與左邊開始定位 100％。將因此若將&nbsp;<code>.dropdown-menu-end</code>&nbsp;加入至&nbsp;<code>.dropdown-menu</code>&nbsp;則會使下拉選單靠右對齊。</p>



<p>Responsive alignment<br>如果要使用響應式對齊，請增加&nbsp;<code>data-display="static"</code>&nbsp;屬性來禁用動態定位，並使用響應式變數類別。<br>如果要讓在特定斷點以上讓下拉選單靠&nbsp;<strong>右</strong>&nbsp;對齊，請加上&nbsp;<code>.dropdown-menu{-sm|-md|-lg|-xl}-end</code>。</p>



<p>各種對齊範例</p>



<p>Menu content<br>Headers<br>使用 .dropdown-header 為列表加入標頭。</p>



<p>Dividers<br>使用 hr 標籤搭配 .dropdown-divider 製作分隔線。</p>



<p>Text<br>可以搭配 Utilities 自行排版樣式。</p>



<p>Forms<br>表單範例</p>



<p>Dropdown options<br>使用&nbsp;<code>data-bs-offset</code>&nbsp;或&nbsp;<code>data-bs-reference</code>&nbsp;來改變下拉選單的位置。</p>



<p>自動關閉的方法</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/dropdowns/" target="_blank" rel="noreferrer noopener">元件 &gt; 下拉選單 (Dropdowns)</a></li></ul>



<h3>列表群組 (List group) ★</h3>



<p>Basic example<br>外層使用 list-group、<br>內層使用 list-group-item。</p>



<p>Active items<br>加上 .active 啟用視覺效果。</p>



<p>Disabled items<br>加上 disabled 禁用特定項目。</p>



<p>Links and buttons<br>使用&nbsp;<code>&lt;a&gt;</code>&nbsp;或&nbsp;<code>&lt;button&gt;</code>&nbsp;，並加入&nbsp;<code>.list-group-item-action</code>&nbsp;來創建具有 hover、禁用和啟用狀態的動態列表群組。<br><strong>確保不要在這裡使用標準的&nbsp;<code>.btn</code></strong><br>將以下結構改為 a 標籤。<br>對於&nbsp;<code>&lt;button&gt;</code>，你也可以使用 disabled 屬性而不是&nbsp;<code>.disabled</code>&nbsp;class。</p>



<p>Flush<br>使用 .list-group-flush 取消外框視覺效果。</p>



<p>Numbered<br>使用 ol 標籤搭配 .list-group-numbered 為項目加上數值。<br>運用範例。</p>



<p>Horizontal<br>使用 list-group-horizontal 及 list-group-horizontal-{中斷點} 將項目改為水平排列。</p>



<p>Contextual classes<br>使用 .list-group-item-{情境色} 製作不同底色的列表。<br>也可以使用&nbsp;<code>.list-group-item-action</code>。請注意，在前面的範例中不存在 hover 樣式。另外還有支持&nbsp;<code>.active</code>&nbsp;狀態，應用它來指示情境列表群組項目上的啟用狀態。</p>



<p>With badges<br>使用 flex 搭配 badge。</p>



<p>Custom content</p>



<p>Checkboxes and radios<br>可以在不使用&nbsp;<code>&lt;label&gt;</code>&nbsp;的情況下使用它們，但請記住要包含&nbsp;<code>aria-label</code>&nbsp;以及必要的內容。</p>



<p>將&nbsp;<code>&lt;label&gt;</code>&nbsp;作為&nbsp;<code>.list-group-item</code>&nbsp;使用以創造較大的點擊區域。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/list-group/" target="_blank" rel="noreferrer noopener">元件 &gt; 列表群組 (List group)</a></li></ul>



<h3>互動視窗 (Modal) ★★</h3>



<p>Examples<br>Modal 結構包含：<br>modal、<br>modal-dialog、<br>modal-content、<br>modal-header, modal-body, modal-footer, …modal-title。</p>



<p>Live demo<br>啟用 Modal 功能<br>按鈕加上 data-bs-toggle=”modal”、<br>使用 href 或 data-bs-target 對應 modal ID<br>使用 data-bs-dismiss=”modal” 關閉 Modal</p>



<p>Static backdrop<br>加入 data-bs-backdrop=”static”，互動視窗不會因為點擊背景而關閉。</p>



<p>較長內容的滾動狀態<br>可以透過在&nbsp;<code>.modal-dialog</code>&nbsp;中加入&nbsp;<code>.modal-dialog-scrollable</code>&nbsp;來創建一個 body 可滾動互動視窗。</p>



<p>Vertically centered<br>加入&nbsp;<code>.modal-dialog-centered</code>&nbsp;到&nbsp;<code>.modal-dialog</code>&nbsp;來使互動視窗垂直置中。</p>



<p>在兩個 Modal 中切換</p>



<p>Optional sizes<br>在 modal-dialog 加入 modal-{xl, lg, sm} 來改變 modal 尺寸。</p>



<p>Fullscreen Modal<br>使用 modal-fullscreen 製作滿版 modal，或使用 modal-fullscreen-{中斷點}-down 在特定寬度下運行。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/modal/" target="_blank" rel="noreferrer noopener">元件 &gt; 互動視窗 (Modal)</a></li></ul>



<h3>導覽與頁籤 (Navs and tabs)</h3>



<p>Base nav<br>結構說明：<br>ul 為 .nav、<br>li 為 .nav-item、<br>a 則是使用 .nav-link</p>



<p>如果項目的順序很重要，可以使用與&nbsp;<code>&lt;ul&gt;</code>&nbsp;類似的&nbsp;<code>&lt;ol&gt;</code>，或者使用&nbsp;<code>&lt;nav&gt;</code>&nbsp;元素。<br>也可以直接使用 a 標籤，則不需要使用 nav-item。</p>



<p>Available styles<br>Horizontal alignment<br>使用&nbsp;<code>.justify-content-center</code>&nbsp;置中對齊:<br>使用&nbsp;<code>.justify-content-end</code>&nbsp;靠右對齊:</p>



<p>Vertical<br>通過使用&nbsp;<code>.flex-column</code>&nbsp;通用類別更改 flex 的軸線方向以堆疊導覽。</p>



<p>Tabs<br>加入&nbsp;<code>.nav-tabs</code>&nbsp;以生成具有分頁標籤的介面。</p>



<p>Pills</p>



<p>Fill and justify<br>使用&nbsp;<code>.nav-fill</code>&nbsp;會將&nbsp;<code>.nav-item</code>&nbsp;內容按照比例分配空間。注意，這會佔用所有的水平空間，但並不是每個導覽項目都具有相同寬度。<br>使用&nbsp;<code>&lt;nav&gt;</code>&nbsp;導覽時，您可以忽略&nbsp;<code>.nav-item</code>，因為客製化&nbsp;<code>&lt;a&gt;</code>&nbsp;元素的樣式僅需要&nbsp;<code>.nav-link</code>。<br>創建等寬元素請使用&nbsp;<code>.nav-justified</code>。所有的水平空間將被導覽連結佔據，但與上面的&nbsp;<code>.nav-fill</code>&nbsp;不同，每個導覽項都將是相同的寬度。</p>



<p>Working with flex utilities<br>在下面的範例中，我們的導覽將在最小中斷點以下堆疊，並從 small 斷點開始採用水平排版以填滿所有可用寬度。<br>行動版垂直排列、桌面版水平排列。</p>



<p>Using dropdowns<br>Tabs with dropdowns<br>搭配下拉式結構一樣式沒有問題的，加入 data-bs-toggle=”dropdown” 在以下範例中。</p>



<p>Pills with dropdowns<br>各種樣式互相搭配都是沒有問題的。</p>



<p>JavaScript 頁籤<br>分頁外層為&nbsp;<code>tab-content</code>，內層為&nbsp;<code>tab-pane fade</code>，並且其中一個加入&nbsp;<code>show active</code>、<br>每個分頁需要有獨立的 id、<br>按鈕加上 data-bs-toggle=”tab”，並使用 data-bs-target 分別對應 id。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/navs-tabs/" target="_blank" rel="noreferrer noopener">元件 &gt; 導覽與頁籤 (Navs &amp; tabs)</a></li></ul>



<h3>導覽列 (Navbar) ★★</h3>



<p>結構說明：<br>外層<br>navbar 最外導覽列結構、<br>navbar-expand-{中斷點} 選單內容展開中斷點、<br>navbar-{dark, light}，亮暗色切換、<br>內層<br><code>.navbar-brand</code>&nbsp;用於您的公司，產品或專案名稱。<br><code>.navbar-nav</code>&nbsp;提供高度完整和輕便的導航（包括對下拉清單的支持）。<br><code>.navbar-toggler</code>&nbsp;用於我們的折疊插件和其他&nbsp;<a href="http://127.0.0.1:5500/components/navbar.html#responsive-behaviors">navigation toggling</a>&nbsp;行為。<br>Flex 與 spacing 通用類別，用於表單控制與行為。<br><code>.navbar-text</code>&nbsp;用於垂直居中的文本字串。<br><code>.collapse.navbar-collapse</code>&nbsp;透過父層斷點來群組、隱藏導覽列內容。<br>加入一個選填的屬性&nbsp;<code>.navbar-scroll</code>&nbsp;來設置&nbsp;<code>max-height</code>&nbsp;，然後&nbsp;<a href="http://127.0.0.1:5500/components/navbar.html#scrolling">滾動展開內容</a>.。</p>



<p>Brand<br><code>.navbar-brand</code>&nbsp;可以應用於大多數元素，但對錨點最有效，因為某些元素可能需要通用類別 Class 或自訂樣式。</p>



<p>Text<br>為以下程式碼加入 .navbar-brand</p>



<p>Image<br>可以將&nbsp;<code>.navbar-brand</code>&nbsp;中的文字替換為&nbsp;<code>&lt;img&gt;</code>。</p>



<p>Nav<br><strong>在導覽列中的導覽元件會盡可能的佔用水平空間</strong>，以保持您的導覽列內容安全對齊。<br>結構：<br>最外層：navbar-nav、<br>li：nav-item、<br>a：nav-link。<br>導覽有專屬的類別，依照需求你可以避免完全使用列表的方法，也可不使用 .nav-item。<br>在以下範例中加入 navbar-nav, nav-link。<br>還可以在導覽列的導覽元件使用下拉式選單。下拉式選單需要一個包裝元素進行定位，請確保為&nbsp;<code>.nav-item</code>&nbsp;和&nbsp;<code>.nav-link</code>&nbsp;使用單獨及巢狀的元素。<br>在以下結構中加入 data-bs-toggle=”dropdown”。</p>



<p>Forms<br><code>.navbar</code>&nbsp;中的直接子元素使用 flex 排版，預設為&nbsp;<code>justify-content: space-between</code>。 根據需要使用其他&nbsp;<a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.0/utilities/flex/" target="_blank">flex utilities</a>&nbsp;來調整此行為。<br>打開以下註解查看表單的位置。<br>input 群組也可以這樣使用。如果導覽列整個都是表單，或者大部分是表單，則可以使用&nbsp;<code>&lt;form&gt;&gt;</code>&nbsp;元素作為容器並保存 HTML。</p>



<p>Text<br>透過&nbsp;<code>.navbar-text</code>&nbsp;導覽列可以包含一些文本。</p>



<p>色彩方案<br>從&nbsp;<code>.navbar-light</code>&nbsp;選用淺色背景顏色，或者&nbsp;<code>.navbar-dark</code>&nbsp;用於深色背景顏色。 然後，使用&nbsp;<code>.bg-*</code>&nbsp;通用類別自訂。</p>



<p>Containers<br>可以把導覽列包裝在&nbsp;<code>.container</code>&nbsp;中，將其置中於頁面 – 請注意，內部的 container 還是必要的。或是你可以在&nbsp;<code>.navbar</code>&nbsp;中包裝一個 container。<br>使用任意響應式容器以更改導覽列中內容的顯示寬度。</p>



<p>Placement<br>固定的導覽列使用&nbsp;<code>position：fixed</code>，這意味著它們會脫離正常的 DOM 的文件流，並且可能需要自定義 CSS（例如&nbsp;<code>&lt;body&gt;&nbsp;</code>上的&nbsp;<code>padding-top</code>），以防止與其他元素重疊。<br>還要注意&nbsp;<code>.sticky-top</code>&nbsp;使用&nbsp;<code>position：sticky</code>，<a href="https://caniuse.com/css-sticky" target="_blank" rel="noreferrer noopener"><strong>並沒有被所有瀏覽器支持</strong></a>。</p>



<p>滾動效果<br>行動版選單可透過設置&nbsp;<code>--bs-scroll-height: 100px;</code>&nbsp;為行動版的下拉選單限制高度，並維持滾動的效果。</p>



<p>Responsive behaviors<br>可以使用&nbsp;<code>.navbar-toggler, .navbar-collapse</code>&nbsp;和&nbsp;<code>.navbar-expand{-sm|-md|-lg|-xl}</code>&nbsp;決定它們的內容何時會摺疊。<br>對於不需要折疊的導覽列，在導覽列中加入&nbsp;<code>.navbar-expand</code>。對於總是折疊的導覽列，不要加任何&nbsp;<code>.navbar-expand</code>&nbsp;class。</p>



<p>Toggler<br>在最小中斷點沒有&nbsp;<code>.navbar-brand</code>：<br>在以下程式碼中加入 .navbar-expand-lg，.navbar-collapse 將會在 lg 以上尺寸展開。</p>



<p>External content<br>可以使用 data-bs-target 展開 navbar 上方的額外內容。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/navbar/" target="_blank" rel="noreferrer noopener">元件 &gt; 導覽列 (Navbar)</a></li></ul>



<h3>Offcanvas – 側欄滑動導覽 ★</h3>



<p>Examples<br>Offcanvas components<br>offcanvas 是從畫面側邊出現的元件，透過 JS 來切換期顯示與否。<br>外層包含 offcanvas, offcanvas-start，start, end, top, bottom 決定顯示方向、<br>必須給予一個特定 id、<br>內層包含 offcanvas-header, offcanvas-body, offcanvas-title 等樣式。</p>



<p>Live demo<br>為按鈕加上 data-bs-toggle=”offcanvas”、<br>使用 href 或 data-bs-target 指向 offcanvas id。</p>



<p>Placement<br>試著加入 offcanvas-top, offcanvas-bottom, offcanvas-end 查看其方向性。</p>



<p>Backdrop<br>可以使用 data-bs-scroll=”true” 在 offcanvas 開啟時維持背景滾動，使用 data-bs-backdrop=”false” 關閉覆蓋的背景色。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/offcanvas/" target="_blank" rel="noreferrer noopener">元件 &gt; Offcanvas (畫布)</a></li></ul>



<h3>分頁 (Pagination) ★</h3>



<p>Overview<br>在外層使用&nbsp;<code>&lt;nav&gt;</code>&nbsp;元素讓螢幕閱讀器和其他輔助技術用來識別為導航區塊。<br>分頁結構<br>外層 nav 標籤<br>ul 使用 .pagination<br>li 使用 .page-item<br>a 使用 .page-link</p>



<p>Disabled and active states<br>使用&nbsp;<code>.disabled</code>&nbsp;來顯示禁用狀態、&nbsp;<code>.active</code>&nbsp;顯示當前頁數。<br>您可以選擇將 active 或 disabled 的錨點改為&nbsp;<code>&lt;span&gt;</code>，或是在上一個/下一個箭頭的情況下，省略連結以刪除點擊功能，在保留預期樣式的同時防止鍵盤 focus。</p>



<p>Sizing<br>使用 pagination-lg, pagination-sm 改變大小。</p>



<p>Alignment<br>使用 Utilities 進行對分頁對齊（置中、置右）。</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/pagination/" target="_blank">元件 &gt; 分頁 (Pagination)</a></li></ul>



<h3>佔位符 (Placeholders)</h3>



<p>應該是 v5.1 新功能。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/placeholders/" target="_blank" rel="noreferrer noopener">元件 &gt; 佔位符 (Placeholders)</a></li></ul>



<h3>彈出提示框 (Popovers)</h3>



<p>Example<br>注意：Popovers 預設是不會啟用的！<br>使用 Popover 在專案中：<br>元素加入：data-bs-toggle=”popover”、<br>title 屬性加入標題、<br>data-bs-content=”…” 加入內文、<br>加入相關 JavaScript（請放在 HTML 文件最後)。</p>



<p>Four directions<br>使用 data-bs-placement 加入 top, right, bottom, left 改變呈現的方向。</p>



<p>Dismiss on next click<br>點擊外部隱藏 Popover 可以加入 data-bs-trigger=”focus”，注意：在此請使用 a 標籤搭配 tabindex=”0″。</p>



<p>Disabled elements<br>對於禁用的彈出提示框觸發，您可能傾向使用&nbsp;<code>data-bs-trigger="hover focus"</code>&nbsp;來直接為用戶提供視覺回饋，因為用戶預期不會去&nbsp;<em>點擊</em>&nbsp;禁用的元素。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/popovers/" target="_blank" rel="noreferrer noopener">元件 &gt; 彈出提示框 (Popovers)</a></li></ul>



<h3>進度條 (Progress) ★</h3>



<p>How it works<br>外層使用 .progress 定義結構、<br>我們在內層使用 .progress-bar 來指定進度條目前的值。<br>為以下的 .progress-bar 加上寬度。</p>



<p>Labels<br>在&nbsp;<code>.progress-bar</code>&nbsp;中放置文字內容。</p>



<p>Height<br>為以下 progress 設置高度。</p>



<p>Backgrounds<br>使用背景色 Utilities 套用不同背景色。</p>



<p>Multiple bars<br>一個 .progress 內也可有多個 .progress-bar 已呈現堆疊的效果。</p>



<p>Striped<br>加入 .progress-bar-striped 至以下範例中以呈現條紋的視覺效果。</p>



<p>Animated stripes<br>條紋漸變也可以製成動畫。 將&nbsp;<code>.progress-bar-animated</code>&nbsp;加到&nbsp;<code>.progress-bar</code>&nbsp;中。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/progress/" target="_blank" rel="noreferrer noopener">元件 &gt; 進度條 (Progress)</a></li></ul>



<h3>滾動監控 (Scrollspy)</h3>



<p>How it works<br>必須使用在 Bootstrap&nbsp;<a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.0/components/navs-tabs/" target="_blank">導覽元件 nav</a>&nbsp;或&nbsp;<a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.0/components/list-group/" target="_blank">列表群組 list group</a>.、<br>滾動監控需要在被監控的元素上設定&nbsp;<code>position: relative;</code>，通常是&nbsp;<code>&lt;body&gt;</code>.、<br>錨點 (<code>&lt;a&gt;</code>) 是必要的，且必須指向到該元素的 id.。</p>



<p>Example in navbar<br>被監控的結構需加上&nbsp;<code>position-relative</code>、<br>被監控的元素加上&nbsp;<code>data-bs-spy="scroll" data-bs-offset="0"</code>，並使用 data-bs-target 指向列表 id。<br>將&nbsp;<code>data-bs-spy="scroll" data-bs-target="#navbar-example2"</code>&nbsp;加入程式碼套用 scrollspy 的效果。</p>



<p>Example with nested nav<br>滾動監控也適用於巢狀的&nbsp;<code>.nav</code>。如果巢狀&nbsp;<code>.nav</code>&nbsp;是&nbsp;<code>.active</code>, 它的父層也會是&nbsp;<code>.active</code>&nbsp;狀態。</p>



<p>Example with list-group</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/scrollspy/" target="_blank" rel="noreferrer noopener">元件 &gt; 滾動監控 (Scrollspy)</a></li></ul>



<h3>讀取圖示 (Spinners) ★★</h3>



<p>Border spinner<br>使用 spinner-border 套用旋轉的讀取效果。</p>



<p>Colors<br>使用 text-{情境色} 來套用顏色。<br>原理：顏色是使用 CSS 變數中的 currentColor 來套用文字色彩。</p>



<p>Growing spinner<br>使用 spinner-grow 放大的讀取效果。<br>使用 text-{情境色} 來套用顏色。</p>



<p>Alignment<br>Margin<br>Placement<br>Flex<br>水平置中<br>垂直置中<br>Text align</p>



<p>Size<br>增加&nbsp;<code>.spinner-border-sm</code>&nbsp;和&nbsp;<code>.spinner-grow-sm</code>&nbsp;製作一個較小的讀取圖示。<br>使用自定義 CSS 或 inline 來根據需要更改尺寸，為以下元素加入 style=”width: 3rem; height: 3rem;” 的程式碼。</p>



<p>Buttons<br>在按鈕中加入讀取的視覺效果。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/spinners/" target="_blank" rel="noreferrer noopener">元件 &gt; 讀取圖示 (Spinners)</a></li></ul>



<h3>吐司 (Toasts) ★★</h3>



<p>Overview<br>出於效能原因吐司是選擇性加入的，所以<strong>您必須自己將它們初始化</strong>。</p>



<p>Examples<br>Basic<br>Toast 結構：<br>外層包含 .toast<br>內層包含 .toast-header, .toast-body<br>可使用 data-bs-dismiss=”toast” 關閉吐司元件</p>



<p>Live<br>實際展示，Toast 需要使用 JavaScript 手動將它開啟，請打開後方 JS 的註解。</p>



<p>Translucent<br>吐司包含半透明的結構。</p>



<p>Stacking<br>透過將吐司包裝於&nbsp;<code>.toast-container</code>&nbsp;來推疊。<br>也可以在吐司添加額外的控制項與元件。</p>



<p>Color schemes<br>一樣可以透過 Utilities 來客製化各種的樣式及色彩。</p>



<p>Placement<br>使用 Utilities 重新調整 Toast 的定位。<br>對於會推播更多通知的系統，請考慮使用包裝元素的方式，讓它們可以堆疊顯示。<br>還可以使用 flexbox 通用類別來對吐司做水平 和/或 垂直的對齊。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/toasts/" target="_blank" rel="noreferrer noopener">元件 &gt; 吐司 (Toasts)</a></li></ul>



<h3>工具提示框 (Tooltips) ★</h3>



<p>Examples<br>在預設情況下，Tooltip 並不會啟用，啟用方式：<br>元素中加入，data-bs-toggle=”tooltip”、<br>加入 title 內容、<br>開啟後方的 JavaScript。<br>使用 data-bs-placement={ top, right, bottom, left } 來改變 tooltip 的呈現方向。<br>加入自定義 HTML:<br>加入 data-bs-html=”true”、<br>title 內使用 html 結構。<br>禁用的元素<br>禁用的元素是無法被 hover、focus 的，如果要解決可以：<br>加入&nbsp;<code>data-bs-toggle="tooltip" title="Disabled tooltip"</code>、<br>補上&nbsp;<code>tabindex="0"</code>。</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/tooltips/" target="_blank" rel="noreferrer noopener">元件 &gt; 工具提示框 (Tooltips)</a></li></ul>



<h2>CH8 – JavaScript 操作</h2>



<h3>Bootstrap JS 操作簡介</h3>



<p>使用 data-bs 套用方法<br>請至少要載入 CDN 才能使用此方法</p>



<p>使用 JS 套用方法<br>CDN 中的 bootstrap 可單獨啟用此方法</p>



<p>搭配 Webpack 運作<br>在 Webpack 中，所有的 JS 都建議使用模組的方式引入，此方法較為進階，建議有 ESM 相關知識後再行學習即可。</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/modal/#methods" target="_blank">元件 &gt; 互動視窗 (Modal) &gt; 方法</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.0/getting-started/webpack/#installing-bootstrap" target="_blank" rel="noreferrer noopener">快速開始 &gt; Webpack</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">JavaScript 初始化行為</h3>



<p>使用建構函式調用 Bootstrap 方法</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/collapse/#methods" target="_blank" rel="noreferrer noopener">元件 &gt; 摺疊 (Collapse) &gt; 透過 JavaScript &gt; 方法</a></li></ul>



<h3 class="has-background" style="background-color:#ff6663">選項、方法以及事件</h3>



<p>options：建立實體時所傳入的參數<br>methods：實體建立以後可以調用的方法<br>events：實體方法觸發時的監聽事件</p>



<ul><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/modal/#via-javascript" target="_blank" rel="noreferrer noopener">元件 &gt; 互動視窗 (Modal) &gt; 透過 JavaScript</a></li></ul>



<h3>萬年不敗 jQuery</h3>



<p>十年不敗 jQuery</p>



<ul><li><a rel="noreferrer noopener" href="https://bootstrap5.hexschool.com/docs/5.1/components/toasts/#usage" target="_blank">元件 &gt; 吐司 (Toasts) &gt; Usage</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.1/components/tooltips/#example-enable-tooltips-everywhere" target="_blank" rel="noreferrer noopener">元件 &gt; 工具提示框 (Tooltips) &gt; 範例：在任何地方啟用工具提示</a></li></ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Vue 出一個電商網站 (4)</title>
		<link>/wordpress_blog/vue-hexschool-4/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Mon, 28 Mar 2022 01:06:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=581</guid>

					<description><![CDATA[第１１節：Vue&#160;出一個電商網站 (下) GitHub [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2>第１１節：Vue&nbsp;出一個電商網站 (下)</h2>



<h5>GitHub –&nbsp;<a href="https://github.com/GeeHsu/vue-dashboard-record" target="_blank" rel="noreferrer noopener">vue-dashboard-record</a></h5>



<h3>Dashboard&nbsp;新增模擬購物頁面&nbsp;–&nbsp;新增卡片式產品列表</h3>



<p>操作與講解</p>



<ol><li>接下來我們要來做模擬訂單的部分，不過在模擬訂單之前，我們先補一下這個登出的功能，那我們就直接打開 Navbar.vue 這個頁面，所以我們在製作登出的時候，它每個元件都可以獨立的運作。不過這登出難度並不會很高，所以這邊我們就不重頭講解，我們直接把現成的程式碼先貼進來之後，在講解說這段程式碼做了哪些事情，那上面這段是 Navbar 的元件，一樣是 const vm = this，const url 這段是 API 登出的路徑，在往下這裡確定登出之後就會把頁面轉回 /signin 的地方，(上面登出的連結補上 @click.prevent=”signout”)，那我們存檔來試一次看看。完成 Sign out 之後我們一樣可以測試先前的一些行為，像是我們在網址的地方直接輸入 admin/orders 能不能直接進去那個頁面，按下去是沒有任何的反應，當然你也可以透過 Console 來看一下它到底有沒有跳轉這個頁面、admin/orders，當然它是沒有跳轉頁面。</li><li>我們先來看一下模擬訂單的畫面，模擬訂單的畫面首先我們要先把上面這個列表先把它完成，完成之後我們下一個章節再來介紹怎麼取得單一筆的資料以及加入購物車的部分。</li><li>那麼這一段我們操作就會比較快一點，相關的行為跟先前都差不多，那一樣新增一個元件 pages/CustomerOrders.vue，這一段會提供現成的卡片的 Template 讓我們可以直接套用。這段我們就先把這個元件建起來。</li><li>接下來我們把新增的頁面加到 Vue Router 裡面來 import CustomerOrders from ‘@/components/pages/CustomerOrders’。import 進來之後我們要在下方新增相對應的路徑，我們可以先複製先前所建立好的 admin 路由，然後在往下建立一個相同的，但是這一段要不太一樣，我們在製作這一段的時候它不用掛在 admin 的頁面下面，我們可以用相同的模板但是我們不需要掛在 admin 下面，然後它的 component 是 CustomerOrder。但是它不需要經過驗證就可以使用，所以等一下可以直接透過這個路徑直接傳進來，路徑也要稍微調整一下、然後 name 也改一下。</li><li>接下來我們把這個路徑直接放到 Sidebar.vue 上面，to=”/customer_order”、然後存檔。接下來我們直接在登入的地方如果輸入 /customer_order 就可以直接進入這個頁面，但是如果在此我們想要進入其他路徑就會被登出。</li><li>我們在 CustomerOrders.vue 頁面下我們直接貼上現成的程式碼，因為這一段的流程跟先前非常接近，所以我們就不重頭寫一次給大家看。我們直接講解一下這裡做了哪些事情，和先前一樣我們先定義一個 products，並且加入用戶端取得資料的路徑。那麼用戶端取得資料的路徑我們要選擇的是<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D" target="_blank">客戶購物 [免驗證]</a>&nbsp;這一個、取得商品列表這一段，<strong>並不是用 admin 的那一段這裡要特別注意</strong>，然後一樣可以加入讀取的效果，然後取得資料之後將資料存到 products，然後接下來我們就可以把 products 的資料陳列在這上面。</li><li>那麼我們剛有使用讀取的效果，那讀取的效果也做好了。接下來我們要把卡片的資料內容補上，這裡可以使用 .row.mt-4 這是與上方有一些間距，那這個 row 是 Bootstrap 4 做格線用的，因為這個卡片是有運用道格線的技巧，接下來我們在把卡片整個貼進來，然後這裡使用 v-for=”item in products”，然後在補上一個 :key=”item.id”、我們來存檔一次。</li><li>我們回到畫面上重新整理，現在就可以看到這裡就有一張一張的卡片，我們只要將這些資料一個一個綁定上來就可以，現在我們將這些資料全部替換上來。上方有一張產品的圖片我們先把它加進來，可以使用 :style 等於裡面一樣是個物件，<strong>不過這裡要特別注意</strong>，background的時候後面的Image I 要大寫 Image (backgroundImage)，可以用 ES6 的反引號來製作這一段的連結 url，接下來我們要用$配合大括號，這是 ES6 反引號裡面插入變數的方法，然後使用 item.imageUrl，這是我們先前插入連結的方式，我們再重新整理看一下圖片有沒有進來。接下來下方有分類、以及標題、還有內容，相關內容我們就可以一一的補上。(備註：前者顯示僅有原價的、後者顯示僅有原價 + 優惠價。)，現在這個卡片列表已經完成了。</li><li>這段就先製作登出、以及模擬訂單的產品列表這一段。完成之後我們再繼續來製作加到購物車的部分。</li></ol>



<pre class="wp-block-code"><code>// 1. Navbar.vue
    &lt;ul class="navbar-nav px-3"&gt;
      &lt;li class="nav-item text-nowrap"&gt;
        &lt;a class="nav-link" href="#" @click.prevent="signout"&gt;Sign out&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

&lt;script&gt;
export default {
  name: 'Navbar',
  data () {
    return {
      msg: 'Welcome to Your Vue.js App'
    }
  },
  methods: {
    signout() {
      const api = `${process.env.APIPATH}/logout`;
      const vm = this;
      this.$http.post(api).then((response) =&gt; {
        // console.log(response.data);
        if (response.data.success) {
          // vm.$router.push('/login');
          vm.$router.push('/signin');
        }
      });
    }
  }
}
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// 4. router/index.js
// 把CustomerOrder給載進來
import CustomerOrder from '@/components/pages/CustomerOrders'

    // 客戶購物的路徑(使用與Dashboard相同的模板)
    {
      path: '/',
      name: 'Dashboard',
      component: Dashboard,
      children: &#91;
        // CustomerOrder的路徑
        {
          path: 'customer_order',
          name: 'CustomerOrder',
          component: CustomerOrder,
        },
      ],
    },</code></pre>



<pre class="wp-block-code"><code>// 5. Sidebar.vue
      &lt;ul class="nav flex-column mb-2"&gt;
        &lt;li class="nav-item"&gt;
          &lt;router-link  class="nav-link" to="/customer_order"&gt;
            &lt;i class="fas fa-shopping-cart"&gt;&lt;/i&gt;
            模擬訂單
          &lt;/router-link&gt;
        &lt;/li&gt;
      &lt;/ul&gt;</code></pre>



<pre class="wp-block-code"><code>// 6~8.  CustomerOrders.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="row mt-4"&gt;
      &lt;div class="col-md-4 mb-4" v-for="item in products" :key="item.id"&gt;
        &lt;div class="card border-0 shadow-sm"&gt;
          &lt;div style="height: 150px; background-size: cover; background-position: center"
            :style="{backgroundImage: `url(${item.imageUrl})`}"&gt;
          &lt;/div&gt;
          &lt;div class="card-body"&gt;
            &lt;span class="badge badge-secondary float-right ml-2"&gt;{{ item.category }}&lt;/span&gt;
            &lt;h5 class="card-title"&gt;
              &lt;a href="#" class="text-dark"&gt;{{ item.title }}&lt;/a&gt;
            &lt;/h5&gt;
            &lt;p class="card-text"&gt;{{ item.content }}&lt;/p&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h5" v-if="!item.price"&gt;{{ item.origin_price }}&lt;/div&gt;
              &lt;del class="h6" v-if="item.price"&gt;{{ item.origin_price }}&lt;/del&gt;
              &lt;div class="h5" v-if="item.price"&gt;{{ item.price }}&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer d-flex"&gt;
            &lt;button type="button" class="btn btn-outline-secondary btn-sm"&gt;
              &lt;i class="fas fa-spinner fa-spin"&gt;&lt;/i&gt;
              查看更多
            &lt;/button&gt;
            &lt;button type="button" class="btn btn-outline-danger btn-sm ml-auto"&gt;
              &lt;i class="fas fa-spinner fa-spin"&gt;&lt;/i&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data() {
    return {
      products: &#91;],
      isLoading: false,
    };
  },
  methods: {
    getProducts() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        vm.products = response.data.products;
        console.log(response);
        vm.isLoading = false;
      });
    },
  },
  created() {
    this.getProducts();
  },
};
&lt;/script&gt;</code></pre>



<h3>取得單一產品</h3>



<p>操作與講解</p>



<ol><li>做出彈出 Modal 的效果，像這樣子點起來之後它就會將這個 Modal 彈開，不過跟之前比較不一樣是它這個彈出 Modal 之前，它會取得資料之後再將 Modal 打開，然後在彈出 Modal 之後它還可以選購說它需要多少數量的產品。為什麼要這樣做，我們來看一下接下來可能會做到的作業，在作業的部分我們來看一下這個畫面，這裡面有非常多的產品，但是點擊這個搶購去的時候，它是到這個頁面再重新將資料取得一次。我們可以看一下上面的網址，上面是帶入 product/ 以及這個 product id，然後將這個產品的資料取出來，我們常常在呈現這個資料列表時它這裡所取得的資料並非完整的資料，如果要看詳細的資料會在重新取得單一筆的特定資料，所以在這裡要做的是我們點擊的時候才將完整的資料取出。</li><li>接下來我們來看一下取得單一筆資料的 API，這裡有一個單一商品細節，那單一商品的話我們取得跟先前差不多，不過這個 product 是沒有 s 的，我們在取得多筆資料的時候是有 s 的，那麼取得單筆是沒有 s 並且後面會帶上 id。</li><li>現在我們來製作取得單一筆資料的 Modal，我們要做的行為會放在查看更多的按鈕上，在這部分我們就可以在 methods 的部分先加上 getProduct 但是沒有 s、參數的話會帶上 id，然後先把大括號補上。接下來我們回到 &lt;html&gt; 的地方，我們將上面這個(&lt;button&gt;)查看更多補上 @click=”getProduct”，另外要帶上 id (@click=”getProduct(item.id)”)，那 id 的話在上面這裡有個 item，我們把 item 的 id 帶進來。接下來 id 之後，這段程式碼跟先前的差異不大，我們可以直接複製過來，複製過來之後將這個 s 去掉補上 id。</li><li>接下來我們就可以取得單一筆資料，然後我們取得單一筆資料會在 Modal 裡面顯示。Modal 的部分我們另外定義一個 product 的物件來存放 Modal 的資料，所以在這裡會有一個 vm.product = response.data.product;，不過在存放之前我們還是看一下這個結果是否正常。重新整理、打開 Console 來看一下，接下來點擊查看更多然後看一下這個資料內容，看起來是有正確的呈現，我們剛剛點擊的是 Vue 課程好棒棒，那麼我們把這個 product 打開之後這個 title 也是 Vue 課程好棒棒。</li><li>接下來我們把這個關掉之後回到 CustomerOrders.vue 的頁面上，這段是取得資料之後再將 Modal 打開，那 Modal 的話我們先前是使用 jQuery 的方式，在這裡也是用相同的方式，我們 import $ from ‘jquery’;，然後將 jquery 載進來。</li><li>載進來以後我們這個 Modal 就不完全重新製作了，裡面的內容跟先前都差異不大，所以我們這裡先複製已經製作好的部分，但是比較重要的地方我們在這裡還是會重新講解，像是這裡有許多的資料內容，像是這裡有 {{ product.title }}、content、description，這裡都是直接帶入的。</li><li>接下來我們要將 Modal 打開，那 Modal 打開的話我們就會把它放在 AJAX 結束之後將 Modal 打開，那這個 Modal 的名字叫做 #productModal，這個載入資料也要把它打開，所以我們在這個地方會先將資料讀取進來之後再將 Modal 打開，所以我們一打開 Modal 它基本上就會有資料，我們現在點擊查看更多，這個時候資料已經帶進來了。我們現在點擊查看更多，讀取之後這裡就會出現完整的資料。</li><li>不過在這部分我們要介紹一個比較不一樣的讀取方式，像是這裡已經有預設準備很多旋轉的讀取效果，那麼我們就要將這個全畫面的讀取效果替換成單一個的讀取效果，那我們在這個部分就可以再新增一個狀態叫做 status，在這個 status 內再新增一個值叫做 loadingItem。那這段是要判斷目前畫面上是哪一個元素正在讀取中，loadingItem 要存放的值就是產品的 id，所以在這裡我們可以把這個 isLoading 改成 status.loadingItem，然後這裡要替換的是 id。那當然讀取完之後我們要將值替換成空的，和先前一樣。接下來這個 loadingItem 我們要把它放到上面這個地方來，我們可以把剛剛的 loadingItem 帶上來 v-if 假設 status 的 loadingItem 與我們目前的 item.id 是相符合的時候，我們就會將這個讀取效果呈現出來。那我們也把這段複製過來，重新整理之後我們按下查看更多，這個時候會跳出一小段時間的讀取效果，然後在將這個畫面呈現出來。但是我們只有在點擊的那個物件上才會出現讀取效果、然後並且將相關的資料呈現出來。</li></ol>



<pre class="wp-block-code"><code>// 3~8. CustomerOrders.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="row mt-4"&gt;
      &lt;div class="col-md-4 mb-4" v-for="item in products" :key="item.id"&gt;
        &lt;div class="card border-0 shadow-sm"&gt;
          &lt;div style="height: 150px; background-size: cover; background-position: center"
            :style="{backgroundImage: `url(${item.imageUrl})`}"&gt;
          &lt;/div&gt;
          &lt;div class="card-body"&gt;
            &lt;span class="badge badge-secondary float-right ml-2"&gt;{{ item.category }}&lt;/span&gt;
            &lt;h5 class="card-title"&gt;
              &lt;a href="#" class="text-dark"&gt;{{ item.title }}&lt;/a&gt;
            &lt;/h5&gt;
            &lt;p class="card-text"&gt;{{ item.content }}&lt;/p&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h5" v-if="!item.price"&gt;{{ item.origin_price }}&lt;/div&gt;
              &lt;del class="h6" v-if="item.price"&gt;原價 {{ item.origin_price }} 元&lt;/del&gt;
              &lt;div class="h5" v-if="item.price"&gt;現在只要 {{ item.price }} 元&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer d-flex"&gt;
            &lt;button type="button" class="btn btn-outline-secondary btn-sm"
              @click="getProduct(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              查看更多
            &lt;/button&gt;
            &lt;button type="button" class="btn btn-outline-danger btn-sm ml-auto"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Modal CustomerOrders --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;{{ product.title }}&lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;img :src="product.imageUrl" class="img-fluid" alt=""&gt;
            &lt;blockquote class="blockquote mt-3"&gt;
              &lt;p class="mb-0"&gt;{{ product.content }}&lt;/p&gt;
              &lt;footer class="blockquote-footer text-right"&gt;{{ product.description }}&lt;/footer&gt;
            &lt;/blockquote&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h4" v-if="!product.price"&gt;{{ product.origin_price }} 元&lt;/div&gt;
              &lt;del class="h6" v-if="product.price"&gt;原價 {{ product.origin_price }} 元&lt;/del&gt;
              &lt;div class="h4" v-if="product.price"&gt;現在只要 {{ product.price }} 元&lt;/div&gt;
            &lt;/div&gt;
            &lt;select name="" class="form-control mt-3" v-model="product.num"&gt;
              &lt;option :value="num" v-for="num in 10" :key="num"&gt;
                選購 {{ num }} {{ product.unit }}
              &lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;div class="text-muted text-nowrap mr-3"&gt;
              小計 &lt;strong&gt;{{ product.num * product.price }}&lt;/strong&gt; 元
            &lt;/div&gt;
            &lt;button type="button" class="btn btn-primary"&gt;
              &lt;!-- &lt;i class="fas fa-spinner fa-spin" v-if="product.id === status.loadingItem"&gt;&lt;/i&gt; --&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery';

export default {
  data() {
    return {
      products: &#91;],
      product: {},
      status: {
        loadingItem: '',
      },
      isLoading: false,
    };
  },
  methods: {
    getProducts() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        vm.products = response.data.products;
        console.log(response);
        vm.isLoading = false;
      });
    },
    // 取得單一產品
    getProduct(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/product/${id}`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      this.$http.get(url).then((response) =&gt; {
        vm.product = response.data.product;
        $('#productModal').modal('show');
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.product.num = 1; // 所有商品初始值設置為 1
      });
    },
  },
  created() {
    this.getProducts();
  },
};
&lt;/script&gt;</code></pre>



<h5>討論串：查看更多選購數量問題</h5>



<p>商品預設顯示數量和回傳資料的 num 有關，<br>可以看到 CustomerOrders.vue 頁面中有使用 v-model=”product.num”<br>因此要調整這個預設數量<br>有兩個辦法</p>



<ol><li>可以在 Products.vue 頁面中新增關於 num 資料的詳細設定，如下：</li><li>可以在 CustomerOrders.vue 頁面的 getProduct 函式中，新增 vm.product.num = 1</li></ol>



<pre class="wp-block-code"><code>// 1. Products.vue
&lt;div class="form-group col-md-4"&gt;
  &lt;label for="num"&gt;預設單位&lt;/label&gt;
  &lt;input type="number" class="form-control" id="num" placeholder="請輸入預設單位" v-model="tempProduct.num" /&gt;
&lt;/div&gt;

// 這樣可以對每個商品的預設數量做調整。</code></pre>



<pre class="wp-block-code"><code>// 2. CustomerOrders.vue
getProduct(id){
  ...
  this.axios.get(url).then((response) =&gt; {
    console.log(response.data)
    vm.product = response.data.product;
    $('#productModal').modal('show')
    vm.product.num = 1;//多加了這行
    vm.status.loadingItem = '';
  });

// 這樣所有商品初始值就會變成1了。</code></pre>



<h5>討論串：如何將login改為首頁</h5>



<ul><li>若要改網站連結的路徑都是在 router/index.js 裡面去修改</li><li>課程只是示範顯示首頁的元件為 Dashboard 來當首頁，並不代表網站首頁都一定是 Dashboard，可自己選擇要用哪個元件來當首頁</li><li>路徑(path)的值可以自己去設定</li><li>名稱(name)的值相同會產生黃色錯誤</li></ul>



<h5>排除錯誤：we can’t find&nbsp;<code>`tsconfig.json` or `jsconfig.json`</code></h5>



<p><a rel="noreferrer noopener" href="https://vuejs.github.io/vetur/guide/setup.html#advanced" target="_blank">Vetur – Setup/Advanced</a></p>



<h5>修正：Navbar.vue</h5>



<pre class="wp-block-code"><code>// Navbar.vue
&lt;template&gt;
  &lt;nav class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow"&gt;
    &lt;a class="navbar-brand col-md-3 col-lg-2 mr-0 px-3" href="#"&gt;Company name&lt;/a&gt;
    &lt;button class="navbar-toggler position-absolute d-md-none collapsed"
      type="button" data-toggle="collapse" data-target="#sidebarMenu"
      aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation"&gt;
      &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;input class="form-control form-control-dark w-100"
      type="text" placeholder="Search" aria-label="Search" /&gt;
    &lt;ul class="navbar-nav px-3"&gt;
      &lt;li class="nav-item text-nowrap"&gt;
        &lt;a class="nav-link" href="#" @click.prevent="signout"&gt;Sign out&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'Navbar',
  data () {
    return {
      msg: 'Welcome to Your Vue.js App'
    }
  },
  methods: {
    signout() {
      const api = `${process.env.APIPATH}/logout`;
      const vm = this;
      this.$http.post(api).then((response) =&gt; {
        // console.log(response.data);
        if (response.data.success) {
          vm.$router.push('/login');
          // vm.$router.push('/signin');
        }
      });
    }
  }
}
&lt;/script&gt;</code></pre>



<h3>選購產品及加入購物車</h3>



<p>操作與講解</p>



<ol><li>這段要來介紹加入購物車，在加入購物車之前我們先來看一下這一段的操作行為，在這個畫面上我們按查看更多，裡面就可以加到購物車，不過加入購物車之前，這裡可以選擇數量，像是這裡我們選擇2的話，在按加入購物車，那下面這個購物車列表就會跳出我們加入了2堂。另外一個就是我們直接點選加入購物車，直接點選的話，我們就會加入1堂的數量，所以我們在這邊行為會有兩種。一種是可以選擇數量、另外一種是直接將單一筆加進去。</li><li>那我們來看 API(文件)的部分，在 API 的部分加入購物車這裡會傳入參數，參數的地方第一個是傳入產品的 id、第二個是傳入(產品的)數量，<strong>所以在這裡要特別注意，我們在傳入的時候基本上不會傳入產品的價格，用戶可以傳入產品的價格的話，用戶就可能可以篡改整個購物車最終所結帳的金額。</strong>所以這裡要特別注意，通常我們只會上傳 id，那金額的計算是由後端來決定的。</li><li>那我們來看一下購物車的列表，在購物車列表的地方這裡有一個 carts，那 carts 它裡面是個陣列，所以這裡面會有很多個產品，那產品的話它就會回傳它相關的價格、以及它產品的內容。<strong>還有這裡要特別注意，除了產品的列表之外，然後價格會有兩個，一個是它的原始價格、以及最終的價格，那這個最終價格會受到優惠券的影響，當然這也是一般電商在設計平台裡面最複雜的地方，因為價格的計算邏輯非常多種</strong>，但在課程中會用比較簡單的方式呈現給大家看。</li><li>接下來我們在回到 API 上面這一段，現在我們回到購物車這個地方，我們在來回顧一下參數的部分，參數的部分我們要傳入的是一個產品的 id、以及數量，那我們現在來開始撰寫 JavaScript 的部分。</li><li>我們一樣到 (CustomerOrders.vue) methods 這個地方，然後我們用 addtoCart()，然後這裡會傳入兩個參數，一個就是 id，product 的 id、以及它的數量 qty，這個數量它是基本上一定要傳入數量，傳入數量的話基本上最少就是1，所以這裡可以用 ES6 一個方法，叫做預設值。這裡如果使用 qty = 1的話，代表函式傳進來的時候，如果沒有帶入 qty，它會使用預設值1的方式。</li><li>接下來我們先把另外一個函式(getProduct(id))打開，因為執行的內容差不多，我們就先把另外一段給貼過來，貼過來之後我們把這邊的 API 的路徑稍微做一下調整，加入購物車是使用 cart，這裡一樣會有讀取，然後行為會改成 post，接下來我們要把資料結構定義起來，我們會使用 const cart 等於一個物件，那物件會傳入兩個參數，一個是 product_id，那 product_id 就是 id，那另外一個是 qty，那 qty 在這裡不用這樣子寫，我們可以只寫一個 qty 的變數，那這個的話就會直接將這 qty 以及它的值自動帶進來。接下來在把這個 cart 放到這個後方，然後我們在傳入的時候，要記得資料結構，它的資料結構是 data 裡面在包著購物車的內容，那麼我們把多餘的方法把它移除。</li><li>然後接下來我們把這個 addtoCart 加到 &lt;html&gt; 的部分來，在上面這個卡片的部分，這個加到購物車就可以把 @click=”addtoCart()” 帶進來，然後我們要帶進的參數是 item 的 id、以及數量，那數量的話我們可以不用帶，它的預設值就是1，加進來之後我們重新整理一下，看一下能不能順利的加入購物車。現在我們按一下這個加到購物車，按下去之後這裡有回傳一些訊息，這裡回傳訊息說 true、已經成功加入購物車了。</li><li>接下來我們要介紹一下 Modal 的部分，那 Modal 的部分我們這裡可以選擇數量，那麼數量的話我們先暫存在 product.num 裡面來，那這個 product 就是我們點下查看更多取回來的那個 product 資料，那我們就會把 num、就是數量的資訊先存在 product 這個物件裡面來。現在目前如果按下這個下拉選單，它只會跳出選購一件，因為我們是寫死這個數值，如果說我們要讓它可以選擇多筆的數量該怎麼做，我們在這裡可以使用 v-for 等於 num in 固定的數量，比如說我們可以直接輸入10，那接下來這個 num 就是從1~10，後面要記得帶上 :key 等於 num。value 的部分我們就可以把 num 帶上來，就是數量、選擇的數量，不過記得把這個 value 改成動態屬性。接下來我們在把相關的文字帶上去，選購幾件，後面這個件我們一樣可以把它改成 product 的 unit，那這樣子的話就會變成選購多少數量、以及數量的單位，我們存檔試一次看看、重新整理。接下來按查看更多，那這邊的下拉選單就會出現選購幾堂，那這個堂這個字就是我們帶入的 product.unit，加到購物車的時候，我們就可以帶入 product 的 id、以及 product 的數量，然後存檔。現在我們來試著來送出不同數量的數值，這裡我們就可以按選購5堂、然後按加到購物車，這裡的話回傳的數值就會跳出 success、然後我們的數量是5，我們把5堂的 Vue 的課程加到購物車。</li><li>當然我們這裡按下選購幾堂之後要記得把這個 Modal 也關掉，那在這個部分我們就可以在一樣的把 Modal 關掉，這裡有個 modal(‘show’)，我們把這個 modal(‘show’) 一樣把它貼過來，把它改成 modal(‘hide’)，加到購物車之後就把這個 Modal 隱藏起來，購物車完成之後我們就可以在取得購物車的內容，就是 getCart()，取得購物車的內容其實方法都跟之前差不多，我們在把先前的 API (getProducts()) 複製過來，那複製過來之後把這個 product 換成 cart，其他的行為差距不大，我們接下來把這個 getCart() 完成之後要記得在一開始的時候，我們就把購物車也取得回來、this.getCart();，然後另外一個就是加入購物車之後也一樣要把購物車給取得回來，vm.getCart();，我們來看一下這個購物車有沒有正確的取得，我們來看一下 Console、然後按加到購物車，加到購物車之後會有兩次 AJAX 的行為，第一次是將物件加到購物車內、第二個是將購物車的資料取得回來，那取得回來之後這裡就有一些資訊，它是放在 data 的 data 內，這裡會有兩個總價，一個是 total、一個是 final_total，final_total 就是經過計算可能是有一些優惠等等的，然後下方有另外一個是購物車的內容，那我們就可以把這購物車的內容再把它呈現出來。呈現的方式就會像這樣子，有表格、然後這裡有品名、數量、以及單價，那下方還有總計。</li><li>購物車的列表這一段就讓大家自己練習，下個章節我們要來介紹怎麼刪除單一個商品、以及套用優惠碼的細節，如果沒有問題的話，大家先製作這一段。</li></ol>



<pre class="wp-block-code"><code>// CustomerOrders.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="row mt-4"&gt;
      &lt;div class="col-md-4 mb-4" v-for="item in products" :key="item.id"&gt;
        &lt;div class="card border-0 shadow-sm"&gt;
          &lt;div style="height: 150px; background-size: cover; background-position: center"
            :style="{backgroundImage: `url(${item.imageUrl})`}"&gt;
          &lt;/div&gt;
          &lt;div class="card-body"&gt;
            &lt;span class="badge badge-secondary float-right ml-2"&gt;{{ item.category }}&lt;/span&gt;
            &lt;h5 class="card-title"&gt;
              &lt;a href="#" class="text-dark"&gt;{{ item.title }}&lt;/a&gt;
            &lt;/h5&gt;
            &lt;p class="card-text"&gt;{{ item.content }}&lt;/p&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h5" v-if="!item.price"&gt;{{ item.origin_price }}&lt;/div&gt;
              &lt;del class="h6" v-if="item.price"&gt;原價 {{ item.origin_price }} 元&lt;/del&gt;
              &lt;div class="h5" v-if="item.price"&gt;現在只要 {{ item.price }} 元&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer d-flex"&gt;
            &lt;button type="button" class="btn btn-outline-secondary btn-sm"
              @click="getProduct(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              查看更多
            &lt;/button&gt;
            &lt;button type="button" class="btn btn-outline-danger btn-sm ml-auto"
              @click="addtoCart(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Modal CustomerOrders --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;{{ product.title }}&lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;img :src="product.imageUrl" class="img-fluid" alt=""&gt;
            &lt;blockquote class="blockquote mt-3"&gt;
              &lt;p class="mb-0"&gt;{{ product.content }}&lt;/p&gt;
              &lt;footer class="blockquote-footer text-right"&gt;{{ product.description }}&lt;/footer&gt;
            &lt;/blockquote&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h4" v-if="!product.price"&gt;{{ product.origin_price }} 元&lt;/div&gt;
              &lt;del class="h6" v-if="product.price"&gt;原價 {{ product.origin_price }} 元&lt;/del&gt;
              &lt;div class="h4" v-if="product.price"&gt;現在只要 {{ product.price }} 元&lt;/div&gt;
            &lt;/div&gt;
            &lt;select name="" class="form-control mt-3" v-model="product.num"&gt;
              &lt;option :value="num" v-for="num in 10" :key="num"&gt;
                選購 {{ num }} {{ product.unit }}
              &lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;div class="text-muted text-nowrap mr-3"&gt;
              小計 &lt;strong&gt;{{ product.num * product.price }}&lt;/strong&gt; 元
            &lt;/div&gt;
            &lt;button type="button" class="btn btn-primary"
              @click="addtoCart(product.id, product.num)"&gt;
              &lt;!-- &lt;i class="fas fa-spinner fa-spin" v-if="product.id === status.loadingItem"&gt;&lt;/i&gt; --&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery';

export default {
  data() {
    return {
      products: &#91;],
      product: {},
      status: {
        loadingItem: '',
      },
      isLoading: false,
    };
  },
  methods: {
    getProducts() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        vm.products = response.data.products;
        console.log(response);
        vm.isLoading = false;
      });
    },
    // 取得單一產品
    getProduct(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/product/${id}`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      this.$http.get(url).then((response) =&gt; {
        vm.product = response.data.product;
        $('#productModal').modal('show');
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.product.num = 1; // 所有商品初始值設置為 1
      });
    },
    // 加入購物車
    addtoCart(id, qty = 1) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      const cart = {
        product_id: id,
        qty,
      };
      this.$http.post(url, { data: cart }).then((response) =&gt; {
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.getCart();
        $('#productModal').modal('hide');
      });
    },
    // 取得購物車的內容
    getCart() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        // vm.products = response.data.products;
        console.log(response);
        vm.isLoading = false;
      });
    },
  },
  created() {
    this.getProducts();
    this.getCart();
  },
};
&lt;/script&gt;</code></pre>



<h3>刪除購物車品項及新增優惠碼</h3>



<p>操作與講解</p>



<ol><li>這個地方已經把購物車的列表都已經呈現出來了，那購物車(列表)的部分還缺少刪除以及加入優惠券的部分，那我們來看一下 API，API 的部分如果刪除特定的一筆資料其實也蠻單純的，就是將 API 的路由帶進去之後，後面在補上購物車內的產品 id 就可以了。那麼另外一個套用優惠券，比較不一樣是說我們要上傳的是優惠碼，那麼先前有請大家先製作優惠券的頁面，如果你已經做好優惠券的頁面的話，也就可以製作這一段，就是將優惠碼也套用進來。那麼套用優惠碼之後，它的價格也會調整，所以每次套用優惠券後，這整個購物車也必需要重新取得。</li><li>我們這個地方先來製作刪除特定購物車內容的部分，一樣回到下方(CustomerOrders.vue)，下面這個地方我們可以先把 AJAX 的操作先複製起來，接下來再新增一個行為叫做 removeCartItem() 的方法，然後並且把剛剛複製的 AJAX 行為先貼進來，那麼刪除購物車商品的時候它必須帶入 id，我們就可以把這個 id 一樣貼到這個後方 ${id}，<strong>然後要特別注意</strong>，在這個部分操作並不是使用 get 或 post，所使用的是 delete，我們會送出刪除的行為，然後後端就會把這一筆資料給刪掉，在刪除之前我們先把多的行為先把它關掉、然後把這個 removeCartItem() 貼到上面刪除的按鈕上面，我們使用 @click 等於 removeCartItem() 之後，並且把 item 的 id 帶進來。</li><li>那我們來試試看能不能正確的刪除，我們重新整理、然後打開 Console，這個時候按下這個刪除的按鈕，刪除之後這裡會跳出一個訊息就是已經刪除，那麼刪除之後記得整個購物車也要重新取得，我們再把後面的程式碼補上，刪除之後我們再重新取得購物車的內容(vm.getCart();)，當然讀取效果也要把它關掉，那我們重新整理，重新整理之後這裡購物車只剩一個品項、把它刪掉，刪除之後這裡就沒有品項，那實際製作的時候要確定購物車有沒有內容才顯示這個畫面，假設購物車都沒有內容的時候要記得把這個畫面把它隱藏起來，現在我們再把一些品項給加進來。</li><li>加進來之後，接下來我們要來套用優惠碼的部分，那套用優惠碼之前，這裡來跟大家講一個小技巧，這裡我們先準備好一個註解，那這個註解要呈現的是最終的一個價錢，那我們先存檔來試一次看看。現在因為我們沒有套用優惠券，所以這裡會有個總計的價錢、下面會有個折扣價，但是這兩個價格如果都同樣的時候，其實這個折扣價不需要出現，所以我們可以做個比對，假設 final_total 的價錢不等於 cart.total 的時候它才會顯示這一段，那我們重新整理、重新整理之後下面的我們比對之後總計下方就不會出現折扣價，接下來我們在把優惠碼給補上。</li><li>那優惠碼的部分這裡已經準備好表單，上方是一個 &lt;input&gt;、下方是一個按鈕，那在上面的部分，我們就可以補上一個 v-model 等於 coupon_code，那下方的部分我們就可以補上行為，不過在補上行為之前，我們先把行為寫出來，資料的部分剛剛有新增一個 coupon_code 先是一個空的(值)，然後接下來我們在把上面這一段(removeCartItem(id)裡面的程式碼)先複製一份，然後摺疊起來，addCouponCode()，然後把剛剛複製的那一段貼上來，那我們來看一下 coupon_code 的資料結構是什麼樣子，coupon_code 的資料結構是 data 裡面有個 code，那這個 code 裡面才包著你所提供的優惠碼。那我們在這裡就在宣告一個 coupon 等於 code、然後對應的是剛剛所新宣告的一個 coupon_code 的變數，那這裡剛剛是使用 delete，那我們要再把它改成 post、然後送出 data: coupon ，然後 API 的路徑也記得要稍作調整，這裡對應的是 coupon 的 API，不過套用前我們先來看一下它是否有正常的運作。程式碼寫好之後記得把這個(addCouponCode)行為放回剛剛的按鈕上，@click 等於 addCouponCode。</li><li>接下來這個地方我們就輸入優惠碼，先輸入錯誤的優惠碼試試看，輸入之後這邊會跳出兩個 request，第一個是送出優惠碼的訊息，那這裡就會出現 success: false，所以我們這裡的驗證還要加上一個 success: false、然後它會出現找不到優惠券，所以這邊就沒有套用優惠券的內容。接下來我們這裡輸入正確的優惠碼是 code，這 code 是我們從優惠券的後台去新增的，所以我們要新增自己的優惠碼才能套用，那這個地方就套用優惠券，套用優惠券之後這裡就會已經套用優惠券，並且在這個地方就會出現折扣價，然後接下來我們把購物車的內容在打開看一下，購物車的內容在 data 裡面，這裡面還是一樣有每個產品的內容，然後這裡就會多一個 coupon，我們在套用這 coupon 的時候是將這個 coupon_code 套用在每個商品上，所以每個商品的價錢也都會有調整，這裡的價錢就會不太一樣，原價是1650，那麼在套用之後這個優惠券就會影響這個的價錢。</li><li>那麼如果說我們要知道哪些產品有套用優惠碼的話，我們一樣可以在這個地方加入我們這邊有先註解好的一段，假設它裡面有包含優惠券的話就會跳出已套用優惠券的字樣，那麼我們重新整理一下、重新整理之後，這裡所有的商品就會套用優惠券的字樣，所以這些就是已經有套用優惠券的商品。</li><li>如果沒有問題的話，我們就準備到下一個章節，要把訂單給送出囉</li></ol>



<pre class="wp-block-code"><code>// CustomerOrders.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="row mt-4"&gt;
      &lt;div class="col-md-4 mb-4" v-for="item in products" :key="item.id"&gt;
        &lt;div class="card border-0 shadow-sm"&gt;
          &lt;div style="height: 150px; background-size: cover; background-position: center"
            :style="{backgroundImage: `url(${item.imageUrl})`}"&gt;
          &lt;/div&gt;
          &lt;div class="card-body"&gt;
            &lt;span class="badge badge-secondary float-right ml-2"&gt;{{ item.category }}&lt;/span&gt;
            &lt;h5 class="card-title"&gt;
              &lt;a href="#" class="text-dark"&gt;{{ item.title }}&lt;/a&gt;
            &lt;/h5&gt;
            &lt;p class="card-text"&gt;{{ item.content }}&lt;/p&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h5" v-if="!item.price"&gt;{{ item.origin_price }}&lt;/div&gt;
              &lt;del class="h6" v-if="item.price"&gt;原價 {{ item.origin_price }} 元&lt;/del&gt;
              &lt;div class="h5" v-if="item.price"&gt;現在只要 {{ item.price }} 元&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer d-flex"&gt;
            &lt;button type="button" class="btn btn-outline-secondary btn-sm"
              @click="getProduct(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              查看更多
            &lt;/button&gt;
            &lt;button type="button" class="btn btn-outline-danger btn-sm ml-auto"
              @click="addtoCart(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Modal CustomerOrders --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;{{ product.title }}&lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;img :src="product.imageUrl" class="img-fluid" alt=""&gt;
            &lt;blockquote class="blockquote mt-3"&gt;
              &lt;p class="mb-0"&gt;{{ product.content }}&lt;/p&gt;
              &lt;footer class="blockquote-footer text-right"&gt;{{ product.description }}&lt;/footer&gt;
            &lt;/blockquote&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h4" v-if="!product.price"&gt;{{ product.origin_price }} 元&lt;/div&gt;
              &lt;del class="h6" v-if="product.price"&gt;原價 {{ product.origin_price }} 元&lt;/del&gt;
              &lt;div class="h4" v-if="product.price"&gt;現在只要 {{ product.price }} 元&lt;/div&gt;
            &lt;/div&gt;
            &lt;select name="" class="form-control mt-3" v-model="product.num"&gt;
              &lt;option :value="num" v-for="num in 10" :key="num"&gt;
                選購 {{ num }} {{ product.unit }}
              &lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;div class="text-muted text-nowrap mr-3"&gt;
              小計 &lt;strong&gt;{{ product.num * product.price }}&lt;/strong&gt; 元
            &lt;/div&gt;
            &lt;button type="button" class="btn btn-primary"
              @click="addtoCart(product.id, product.num)"&gt;
              &lt;!-- &lt;i class="fas fa-spinner fa-spin" v-if="product.id === status.loadingItem"&gt;&lt;/i&gt; --&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- 購物車列表 --&gt;
    &lt;div class="my-5 row justify-content-center"&gt;
      &lt;div class="col-md-6"&gt;
        &lt;table class="table"&gt;
          &lt;thead&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;品名&lt;/th&gt;
            &lt;th&gt;數量&lt;/th&gt;
            &lt;th&gt;單價&lt;/th&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr v-for="item in cart.carts" :key="item.id" v-if="cart.carts"&gt;
              &lt;td class="align-middle"&gt;
                &lt;button type="button" class="btn btn-outline-danger btn-sm"
                  @click="removeCartItem(item.id)"&gt;
                  &lt;i class="far fa-trash-alt"&gt;&lt;/i&gt;
                &lt;/button&gt;
              &lt;/td&gt;
              &lt;td class="align-middle"&gt;
                {{ item.product.title }}
                &lt;div class="text-success" v-if="item.coupon"&gt;
                  已套用優惠券
                &lt;/div&gt;
              &lt;/td&gt;
              &lt;td class="align-middle"&gt;{{ item.qty }}/{{ item.product.unit }}&lt;/td&gt;
              &lt;td class="align-middle text-right"&gt;{{ item.final_total }}&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
          &lt;tfoot&gt;
            &lt;tr&gt;
              &lt;td colspan="3" class="text-right"&gt;總計&lt;/td&gt;
              &lt;td class="text-right"&gt;{{ cart.total }}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr v-if="cart.final_total !== cart.total"&gt;
              &lt;td colspan="3" class="text-right text-success"&gt;折扣價&lt;/td&gt;
              &lt;td class="text-right text-success"&gt;{{ cart.final_total }}&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tfoot&gt;
        &lt;/table&gt;
        &lt;div class="input-group mb-3 input-group-sm"&gt;
          &lt;input type="text" class="form-control" v-model="coupon_code" placeholder="請輸入優惠碼"&gt;
          &lt;div class="input-group-append"&gt;
            &lt;button class="btn btn-outline-secondary" type="button" @click="addCouponCode"&gt;
              套用優惠碼
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery';

export default {
  data() {
    return {
      products: &#91;],
      product: {},
      status: {
        loadingItem: '',
      },
      cart: {},
      isLoading: false,
      coupon_code: '',
    };
  },
  methods: {
    getProducts() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        vm.products = response.data.products;
        console.log(response);
        vm.isLoading = false;
      });
    },
    // 取得單一產品
    getProduct(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/product/${id}`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      this.$http.get(url).then((response) =&gt; {
        vm.product = response.data.product;
        $('#productModal').modal('show');
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.product.num = 1; // 所有商品初始值設置為 1
      });
    },
    // 加入購物車
    addtoCart(id, qty = 1) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      const cart = {
        product_id: id,
        qty,
      };
      this.$http.post(url, { data: cart }).then((response) =&gt; {
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.getCart();
        $('#productModal').modal('hide');
      });
    },
    // 取得購物車的內容
    getCart() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        // vm.products = response.data.products;
        vm.cart = response.data.data;
        console.log(response);
        vm.isLoading = false;
      });
    },
    // 刪除購物車品項
    removeCartItem(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart/${id}`;
      vm.isLoading = true;
      this.$http.delete(url).then(() =&gt; {
        vm.getCart();
        vm.isLoading = false;
      });
    },
    // 新增優惠碼
    addCouponCode() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/coupon`;
      const coupon = {
        code: vm.coupon_code,
      };
      vm.isLoading = true;
      this.$http.post(url, { data: coupon }).then((response) =&gt; {
        console.log(response);
        vm.getCart();
        vm.isLoading = false;
      });
    },
  },
  created() {
    this.getProducts();
    this.getCart();
  },
};
&lt;/script&gt;</code></pre>



<h3>*建立訂單及表單驗證技巧</h3>



<h5>資源</h5>



<ul><li><a href="https://vee-validate.logaretm.com/v2/" target="_blank" rel="noreferrer noopener">Vee Validate 套件 – 課程版本</a></li><li><a href="https://vee-validate.logaretm.com/v2/guide/events.html#changing-default-events" target="_blank" rel="noreferrer noopener">Vee Validate 驗證事件 – 課程版本</a></li><li><a href="https://vee-validate.logaretm.com/v4/" target="_blank" rel="noreferrer noopener">Vee Validate 套件 – 更新版</a></li><li><a href="https://vee-validate.logaretm.com/v4/" target="_blank" rel="noreferrer noopener">Vee Validate 驗證事件 – 更新版</a></li></ul>



<p>操作與講解</p>



<ol><li>接下來來到建立訂單的部分，這個地方也是蠻重要而且比較困難的地方，我們在建立訂單的時候會把原本所選的購物車的內容全部刪掉，然後它會成立一個新的訂單，那麼在訂單送出前也必需把用戶的一些相關資訊也都存下來。</li><li>那我們來看一下畫面在這個部分會做什麼事情，下面這個地方就是訂單所要填入的內容，在這個部分最困難的就是說這個訂單不能隨意讓用戶送出，像我們現在直接按下送出訂單，這個訊息它會直接被阻擋，並且如果點一些特定的欄位，它會跳出提示說姓名欄位不得留空，在這個地方我們來填入錯誤的 email 內容，這裡會跳出說 email 必需是有效的電子郵件地址，所以我們在輸入這個表單的時候，要特別做這樣的驗證，不能讓用戶隨意送出空的表單內容。</li><li>這個時候就可以使用一個套件叫 vee-validate，這個套件使用上蠻容易的，等下課程也會介紹怎麼使用這個套件，而且這個套件還包含中文的語系檔，所以可以直接的使用。它可以在畫面上加入一些條件，像是這裡就可以要求說一定要 email 格式、或者是使用正規式的方式來驗證這個表單內容是否正確。VeeValidate 這個套件跟 Bootstrap 也是沒有問題的，那我們來開始製作。</li><li>我們回到畫面上，下方這個地方還沒有表單內容，那表單這部分我們就不重頭打，會直接提供現成的給大家，我們把表單的格式直接貼進來、重新排版，調整好之後，下面要建立對應的資料格式，那麼這個資料格式大家要記得對應送出的&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D#%E7%B5%90%E5%B8%B3%E9%A0%81%E9%9D%A2" target="_blank">API 的結構</a>，所以在這裡我們就要建立 form，那這個表單的結構大家可以直接參考 API 所提供的格式。</li><li>那下面的部分我們就來開始撰寫 AJAX，但是這個 AJAX 跟先前的方法也都差異不大，所以這段我們就加速帶過，訂單完成之後，補上一個訂單已建立的字樣，那這裡還沒有完成，先做到這部分就可以，接下來把這個 createOrder 加到這個表單上面來，這個方法可以清除它預設的 submit 行為、我們存檔。</li><li>存檔之後我們來看一下，這個表單格式錯誤、表單完成以後，我們先不要做驗證，先試試看這個送出的行為是否正確，那我們先輸入假的資料、然後將這個訂單給送出，那這個時候會跳出訂單已建立，所以我們現在 AJAX 行為是沒有問題的，接下來我們要來製作驗證的部分。</li><li>我們打開 Terminal(終端機)，然後將這個驗證工具把它裝下來，驗證工具安裝、npm install vee-validate，存檔(安裝)這部分一樣花一些時間，這部分我們就先來準備一些後面所需要的程式碼，它一樣是需要做 import，那我們打開 main.js，那我們就先把它給 import 進來，import 進來之後它一樣去啟用它、Vue.use(VeeValidate) 把它啟用、存檔之後，我們來將服務 run 起來 npm run dev。</li><li>這裡有寫一下它的使用方式，它的使用方式就是在你的元件上面加上 v-validate 這個字樣，那我們先把它加上來，先使用收件人姓名這個部分，我們把它加上來、然後後面 email 的部分先把它拿掉，我們先加上 required 就好、存檔。然後回到我們畫面上、重新整理這裡不會有任何變化，我們先試著把錯誤的訊息把它抓出來，下方有一個 &lt;span&gt; 這裡是會輸出紅色的字樣，我們先用兩個大括號使用 errors 這個是它所提供的一個變數、然後 has，然後假設它有 name 這個欄位，它對應的是我們 &lt;input&gt; 裡面 name 這個屬性，那剛好我們這個名稱是一樣，是叫做 name，那我們把它輸入進來、然後存檔 (註：在此條件是 “required”，所以是不得為空)。這個條件是當它被觸發之後，然後它的 name 並不存在的話，它就會跳出這個錯誤、那我們重新整理一下，重新整理我們到畫面上之後，現在我們還沒有觸發它，所以他現在是跳出 false，那麼我們先輸入一些內容，它還是 false，可是當這個欄位清空之後，它就會跳出 true，也就是說它這個欄位當被觸發過之後，但是如果他沒有輸入內容的話，它就會跳出錯誤，那我們再重新整理一次。現在我們先直接點一下、然後移出來(點空白處)，這個時候它就算錯誤。我應該要輸入這個欄位，但是我跳過的話，這個就算錯誤。</li><li>那接下來我們就可以用這個方式驗證它，當它為 true 的時候、當它為錯誤的時候，我們就顯示這個欄位 v-if=”errors.has(‘name’)”，那這個 name 是對應上面那個 name (值那個 name)，然後(&lt;span&gt;標籤內修改成姓名必須輸入)、存檔之後我們在重新整理，現在是空的、但是如果說我們點一下這個欄位、然後在點一下外面它就會跳出這個錯誤，姓名必須輸入，那這個方式我們也可以套用在這個 &lt;input&gt; 的 class 上面，我們可以在這個 &lt;input&gt; 上面再加上一個 :class 把它改為一個物件，前方我們加入 ‘is-invalid’，代表說它的驗證是錯誤的，那它的條件就是 errors.has(‘name’) 的時候，它會出現紅色的框框，那我們來試一次看看。重新整理之後，我們點一下收件者姓名、然後在點一下外面，這個時候它的框框就變紅色的，而且會跳出姓名必須輸入的字樣。</li><li>接下來我們來製作 Email 這個欄位，Email 這個欄位製作方式跟其他有一些些不同，我們直接參照它的官網，有一些特定的欄位它有提供特殊的驗證方法，那我們這一段就直接使用它的 Email 驗證，接下來我們回到 CustomerOrders.vue 的頁面上面來、然後並且將 v-validate 貼進來，貼進來之後它就會自動驗證 Email，那下方這個地方我們一樣用 v-if 去判斷 email 這個欄位是否正確，接下來裡面這一段驗證可以用它所提供的另一個方法，errors.first 然後括號、使用 email 這個欄位，這個方式會比較特別，它會直接告訴你說你的 Email 輸入錯誤在哪裡、那我們存檔。接下來重新整理之後，我們先點一下 Email 這個欄位，點一下之後再點擊外面，它會回應說這個欄位是必須的。那我們再輸入一些東西，那我們隨便輸入一些文字之後，這會跳出這個 Email 的欄位它不是有效的 Email 格式，用這種方式它就可以提供一些額外的回饋訊息，那當然如果說我們把它輸入成正確的格式，它這個回饋訊息就會移掉。現在這個回饋訊息由於是英文的，那當然我們會希望用中文的方式來呈現這個回饋訊息，我們就可以做一些些簡單的調整，就可以把它改成中文的回饋。</li><li>我們回到 main.js 、並且回到它的 node_modules 裡面(有個 vee-validate)，然後裡面有個 dist，dist 下面有一個 locale，這個 locale 下就是各種語系的檔案，那我們就把這個 locale import 進來，假設我們在這裡需要中文的話、import，import 之後就必需啟用它，接下來我們把它的、接下來選擇 Validator 這個物件，下方還有一個 localize 的一個方法，那這個方法就可以將中文語系載進來，zh_TW 然後把這個語系檔給載進來，這個載入方式比較特別，不過在它的文件裡面也有寫到，在這部分我們就直接打給大家看、存檔之後就可以使用它的中文語系。在這個部分它要求我們的單字要改一下、改成這樣，接下來存檔，存檔之後我們回到畫面上，我們再來試一次這個 Email 的格式，這個時候它就會改成中文的回饋，如果說我們改成錯誤的話，它一樣會跳出對應的訊息。</li><li>我們現在在看一下這個表單的部分，現在這個表單這個欄位，我們一樣留空，但是我們按下送出訂單，這個時候會跳出一個請填寫這個欄位，這個請填寫這個欄位是 Chrome 自動跳出來，只要你在 &lt;input&gt; 裡面有加上 required 的話，它就會跳出這個訊息，那假設說我們不要使用這個 required，我們要使用這個套件的功能，要阻止它送出的話，該怎麼做，像我們現在把這個 required 拿掉，如果按下送出，它是真的會送出這個表單，所以我們現在要確保我們在送出的時候，它的欄位是符合我們的套件的要求的、該怎麼做，我們在滑到下方程式碼的部分，它在它的 API 裡面有提供其中一段，就是在我們 submit 的時候可以先做一下我們套件的驗證。我們現在直接把這一段複製下來，貼到我們的程式碼裡面，這個 result 要加上括號，加進來之後，假設這邊有一個 if result 為 true 的時候，把這一段貼進來，那在另外一個地方加上 else 假設沒有成功的時候，我們跳出欄位不完整，我們先使用 console 來做一下就可以了，並且把這個 isLoading 拿掉，因為這個會擋到我們的畫面、然後存檔。接下來回到畫面上重新整理、然後我們這個時候按下送出訂單，按下去之後(Console)會跳出欄位不完整，並且我們往上看這上面的部分都會全部算是被驗證過的狀態，如果說我們這個欄位完全都沒有碰過，它一樣會顯示這個紅色的錯誤。</li><li>這邊就是一個比較完整的驗證模式，現在這個部分就給大家自己練習，把這個表單完整的製作完成，並且可以送出表單的狀態。</li></ol>



<pre class="wp-block-code"><code>// 7. VeeValidate 安裝
// npm
npm install vee-validate --save</code></pre>



<pre class="wp-block-code"><code>// 7. main.js
// import VeeValidate
import VeeValidate from 'vee-validate'</code></pre>



<h5>版本問題</h5>



<pre class="wp-block-code"><code>// 移除 vee-validate 套件 3.x.x 版本
npm uninstall vee-validate --save

// 安裝 vee-validate 套件 2.x.x 版本
npm install vee-validate@2.2.15 --save</code></pre>



<h5>即時監聽 – Focus 到 &lt;input&gt; 再點外面即時監聽到 &lt;span&gt; 的行為</h5>



<pre class="wp-block-code"><code>// main.js
// 修改 events，加上 blur
Vue.use(VeeValidate, {
  events: 'input|blur',
});</code></pre>



<pre class="wp-block-code"><code>// 11. main.js
// 中文語系
import zhTW_Validate from 'vee-validate/dist/locale/zh_TW';

VeeValidate.Validator.localize('zh_TW', zhTW_Validate)</code></pre>



<pre class="wp-block-code"><code>// 11. main.js
// 中文語系修改後
import zhTWValidate from 'vee-validate/dist/locale/zh_TW'

// 寫在這無法顯示中文
// VeeValidate.Validator.localize('zh_TW', zhTWValidate)
Vue.use(VeeValidate, {
  events: 'input|blur',
})
// 寫在這才能顯示中文
VeeValidate.Validator.localize('zh_TW', zhTWValidate)</code></pre>



<pre class="wp-block-code"><code>// CustomerOrders.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="row mt-4"&gt;
      &lt;div class="col-md-4 mb-4" v-for="item in products" :key="item.id"&gt;
        &lt;div class="card border-0 shadow-sm"&gt;
          &lt;div style="height: 150px; background-size: cover; background-position: center"
            :style="{backgroundImage: `url(${item.imageUrl})`}"&gt;
          &lt;/div&gt;
          &lt;div class="card-body"&gt;
            &lt;span class="badge badge-secondary float-right ml-2"&gt;{{ item.category }}&lt;/span&gt;
            &lt;h5 class="card-title"&gt;
              &lt;a href="#" class="text-dark"&gt;{{ item.title }}&lt;/a&gt;
            &lt;/h5&gt;
            &lt;p class="card-text"&gt;{{ item.content }}&lt;/p&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h5" v-if="!item.price"&gt;{{ item.origin_price }}&lt;/div&gt;
              &lt;del class="h6" v-if="item.price"&gt;原價 {{ item.origin_price }} 元&lt;/del&gt;
              &lt;div class="h5" v-if="item.price"&gt;現在只要 {{ item.price }} 元&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer d-flex"&gt;
            &lt;button type="button" class="btn btn-outline-secondary btn-sm"
              @click="getProduct(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              查看更多
            &lt;/button&gt;
            &lt;button type="button" class="btn btn-outline-danger btn-sm ml-auto"
              @click="addtoCart(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Modal CustomerOrders --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;{{ product.title }}&lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;img :src="product.imageUrl" class="img-fluid" alt=""&gt;
            &lt;blockquote class="blockquote mt-3"&gt;
              &lt;p class="mb-0"&gt;{{ product.content }}&lt;/p&gt;
              &lt;footer class="blockquote-footer text-right"&gt;{{ product.description }}&lt;/footer&gt;
            &lt;/blockquote&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h4" v-if="!product.price"&gt;{{ product.origin_price }} 元&lt;/div&gt;
              &lt;del class="h6" v-if="product.price"&gt;原價 {{ product.origin_price }} 元&lt;/del&gt;
              &lt;div class="h4" v-if="product.price"&gt;現在只要 {{ product.price }} 元&lt;/div&gt;
            &lt;/div&gt;
            &lt;select name="" class="form-control mt-3" v-model="product.num"&gt;
              &lt;option :value="num" v-for="num in 10" :key="num"&gt;
                選購 {{ num }} {{ product.unit }}
              &lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;div class="text-muted text-nowrap mr-3"&gt;
              小計 &lt;strong&gt;{{ product.num * product.price }}&lt;/strong&gt; 元
            &lt;/div&gt;
            &lt;button type="button" class="btn btn-primary"
              @click="addtoCart(product.id, product.num)"&gt;
              &lt;!-- &lt;i class="fas fa-spinner fa-spin" v-if="product.id === status.loadingItem"&gt;&lt;/i&gt; --&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- 購物車列表 --&gt;
    &lt;div class="my-5 row justify-content-center"&gt;
      &lt;div class="col-md-6"&gt;
        &lt;table class="table"&gt;
          &lt;thead&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;品名&lt;/th&gt;
            &lt;th&gt;數量&lt;/th&gt;
            &lt;th&gt;單價&lt;/th&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr v-for="item in cart.carts" :key="item.id" v-if="cart.carts"&gt;
              &lt;td class="align-middle"&gt;
                &lt;button type="button" class="btn btn-outline-danger btn-sm"
                  @click="removeCartItem(item.id)"&gt;
                  &lt;i class="far fa-trash-alt"&gt;&lt;/i&gt;
                &lt;/button&gt;
              &lt;/td&gt;
              &lt;td class="align-middle"&gt;
                {{ item.product.title }}
                &lt;div class="text-success" v-if="item.coupon"&gt;
                  已套用優惠券
                &lt;/div&gt;
              &lt;/td&gt;
              &lt;td class="align-middle"&gt;{{ item.qty }}/{{ item.product.unit }}&lt;/td&gt;
              &lt;td class="align-middle text-right"&gt;{{ item.final_total }}&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
          &lt;tfoot&gt;
            &lt;tr&gt;
              &lt;td colspan="3" class="text-right"&gt;總計&lt;/td&gt;
              &lt;td class="text-right"&gt;{{ cart.total }}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr v-if="cart.final_total !== cart.total"&gt;
              &lt;td colspan="3" class="text-right text-success"&gt;折扣價&lt;/td&gt;
              &lt;td class="text-right text-success"&gt;{{ cart.final_total }}&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tfoot&gt;
        &lt;/table&gt;
        &lt;div class="input-group mb-3 input-group-sm"&gt;
          &lt;input type="text" class="form-control" v-model="coupon_code" placeholder="請輸入優惠碼"&gt;
          &lt;div class="input-group-append"&gt;
            &lt;button class="btn btn-outline-secondary" type="button" @click="addCouponCode"&gt;
              套用優惠碼
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- 建立訂購表單 --&gt;
    &lt;div class="my-5 row justify-content-center"&gt;
      &lt;form class="col-md-6" @submit.prevent="createOrder"&gt;
        &lt;div class="form-group"&gt;
          &lt;label for="useremail"&gt;Email&lt;/label&gt;
          &lt;input type="email" class="form-control" name="email" id="useremail"
            v-validate="'required|email'"
            :class="{'is-invalid': errors.has('email')}"
            v-model="form.user.email" placeholder="請輸入 Email"&gt;
          &lt;span class="text-danger" v-if="errors.has('email')"&gt;
            {{ errors.first('email') }}
          &lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="username"&gt;收件人姓名&lt;/label&gt;
          &lt;input type="text" class="form-control" name="name" id="username"
            :class="{'is-invalid': errors.has('name')}"
            v-model="form.user.name" v-validate="'required'" placeholder="輸入姓名"&gt;
          &lt;span class="text-danger" v-if="errors.has('name')"&gt;姓名必須輸入&lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="usertel"&gt;收件人電話&lt;/label&gt;
          &lt;input type="tel" class="form-control" name="tel" id="usertel"
            :class="{'is-invalid': errors.has('tel')}"
            v-model="form.user.tel" v-validate="'required'" placeholder="請輸入電話"&gt;
          &lt;span class="text-danger" v-if="errors.has('tel')"&gt;電話欄位不得留空&lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="useraddress"&gt;收件人地址&lt;/label&gt;
          &lt;input type="text" class="form-control" name="address" id="useraddress"
            :class="{'is-invalid': errors.has('address')}"
            v-model="form.user.address" v-validate="'required'" placeholder="請輸入地址"&gt;
          &lt;span class="text-danger" v-if="errors.has('address')"&gt;地址欄位不得留空&lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="comment"&gt;留言&lt;/label&gt;
          &lt;textarea name="" id="comment" class="form-control" cols="30" rows="10" v-model="form.message"&gt;&lt;/textarea&gt;
        &lt;/div&gt;
        &lt;div class="text-right"&gt;
          &lt;button class="btn btn-danger"&gt;送出訂單&lt;/button&gt;
        &lt;/div&gt;
      &lt;/form&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery';

export default {
  data() {
    return {
      products: &#91;],
      product: {},
      status: {
        loadingItem: '',
      },
      form: {
        user: {
          name: '',
          email: '',
          tel: '',
          address: '',
        },
        message: '',
      },
      cart: {},
      isLoading: false,
      coupon_code: '',
    };
  },
  methods: {
    getProducts() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        vm.products = response.data.products;
        console.log(response);
        vm.isLoading = false;
      });
    },
    // 取得單一產品
    getProduct(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/product/${id}`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      this.$http.get(url).then((response) =&gt; {
        vm.product = response.data.product;
        $('#productModal').modal('show');
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.product.num = 1; // 所有商品初始值設置為 1
      });
    },
    // 加入購物車
    addtoCart(id, qty = 1) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      const cart = {
        product_id: id,
        qty,
      };
      this.$http.post(url, { data: cart }).then((response) =&gt; {
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.getCart();
        $('#productModal').modal('hide');
      });
    },
    // 取得購物車的內容
    getCart() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        // vm.products = response.data.products;
        vm.cart = response.data.data;
        console.log(response);
        vm.isLoading = false;
      });
    },
    // 刪除購物車品項
    removeCartItem(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart/${id}`;
      vm.isLoading = true;
      this.$http.delete(url).then(() =&gt; {
        vm.getCart();
        vm.isLoading = false;
      });
    },
    // 新增優惠碼
    addCouponCode() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/coupon`;
      const coupon = {
        code: vm.coupon_code,
      };
      vm.isLoading = true;
      this.$http.post(url, { data: coupon }).then((response) =&gt; {
        console.log(response);
        vm.getCart();
        vm.isLoading = false;
      });
    },
    // 建立訂購表單
    createOrder() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/order`;
      const order = vm.form;
      // vm.isLoading = true;
      this.$validator.validate().then((result) =&gt; {
        if (result) {
          this.$http.post(url, { data: order }).then((response) =&gt; {
            console.log('訂單已建立', response);
            // vm.getCart();
            vm.isLoading = false;
          });
        } else {
          console.log('欄位不完整');
        }
      });
    },
  },
  created() {
    this.getProducts();
    this.getCart();
  },
};
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// main.js
// The Vue build version to load with the `import` command
// (runtime-only or standalone) has been set in webpack.base.conf with an alias.
import Vue from 'vue'
// 第三方的套件
import axios from 'axios'
import VueAxios from 'vue-axios'
// import component
import Loading from 'vue-loading-overlay'
// import stylesheet
import 'vue-loading-overlay/dist/vue-loading.css'
import 'bootstrap'
// import VeeValidate
import VeeValidate from 'vee-validate'
// import 中文語系
import zhTWValidate from 'vee-validate/dist/locale/zh_TW'
// 自己撰寫
import App from './App'
import router from './router'
import './bus'
import currencyFilter from './filters/currency'
import dateFilter from './filters/date'

Vue.config.productionTip = false
Vue.use(VueAxios, axios)

// 寫在這無法顯示中文
// VeeValidate.Validator.localize('zh_TW', zhTWValidate)
Vue.use(VeeValidate, {
  events: 'input|blur',
})
// 寫在這才能顯示中文
VeeValidate.Validator.localize('zh_TW', zhTWValidate)

Vue.component('Loading', Loading)
Vue.filter('currency', currencyFilter)
Vue.filter('date', dateFilter)

// 前端跨域設定
axios.defaults.withCredentials = true;

/* eslint-disable no-new */
new Vue({
  el: '#app',
  router,
  components: { App },
  template: '&lt;App/&gt;'
})

// 導航守衛
router.beforeEach((to, from, next) =&gt; {
  // console.log('to', to, 'from', from, 'next', next);
  // ...
  if (to.meta.requiresAuth) {
    const api = `${process.env.APIPATH}/api/user/check`;
    axios.post(api).then((response) =&gt; {
      // console.log(response.data);
      if (response.data.success) {
        next();
      } else {
        next({
          path: '/login',
        });
      }
    });
  } else {
    next();
  }
})</code></pre>



<h3>表單驗證補充</h3>



<p>操作與講解</p>



<ol><li>在我們課程原本的介紹是使用第二版的 Vee Validate，那我們現在直接跳到指定的行數，在過去我們使用 Vee Validate 它的驗證主要是透過 Vue 的指令、它算是 HTML 的屬性來進行驗證。</li><li>那在新版就有很大的不同，新版的話主要是使用元件的方式來進行驗證，那相對來說使用元件的方式進行驗證會稍微複雜一點點，但是它會更符合 Vue 的邏輯，因此在這個地方我們就額外推出關於 Vee Validate 新版的驗證方式，也因為新版的驗證它稍微複雜一點點，所以在這個地方我們會提供完整的文件。</li><li>這個文件我們只要按照這個流程我們就可以把 Vee Validate 安裝好，我們就透過這個文件一一的解說我們到底做了哪些事情，我們先把多餘的 &lt;input&gt; 的欄位先把它關掉，我們先只留下 Email 這一段就好了，這個是對應我們的這個頁面、就是我們現在只留下這個 Email，那下面的收件人姓名到留言這一段，我們先把它們關掉，這個是 Email，因此我們就把下面的收件人姓名到留言這個地方，我們都先把它刪掉，現在我們只留下畫面的這一塊。接下來我們把原本的 Vee-Validate 解除安裝、然後並且安裝新版的 Vee-Validate，那我們來打開終端機、打開終端機之後，npm uninstall vee-validate，解除安裝之後，我們就可以準備直接安裝新版的 Vee-Validate，這個地方我們就輸入 npm install vee-validate –save，安裝完成之後，我們會建議先打開 package.json 這一個頁面，打開 package.json 之後我們要先確定我們 vee-validate 的版本，那目前來說它的使用版本是3.x.x的版本，那麼如果你是使用第四版測試版的話，它是支援 Vue 3。</li><li>我們先把 Vue 的環境運行起來 npm run dev，運行起來它預期會跳一些錯誤，因為新舊版是有一點點不同的，但是我們先不管它。現在我們先把多的頁面關掉，我們打開 main.js、我們在進入點上面需要做一點點調整。在原本 vee-validate 上面有進行一些設定像是這兩行，還有上面會有引入 vee-validate 的方法，我們先把這四行先把它刪掉，這是屬於舊版的驗證。</li><li>那現在我們要導入新版的驗證，存檔之後、我們現在跳到步驟二，我們必需先把新版是使用元件的方式進行驗證，所以我們先把元件給導入進來，這邊是 import&nbsp;相關的元件內容，那我們把它放在這個地方、原本的這個地方，我們先整理一下程式碼。接下來我們再把這裡有一些規則、以及元件的設定，我們先把它直接給貼進來，貼進來之後我們再一一解說這些程式碼到底代表什麼意思，我先稍微整理一下程式碼、存檔之後，我們現在來稍微做一下說明，在這個地方我們分別引入這些區塊，這邊是將元件、以及相關的驗證設定檔，從 VeeValidate 給導出來，validation-provider 是 input&nbsp;驗證元件、validation-observer&nbsp;則是整體 &lt;form&gt;&nbsp;驗證元件，(extend)這邊是VeeValidate的一些擴充功能、(localize)是關於語系的設定、(configure)是VeeValidate的一些設定檔，這是針對繁體中文的一些語系設定，它這個可以直接導出、讓我們就可以直接運用，然後另外一個這是一個比較大、不同的地方就是 VeeValidate&nbsp;在新版的時候，它所有驗證都是把它規則化，像是我們要驗證 email 的時候，它就提供 email&nbsp;的驗證規則，一般來說它可以自己撰寫、另外一種方式就是直接使用它所提供的一些規則，這些規則我們就把它全部導出出來，就不需要一個一個導入了。</li><li>那我們再往下看，下面這個地方是我們剛剛所加入的其他設定檔，那麼大家可能會比較疑惑的是屬於這一段，這一段是我們會把剛剛的規則全部都導出出來，並且把它加到 VeeValidate&nbsp;的擴充的裡面，就是把它的規則預設其實是沒有加入進去，我們就必須手動的把它導出之後，再把它加進去。這樣你才可以運用這些規則。這邊是運用繁體中文的語系檔，另外下方有兩個元件、下面這邊有兩個元件，兩個元件我們會分別做介紹，其中一個是針對單一 input&nbsp;的驗證，另外一個是針對表單完整的 form&nbsp;表單進行驗證。另外最後還有關於 class&nbsp;name&nbsp;的一些設定檔，那麼這個 class name&nbsp;的設定檔目前這邊所撰寫的這兩行是針對 Bootstrap&nbsp;所進行驗證的一些 class name&nbsp;的設定，這個就是整個我們在導入新版的VeeValidate&nbsp;會加入的片段。</li><li>建議你可以先檢查一下你目前的程式碼有沒有正確的運行，照理說你在設定完成之後，你的環境是可以運行起來的，那這邊我們就把 main.js&nbsp;關掉，現在我們再回到我們這段程式碼來(CustomerOrders.vue)，這個是我們 CustomerOrders.vue&nbsp;這個頁面，對應的就是我們目前的訂購表單</li></ol>



<p>表單驗證補充單元未完成</p>



<pre class="wp-block-code"><code>//&nbsp;3.&nbsp;terminal
//&nbsp;解除安裝舊的 Vee-Validate 版本
npm uninstall vee-validate
//&nbsp;安裝新的版本 V3
npm install vee-validate --save</code></pre>



<pre class="wp-block-code"><code>//&nbsp;4.&nbsp;main.js 這兩行
VeeValidate.Validator.localize('zh_TW', zhTWValidate);
Vue.use(VeeValidate);
//&nbsp;引入的 vee-validate
import VeeValidate from 'vee-validate';
import zhTWValidate from 'vee-validate/dist/locale/zh_TW';</code></pre>



<pre class="wp-block-code"><code>//&nbsp;5.&nbsp;main.js

import { ValidationObserver, ValidationProvider, extend, localize, configure } from 'vee-validate';
import TW from 'vee-validate/dist/locale/zh_TW.json'
import * rules from 'vee-validate/dist/rules';

Object.keys(rules).forEach((rule) =&gt; {
  extend(rule, rules&#91;rule]);
});

localize('zh_TW', TW);

Vue.component('ValidationObserver', ValidationObserver)
Vue.component('ValidationProvider', ValidationProvider)

configure({
  classes: {
    valid: 'is-valid',
    invalid: 'is-invalid'
  }
});</code></pre>



<pre class="wp-block-code"><code>口誤：
validation-provider&nbsp;是 input&nbsp;驗證元件
validation-observer&nbsp;則是整體 &lt;form&gt;&nbsp;驗證元件</code></pre>



<h3>表單驗證補充文件</h3>



<p>第三版</p>



<h4>如何為單一表單(input)進行驗證</h4>



<ul><li><a href="https://logaretm.github.io/vee-validate/overview.html#installation" target="_blank" rel="noreferrer noopener">文件</a></li><li><a href="https://cdnjs.com/libraries/vee-validate" target="_blank" rel="noreferrer noopener">CDN</a></li></ul>



<h4>步驟一</h4>



<p>載入 vee-validate</p>



<pre class="wp-block-code"><code>npm install vee-validate --save</code></pre>



<h4>步驟二</h4>



<p>註冊全域的表單驗證元件 (ValidationProvider)</p>



<pre class="wp-block-code"><code>import { ValidationObserver, ValidationProvider, extend, localize, configure } from 'vee-validate';
import TW from 'vee-validate/dist/locale/zh_TW.json'
import * rules from 'vee-validate/dist/rules';

Object.keys(rules).forEach((rule) =&gt; {
  extend(rule, rules&#91;rule]);
});

localize('zh_TW', TW);

Vue.component('ValidationObserver', ValidationObserver)
Vue.component('ValidationProvider', ValidationProvider)

configure({
  classes: {
    valid: 'is-valid',
    invalid: 'is-invalid'
  }
});</code></pre>



<h4>步驟三</h4>



<ol><li>建立 validation-provider 元件：<ul><li>rules 帶上驗證的規則，規則列表可<a rel="noreferrer noopener" href="https://logaretm.github.io/vee-validate/guide/rules.html#rules" target="_blank">參考</a>。注意：規則之間不需要帶上空白鍵。</li><li>v-slot 帶上預計回傳的回饋內容，常用的可參考下方範例，完整列表可<a rel="noreferrer noopener" href="https://logaretm.github.io/vee-validate/api/validation-provider.html#scoped-slot-props" target="_blank">參考</a></li></ul></li><li>建立 input 欄位內容</li><li>將回饋帶至驗證 (v-slot 的內容)</li></ol>



<pre class="wp-block-code"><code>&lt;validation-provider rules="required|email" v-slot="{ errors }"&gt;
  &lt;!-- 輸入框 --&gt;
  &lt;label for="email"&gt;Email&lt;/label&gt;
  &lt;input id="email" type="email" name="email" v-model="email"
      class="form-control"&gt;
  &lt;!-- 錯誤訊息 --&gt;
  &lt;span&gt;{‌{ errors&#91;0] }}&lt;/span&gt;
&lt;/validation-provider&gt;</code></pre>



<blockquote class="wp-block-quote"><p>備註：v-slot 稱為插槽 (Vue 的元件語法之一)，可以將驗證結果的回饋資料直接帶入於區塊中，相關概念可參考：</p><cite><a href="https://cn.vuejs.org/v2/guide/components-slots.html#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD" target="_blank" rel="noreferrer noopener">作用域插槽</a></cite></blockquote>



<h4>步驟四</h4>



<p>加入樣式，JavaScript 加入 Bootstrap 樣式設定，可使用以下設定，或<a rel="noreferrer noopener" href="https://logaretm.github.io/vee-validate/guide/state.html#css-classes" target="_blank">參考官方文件</a>。</p>



<pre class="wp-block-code"><code>// Class 設定檔案
VeeValidate.configure({
  classes: {
    valid: 'is-valid',
    invalid: 'is-invalid',
  }
});</code></pre>



<p>將 HTML 的部分進行更新</p>



<ul><li>v-slot 增加 classes</li><li>input 增加 :class=”classes”</li></ul>



<pre class="wp-block-code"><code>&lt;validation-provider rules="required|email" v-slot="{ errors, classes }"&gt;
  &lt;!-- 輸入框 --&gt;
  &lt;label for="email"&gt;Email&lt;/label&gt;
  &lt;input id="email" type="email" name="email" v-model="email"
    class="form-control" :class="classes"&gt;
  &lt;!-- 錯誤訊息 --&gt;
  &lt;span class="invalid-feedback"&gt;{‌{ errors&#91;0] }}&lt;/span&gt;
&lt;/validation-provider&gt;</code></pre>



<h4>步驟五</h4>



<p>增加多國語系的方法</p>



<ul><li><a rel="noreferrer noopener" href="https://logaretm.github.io/vee-validate/guide/localization.html#using-the-default-i18n" target="_blank">參考文件</a></li><li><a href="https://github.com/logaretm/vee-validate/tree/master/locale" target="_blank" rel="noreferrer noopener">語系檔案</a></li></ul>



<pre class="wp-block-code"><code>// 匯入語系檔案
import zh_TW from './zh_TW.js';
 
// 加入至 VeeValidate 的設定檔案
VeeValidate.localize('tw', zh_TW);</code></pre>



<p><a href="https://codepen.io/Wcc723/pen/ExPdGpX?editors=1010" target="_blank" rel="noreferrer noopener">範例 (不包含多國語系)</a></p>



<h4>如何為完整表單進行驗證</h4>



<h4>步驟一</h4>



<p>建立 validation-observer 元件：v-slot 帶上預計回傳的回饋內容，常用的可參考下方範例，完整列表可<a href="https://logaretm.github.io/vee-validate/api/validation-provider.html#scoped-slot-props" target="_blank" rel="noreferrer noopener">參考</a></p>



<pre class="wp-block-code"><code>&lt;validation-observer v-slot="{ invalid }"&gt;
&lt;/validation-observer&gt;</code></pre>



<h4>步驟二</h4>



<p>加入，方法可參考上篇的 「如何為單一表單(input)進行驗證」</p>



<h4>步驟三</h4>



<p>加入 &lt;form&gt; 標籤及 &lt;button&gt; 標籤：</p>



<ul><li>表單送出改為使用 form submit 的方法</li><li>送出表單使用 submit 的方法，如果驗證未通過則 disabled 該按鈕</li></ul>



<pre class="wp-block-code"><code>&lt;!-- validation-observer 驗證整體表單 --&gt;
&lt;validation-observer v-slot="{ invalid }"&gt;
  &lt;!-- 表單送出改為使用 form submit 的方法 --&gt;
  &lt;form @submit.prevent="submitForm"&gt;
    &lt;validation-provider rules="required|email" class="form-group" tag="div" v-slot="{ errors, classes, passed }"&gt;
      ...
    &lt;/validation-provider&gt;
    &lt;!-- 送出表單使用 submit 的方法，如果驗證未通過則 disabled 該按鈕 --&gt;
    &lt;button type="submit" class="btn btn-primary" :disabled="invalid"&gt;送出表單&lt;/button&gt;
  &lt;/form&gt;
&lt;/validation-observer&gt;</code></pre>



<p><a href="https://codepen.io/Wcc723/pen/zYrmeYP?editors=1010" target="_blank" rel="noreferrer noopener">完整範例</a></p>



<h4>使用 JS 觸發驗證</h4>



<ol><li>&lt;v-slot&gt; 加入 handleSubmit</li><li>表單送出改為 handleSubmit(自訂方法)</li></ol>



<pre class="wp-block-code"><code>&lt;validation-observer v-slot="{ handleSubmit }"&gt;
  &lt;form @submit.prevent="handleSubmit(submitForm)"&gt;
    ...
    &lt;button type="submit" class="btn btn-primary"&gt;送出表單&lt;/button&gt;
  &lt;/form&gt;
&lt;/validation-observer&gt;</code></pre>



<p><a href="https://codepen.io/Wcc723/pen/QWyZYjE?editors=1010" target="_blank" rel="noreferrer noopener">完整範例</a></p>



<h3>驗證補充說明</h3>



<p>由於驗證套件更新<br>所以方法略有些微調整<br>以下感謝 洪同學提供</p>



<p>vee-validate 更改語系的方法在 2.1.0-beta.24 版之後已經更改了，因此照著這個影片實作會無法中文化，以下是由老師爬 stack overflow 以及官方範例後的結果，希望能幫助到遇到同樣問題的大家。</p>



<ol><li>安裝 vue-i18n</li><li>在 main.js 中將 vue-i18n import 進來</li><li>將 VeeValidate.Validator.localize(‘zh_TW’, zhTWValidate) 及 Vue.use(VeeValidate) 刪除，並加入下列程式碼</li><li>在 Vue 物件中新增 i18n</li></ol>



<pre class="wp-block-code"><code>// 1. 在 terminal 中輸入
npm install vue-i18n --save</code></pre>



<pre class="wp-block-code"><code>// 2. main.js
import VueI18n from 'vue-i18n';
Vue.use(VueI18n);</code></pre>



<pre class="wp-block-code"><code>// 3.
const i18n = new VueI18n({
  locale: 'zhTW'
});
Vue.use(VeeValidate, {
  i18n,
  dictionary: {
    zhTW
  }
});</code></pre>



<pre class="wp-block-code"><code>// 4.
new Vue({
  i18n,
  el: '#app',
  components: { App },
  template: '&lt;App/&gt;',
  router,
})</code></pre>



<h3>結帳頁面製作</h3>



<p>操作與講解</p>



<ol><li>最後這個部分，我們要來做結帳的頁面，那我們先隨意加入一些商品到購物車內。</li><li>接下來我們到下面填寫表單的地方，我們把表單填寫完成，到目前這個階段我們都已經完成了，接下來我們按下送出訂單，送出訂單之後它會到達這個連結，它是 CustomerCheckout、然後後面會帶上這筆訂單的 id。那這筆訂單會呈現這個商品的資料、以及用戶所填寫的內容，用戶確認說這筆訂單就是他所填寫的部分，下面還會有一個付款狀態，那目前這個付款狀態是尚未付款的狀態。</li><li>當我們按下確認付款之後，他這個付款狀態也會有所更動。接下來我們按下確認付款，按下確認付款之後，你可以看到這個連結並沒有做變換，但是它會因為這筆訂單他已經付款完成、然後就把下面的文字做一些切換，並且把這個付款的連結把它拿掉。當這個付款完成之後，這個訂單列表它的付款狀態也會呈現已付款，那我們再回到上一個頁面。</li><li>最後這個章節主要介紹怎麼製作這個頁面，那我們先來看一下API。API的部分主要是有兩個、一個是取得某一筆特定的訂單，我們剛剛這個連結後面其實有帶上這筆訂單的id，我們就可以透過這筆id將特定的訂單內容把它取回來，那取得這筆訂單之後，我們就可以把這筆訂單的資料呈現出來、還有裡面有一個很重要的值就是它到底付款了沒，再往下我們可以看到結帳付款，主要觸發這個API就會將上面這筆訂單轉為已經付款完成的狀態。</li><li>我們來開始製作這個章節，在這個章節的部分，老師一樣會把HTML的Template直接提供給同學，那所以這個地方，同學不需要重刻這段HTML，我們在CustomerOrders.vue這裡其實還少一個步驟，就是我們在付款完成的時候，其實我們並沒有做跳頁，所以我們現在要先把另外一個checkout頁面先把它完成。</li><li>那我們在這個部分，我們就先新增一個檔案，叫做CustomerCheckout.vue，那我們先準備一個&lt;template&gt;裡面是&lt;div&gt;結帳確認&lt;/div&gt;，這個頁面完成之後，我們再到達Vue router的index.js，我們這個下面有另外一個是CustomerOrder，我們先複製一下這個物件，這個物件我們要做為載入另外一個Checkout的頁面使用，所以我們現在要把CustomerCheckout把它載進來、然後接下來我們將這個頁面放到我們這個元件上面來，我們在加上這個連結之後它還沒有完成，後面記得帶上/:orderId，完成之後我們就把這個連結(customer_checkout)先把它複製起來，然後我們回到這個CustomerOrders.vue的地方，我們在先前建立訂單的時候，這裡有收到一個response，那我們這裡先判斷一下 if (response.data.success)，我們這筆訂單如果確定建立完成之後，我們將這個頁面 vm.$router，這段我們在Vue router的課程有介紹過，我們可以使用router來轉換它的頁面，那麼router在轉換的時候，我們就可以把customer_checkout、然後後面再帶上這個order的id(${response.data.orderId})，這裡應該使用反引號才是正確的。</li><li>現在我們來試試看這個頁面有沒有正確的跳轉。確認購物車有資料，那我們輸入表單內容、然後按下送出訂單，送出訂單之後，這裡就有轉到customer_checkout，並且後面有帶上這筆訂單的id，那有這筆訂單的id之後，我們就可以開始撰寫接下來的 script。</li><li>我們打開 CustomerCheckout.vue 、我們來開始撰寫 script 的部分，script 的話一開始就是 export default，物件一開始我們要先定義資料結構 data()，return 這個地方我們就可以先加入 orderId，我們要先把 orderId 取得之後，我們才能取得其他的內容，那要取得 orderId 的話，我們在一開始的 created() 就可以來做取得了，取得的時候我們就可以使用 this的orderId等於this，這是我們在先前router 的課程有介紹到的一個方法，我們可以用這個方式來取得網址上的參數，那最後的參數(params)是指這一段.orderId，最後這個 orderId 是對應我們路由所自定義的名稱，這裡要特別注意，當你這兩個名稱(orderId)如果輸入不一致的話，是沒有辦法正確取得的。那我們來看一下這個 orderId 有沒有取得回來，那透過 console 來看一下這個 orderId 有沒有取得回來，那看起來是有的，這裡的名稱會和我們路徑上的名稱是一致的，有 orderId 之後就可以把資料內容給取得回來了。那取得的資料方式跟先前的方法都一樣，所以我們可以先複製先前所寫好的方法，那在這裡加上 methods、然後它是個物件、然後 getOrder()，那把相同內容貼進來，貼進來之後我們再來對應一下 API，這段 API 是使用 api_path/order 然後再對應 order_id，所以我們把這個 order 加過來、order 後面再加上 orderId，那 orderId 的話我們剛已經存起來，在 vm.orderId，現在可以用 get 的方式把這筆資料內容存起來，那我們存起來之前先來確認一下這筆資料是不是我們要的、存檔，資料取得回來之後，我們打開看一下、它是存放在 data 的 data 內，這邊要特別注意在 success 的旁邊還有一個 order，所以它不是直接存放於這個 data 內，它是存放在 order 內。那在這個 order 內會有這個產品列表、以及我的訂單的資料，所以在這個地方我們就可以把這個註解打開、改成 vm.order、然後 response.data.order，將我們現成的 template 貼進來。</li><li>現成的 template 貼進來，但是有些行為我們還沒加進來，所以我們要先把它移掉、存檔試試看，存檔之後它會發現說 email undefined，但其實 email 有在上面，原因是因為這個 email 是放在 user 下，它這裡已經跨第二層了，如果要避免跳出這個錯誤，比較簡單的方式是在 order: {} 下(裡)再新增 user 這一層，那這樣子的話它就不會跳出這樣子的錯誤、重新整理一次，現在就沒有跳出這個錯誤，並且有把整個訂單的資料完整的呈現出來，那資料都完整的呈現出來之後，這裡有一個確認付款去，所以我們再補上確認付款去的行為就可以了，所以我們在下方就可以再做一個 payOrder() 的一個行為，這邊我們可以複製我們先前寫好的程式碼、然後來稍作調整，結帳付款是在 api_path 下有一個 pay、然後後面接上 order_id 就可以直接付款，那我們在這個部分就可以使用 api、然後後面加上 pay、以及 orderId。在這個地方行為要特別注意，我們使用的是 post 的行為，後面的話這一段(vm.order = response.data.order;)可以移除，接下來這個地方記得把這個 payOrder() 加到我們上面的表單來，我們可以使用 @submit.prevent=”payOrder”。那我們來送出一次表單試試看、重新整理、打開 console 然後按下確認付款去，那確認付款去這裡就會顯示付款完成，那我們顯示付款完成，但是其實我們這個訂單還是呈現尚未付款，所以在下方程式碼的部分也要稍微做一些調整，假設它付款成功之後，我們可以跳出一個訊息，那跳出訊息之外，我們還可以重新取得訂單資料，它還可以再重新取得一次訂單資料，我們再重新整理一次，這個時候它就會轉換成付款完成，並且把它的付款連結也把它拿掉，這個時候如果進入訂單列表，假設你這個畫面已經完成的狀態，你也可以看到這個商品已經被付款完成，那這個就是最後付款結帳頁面。</li></ol>



<pre class="wp-block-code"><code>// 6. CustomerCheckout.vue
&lt;template&gt;
  &lt;div&gt;
    結帳確認
  &lt;/div&gt;
&lt;/template&gt;</code></pre>



<pre class="wp-block-code"><code>// 6. router/index.js
import Vue from 'vue'
import Router from 'vue-router'
// 之後都不會用到，可以直接移除
// import HelloWorld from '@/components/HelloWorld'
// 把Dashboard給載進來
import Dashboard from '@/components/Dashboard'
// 把Login給載進來
import Login from '@/components/pages/Login'
// 把Product給載進來
import Products from '@/components/pages/Products'
// 把Order給載進來
import Orders from '@/components/pages/Orders'
// 把Coupon給載進來
import Coupons from '@/components/pages/Coupons'
// 把CustomerOrder給載進來
import CustomerOrder from '@/components/pages/CustomerOrders' 
// 把CustomerCheckout給載進來
import CustomerCheckout from '@/components/pages/CustomerCheckout' 

// 解決重複導航
const inCludPush = Router.prototype.push
Router.prototype.push = function push(location) {
  return inCludPush.call(this, location).catch(err =&gt; err)
}

Vue.use(Router)

export default new Router({
  linkActiveClass: 'active',
  routes: &#91;
    // 重新導向
    {
      path: '*',
      // redirect: 'login',
      redirect: 'shop/customer_order',
    },
    // 之後都不會用到，可以直接移除
    // // 首頁的路徑
    // {
    //   path: '/',
    //   name: 'HelloWorld',
    //   component: HelloWorld,
    //   meta: { requiresAuth: true }
    // },
    // 新增一個登入的路徑
    {
      path: '/login',
      name: 'Login',
      component: Login,
    },
    // Dashboard的路徑
    {
      path: '/admin',
      name: 'Dashboard',
      component: Dashboard,
      // 設定 meta 是否需要驗證
      meta: { requiresAuth: true },
      children: &#91;
        {
          path: 'products',
          name: 'Products',
          component: Products,
          meta: { requiresAuth: true },
        },
        // Orders的路徑
        {
          path: 'orders',
          name: 'Orders',
          component: Orders,
          meta: { requiresAuth: true },
        },
        // Coupons的路徑
        {
          path: 'coupons',
          name: 'Coupons',
          component: Coupons,
          meta: { requiresAuth: true },
        },
      ],
    },
    // 客戶購物的路徑(使用與Dashboard相同的模板)
    {
      // path: '/',
      // name: 'Dashboard',
      path: '/shop',
      name: 'DashboardCustomerOrder',
      component: Dashboard,
      // 設定 meta 是否需要驗證
      meta: { requiresAuth: true },
      children: &#91;
        // CustomerOrder的路徑
        {
          path: 'customer_order',
          name: 'CustomerOrder',
          component: CustomerOrder,
        },
        // CustomerCheckout的路徑 
        {
          path: 'customer_checkout/:orderId',
          name: 'CustomerCheckout',
          component: CustomerCheckout,
        },
      ],
    },
  ]
})
</code></pre>



<h5>結帳頁面製作範例程式碼</h5>



<pre class="wp-block-code"><code>// index.js
import Vue from 'vue'
import Router from 'vue-router'
// 之後都不會用到，可以直接移除
// import HelloWorld from '@/components/HelloWorld'
// 把Dashboard給載進來
import Dashboard from '@/components/Dashboard'
// 把Login給載進來
import Login from '@/components/pages/Login'
// 把Product給載進來
import Products from '@/components/pages/Products'
// 把Order給載進來
import Orders from '@/components/pages/Orders'
// 把Coupon給載進來
import Coupons from '@/components/pages/Coupons'
// 把CustomerOrder給載進來
import CustomerOrder from '@/components/pages/CustomerOrders' 
// 把CustomerCheckout給載進來
import CustomerCheckout from '@/components/pages/CustomerCheckout' 



Vue.use(Router)

export default new Router({
  linkActiveClass: 'active',
  routes: &#91;
    // 重新導向
    {
      path: '*',
      // redirect: 'login',
      redirect: 'shop/customer_order',
    },
    // 之後都不會用到，可以直接移除
    // // 首頁的路徑
    // {
    //   path: '/',
    //   name: 'HelloWorld',
    //   component: HelloWorld,
    //   meta: { requiresAuth: true }
    // },
    // 新增一個登入的路徑
    {
      path: '/login',
      name: 'Login',
      component: Login,
    },
    // Dashboard的路徑
    {
      path: '/admin',
      name: 'Dashboard',
      component: Dashboard,
      // 設定 meta 是否需要驗證
      meta: { requiresAuth: true },
      children: &#91;
        {
          path: 'products',
          name: 'Products',
          component: Products,
          meta: { requiresAuth: true },
        },
        // Orders的路徑
        {
          path: 'orders',
          name: 'Orders',
          component: Orders,
          meta: { requiresAuth: true },
        },
        // Coupons的路徑
        {
          path: 'coupons',
          name: 'Coupons',
          component: Coupons,
          meta: { requiresAuth: true },
        },
      ],
    },
    // 客戶購物的路徑(使用與Dashboard相同的模板)
    {
      // path: '/',
      // name: 'Dashboard',
      path: '/shop',
      name: 'DashboardCustomerOrder',
      component: Dashboard,
      // 設定 meta 是否需要驗證
      meta: { requiresAuth: true },
      children: &#91;
        // CustomerOrder的路徑
        {
          path: 'customer_order',
          name: 'CustomerOrder',
          component: CustomerOrder,
        },
        // CustomerCheckout的路徑 
        {
          path: 'customer_checkout/:orderId',
          name: 'CustomerCheckout',
          component: CustomerCheckout,
        },
      ],
    },
  ]
})
</code></pre>



<pre class="wp-block-code"><code>// CustomerOrders.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="row mt-4"&gt;
      &lt;div class="col-md-4 mb-4" v-for="item in products" :key="item.id"&gt;
        &lt;div class="card border-0 shadow-sm"&gt;
          &lt;div style="height: 150px; background-size: cover; background-position: center"
            :style="{backgroundImage: `url(${item.imageUrl})`}"&gt;
          &lt;/div&gt;
          &lt;div class="card-body"&gt;
            &lt;span class="badge badge-secondary float-right ml-2"&gt;{{ item.category }}&lt;/span&gt;
            &lt;h5 class="card-title"&gt;
              &lt;a href="#" class="text-dark"&gt;{{ item.title }}&lt;/a&gt;
            &lt;/h5&gt;
            &lt;p class="card-text"&gt;{{ item.content }}&lt;/p&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h5" v-if="!item.price"&gt;{{ item.origin_price }}&lt;/div&gt;
              &lt;del class="h6" v-if="item.price"&gt;原價 {{ item.origin_price }} 元&lt;/del&gt;
              &lt;div class="h5" v-if="item.price"&gt;現在只要 {{ item.price }} 元&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="card-footer d-flex"&gt;
            &lt;button type="button" class="btn btn-outline-secondary btn-sm"
              @click="getProduct(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              查看更多
            &lt;/button&gt;
            &lt;button type="button" class="btn btn-outline-danger btn-sm ml-auto"
              @click="addtoCart(item.id)"&gt;
              &lt;i class="fas fa-spinner fa-spin" v-if="status.loadingItem === item.id"&gt;&lt;/i&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Modal CustomerOrders --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;{{ product.title }}&lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;img :src="product.imageUrl" class="img-fluid" alt=""&gt;
            &lt;blockquote class="blockquote mt-3"&gt;
              &lt;p class="mb-0"&gt;{{ product.content }}&lt;/p&gt;
              &lt;footer class="blockquote-footer text-right"&gt;{{ product.description }}&lt;/footer&gt;
            &lt;/blockquote&gt;
            &lt;div class="d-flex justify-content-between align-items-baseline"&gt;
              &lt;div class="h4" v-if="!product.price"&gt;{{ product.origin_price }} 元&lt;/div&gt;
              &lt;del class="h6" v-if="product.price"&gt;原價 {{ product.origin_price }} 元&lt;/del&gt;
              &lt;div class="h4" v-if="product.price"&gt;現在只要 {{ product.price }} 元&lt;/div&gt;
            &lt;/div&gt;
            &lt;select name="" class="form-control mt-3" v-model="product.num"&gt;
              &lt;option :value="num" v-for="num in 10" :key="num"&gt;
                選購 {{ num }} {{ product.unit }}
              &lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;div class="text-muted text-nowrap mr-3"&gt;
              小計 &lt;strong&gt;{{ product.num * product.price }}&lt;/strong&gt; 元
            &lt;/div&gt;
            &lt;button type="button" class="btn btn-primary"
              @click="addtoCart(product.id, product.num)"&gt;
              &lt;!-- &lt;i class="fas fa-spinner fa-spin" v-if="product.id === status.loadingItem"&gt;&lt;/i&gt; --&gt;
              加到購物車
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- 購物車列表 --&gt;
    &lt;div class="my-5 row justify-content-center"&gt;
      &lt;div class="col-md-6"&gt;
        &lt;table class="table"&gt;
          &lt;thead&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;品名&lt;/th&gt;
            &lt;th&gt;數量&lt;/th&gt;
            &lt;th&gt;單價&lt;/th&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr v-for="item in cart.carts" :key="item.id" v-if="cart.carts"&gt;
              &lt;td class="align-middle"&gt;
                &lt;button type="button" class="btn btn-outline-danger btn-sm"
                  @click="removeCartItem(item.id)"&gt;
                  &lt;i class="far fa-trash-alt"&gt;&lt;/i&gt;
                &lt;/button&gt;
              &lt;/td&gt;
              &lt;td class="align-middle"&gt;
                {{ item.product.title }}
                &lt;div class="text-success" v-if="item.coupon"&gt;
                  已套用優惠券
                &lt;/div&gt;
              &lt;/td&gt;
              &lt;td class="align-middle"&gt;{{ item.qty }}/{{ item.product.unit }}&lt;/td&gt;
              &lt;td class="align-middle text-right"&gt;{{ item.final_total }}&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
          &lt;tfoot&gt;
            &lt;tr&gt;
              &lt;td colspan="3" class="text-right"&gt;總計&lt;/td&gt;
              &lt;td class="text-right"&gt;{{ cart.total }}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr v-if="cart.final_total !== cart.total"&gt;
              &lt;td colspan="3" class="text-right text-success"&gt;折扣價&lt;/td&gt;
              &lt;td class="text-right text-success"&gt;{{ cart.final_total }}&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tfoot&gt;
        &lt;/table&gt;
        &lt;div class="input-group mb-3 input-group-sm"&gt;
          &lt;input type="text" class="form-control" v-model="coupon_code" placeholder="請輸入優惠碼"&gt;
          &lt;div class="input-group-append"&gt;
            &lt;button class="btn btn-outline-secondary" type="button" @click="addCouponCode"&gt;
              套用優惠碼
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- 建立訂購表單 --&gt;
    &lt;div class="my-5 row justify-content-center"&gt;
      &lt;form class="col-md-6" @submit.prevent="createOrder"&gt;
        &lt;div class="form-group"&gt;
          &lt;label for="useremail"&gt;Email&lt;/label&gt;
          &lt;input type="email" class="form-control" name="email" id="useremail"
            v-validate="'required|email'"
            :class="{'is-invalid': errors.has('email')}"
            v-model="form.user.email" placeholder="請輸入 Email"&gt;
          &lt;span class="text-danger" v-if="errors.has('email')"&gt;
            {{ errors.first('email') }}
          &lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="username"&gt;收件人姓名&lt;/label&gt;
          &lt;input type="text" class="form-control" name="name" id="username"
            :class="{'is-invalid': errors.has('name')}"
            v-model="form.user.name" v-validate="'required'" placeholder="輸入姓名"&gt;
          &lt;span class="text-danger" v-if="errors.has('name')"&gt;姓名必須輸入&lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="usertel"&gt;收件人電話&lt;/label&gt;
          &lt;input type="tel" class="form-control" name="tel" id="usertel"
            :class="{'is-invalid': errors.has('tel')}"
            v-model="form.user.tel" v-validate="'required'" placeholder="請輸入電話"&gt;
          &lt;span class="text-danger" v-if="errors.has('tel')"&gt;電話欄位不得留空&lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="useraddress"&gt;收件人地址&lt;/label&gt;
          &lt;input type="text" class="form-control" name="address" id="useraddress"
            :class="{'is-invalid': errors.has('address')}"
            v-model="form.user.address" v-validate="'required'" placeholder="請輸入地址"&gt;
          &lt;span class="text-danger" v-if="errors.has('address')"&gt;地址欄位不得留空&lt;/span&gt;
        &lt;/div&gt;
      
        &lt;div class="form-group"&gt;
          &lt;label for="comment"&gt;留言&lt;/label&gt;
          &lt;textarea name="" id="comment" class="form-control" cols="30" rows="10" v-model="form.message"&gt;&lt;/textarea&gt;
        &lt;/div&gt;
        &lt;div class="text-right"&gt;
          &lt;button class="btn btn-danger"&gt;送出訂單&lt;/button&gt;
        &lt;/div&gt;
      &lt;/form&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery';

export default {
  data() {
    return {
      products: &#91;],
      product: {},
      status: {
        loadingItem: '',
      },
      form: {
        user: {
          name: '',
          email: '',
          tel: '',
          address: '',
        },
        message: '',
      },
      cart: {},
      isLoading: false,
      coupon_code: '',
    };
  },
  methods: {
    getProducts() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        vm.products = response.data.products;
        // console.log(response);
        vm.isLoading = false;
      });
    },
    // 取得單一產品
    getProduct(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/product/${id}`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      this.$http.get(url).then((response) =&gt; {
        vm.product = response.data.product;
        $('#productModal').modal('show');
        // console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.product.num = 1; // 所有商品初始值設置為 1
      });
    },
    // 加入購物車
    addtoCart(id, qty = 1) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      // vm.isLoading = true;
      vm.status.loadingItem = id;
      const cart = {
        product_id: id,
        qty,
      };
      this.$http.post(url, { data: cart }).then((response) =&gt; {
        console.log(response);
        // vm.isLoading = false;
        vm.status.loadingItem = '';
        vm.getCart();
        $('#productModal').modal('hide');
      });
    },
    // 取得購物車的內容
    getCart() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        // vm.products = response.data.products;
        vm.cart = response.data.data;
        // console.log(response);
        vm.isLoading = false;
      });
    },
    // 刪除購物車品項
    removeCartItem(id) {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/cart/${id}`;
      vm.isLoading = true;
      this.$http.delete(url).then(() =&gt; {
        vm.getCart();
        vm.isLoading = false;
      });
    },
    // 新增優惠碼
    addCouponCode() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/coupon`;
      const coupon = {
        code: vm.coupon_code,
      };
      vm.isLoading = true;
      this.$http.post(url, { data: coupon }).then((response) =&gt; {
        // console.log(response);
        vm.getCart();
        vm.isLoading = false;
      });
    },
    // 建立訂購表單
    createOrder() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/order`;
      const order = vm.form;
      // vm.isLoading = true;
      this.$validator.validate().then((result) =&gt; {
        if (result) {
          this.$http.post(url, { data: order }).then((response) =&gt; {
            console.log('訂單已建立', response);
            if (response.data.success) {
              vm.$router.push(`/shop/customer_checkout/${response.data.orderId}`);
            }
            // vm.getCart();
            vm.isLoading = false;
          });
        } else {
          console.log('欄位不完整');
        }
      });
    },
  },
  created() {
    this.getProducts();
    this.getCart();
  },
};
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// CustomerCheckout.vue
&lt;template&gt;
  &lt;div class="my-5 row justify-content-center"&gt;
    &lt;form class="col-md-6" @submit.prevent="payOrder"&gt;
      &lt;table class="table"&gt;
        &lt;thead&gt;
          &lt;th&gt;品名&lt;/th&gt;
          &lt;th&gt;數量&lt;/th&gt;
          &lt;th&gt;單價&lt;/th&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr v-for="item in order.products" :key="item.id"&gt;
            &lt;td class="align-middle"&gt;{{ item.product.title }}&lt;/td&gt;
            &lt;td class="align-middle"&gt;{{ item.qty }}/{{ item.product.unit }}&lt;/td&gt;
            &lt;td class="align-middle text-right"&gt;{{ item.final_total }}&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;tfoot&gt;
          &lt;tr&gt;
            &lt;td colspan="2" class="text-right"&gt;總計&lt;/td&gt;
            &lt;td class="text-right"&gt;{{ order.total }}&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tfoot&gt;
      &lt;/table&gt;

      &lt;table class="table"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;th width="100"&gt;Email&lt;/th&gt;
            &lt;td&gt;{{ order.user.email }}&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th&gt;姓名&lt;/th&gt;
            &lt;td&gt;{{ order.user.name }}&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th&gt;收件人電話&lt;/th&gt;
            &lt;td&gt;{{ order.user.tel }}&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th&gt;收件人地址&lt;/th&gt;
            &lt;td&gt;{{ order.user.address }}&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th&gt;付款狀態&lt;/th&gt;
            &lt;td&gt;
              &lt;span v-if="!order.is_paid"&gt;尚未付款&lt;/span&gt;
              &lt;span v-else class="text-success"&gt;付款完成&lt;/span&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;div class="text-right" v-if="order.is_paid === false"&gt;
        &lt;button class="btn btn-danger"&gt;確認付款去&lt;/button&gt;
      &lt;/div&gt;
    &lt;/form&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data() {
    return {
      order: {
        user: {},
      },
      orderId: '',
    };
  },
  methods: {
    getOrder() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/order/${vm.orderId}`;
      vm.isLoading = true;
      this.$http.get(url).then((response) =&gt; {
        vm.order = response.data.order;
        console.log(response);
        vm.isLoading = false;
      });
    },
    payOrder() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/pay/${vm.orderId}`;
      vm.isLoading = true;
      this.$http.post(url).then((response) =&gt; {
        console.log(response);
        if (response.data.success) {
          vm.getOrder();
        }
        vm.isLoading = false;
      });
    },
  },
  created() {
    this.orderId = this.$route.params.orderId;
    this.getOrder();
    console.log(this.orderId);
  },
};
&lt;/script&gt;</code></pre>



<h3>最終作業寄送變更</h3>



<p>依照課程指示。</p>



<h3 class="has-background" style="background-color:#ff6663">最終作業說明</h3>



<p>操作與講解</p>



<ol><li>這個專案到目前為止都完成了差不多了，目前我們都是使用 npm run dev 的方式在運行這個專案，但我們不可能使用這個 webpack 直接給別人看，我們必定要編譯完成之後上傳到正式的伺服器。</li><li>在做最後的編譯之前，跟同學分享一些小地方。我們到目前為止都是使用 npm run dev，那這裡面所使用的設定檔是使用 config/dev.env.js 這個檔案，裡面就包含 APIPATH、以及 CUSTOMPATH。但如果說你在編譯的時候沒有把這些設定檔加到 config/prod.env.js 裡面的話，你的正式釋出的檔案是不會包含這些內容的，所以在這裡，你在釋出前記得把 APIPATH、以及 CUSTOMPATH 把它加進來，加進來之後你在進行 npm run build 才能把這些內容都加進去。</li><li>現在來執行 npm run build，執行完之後這裡就有寫到這些檔案必需在 HTTP server 下面才能運行。如果你直接打開的話，在 file 的路徑下是沒有辦法運行的，接下來我們把這個資料夾打開，在上傳前建議還是檢查一下這個檔案有沒有問題，這個時候一樣就可以把它丟在 VSCode 裡面來，然後透過我們先前所介紹的 preview on web server 就可以快速地檢視這個檔案。現在是登入的狀態，我先把它登出。登出之後、接下來(在網址)輸入 adminProducts 是沒有辦法進去的，我們就一定要輸入帳密，輸入帳密之後才能正確進來我們的 admin 後台。</li><li>這裡再跟同學分享另外一個小地方，假設我們所釋出的檔案並不是在這個根目錄下，就不是在這個 Domain 下的話，我們先把後面的路徑刪掉。假設我們所釋出的路徑不是直接在這個 Domain 下，而是在其他的路徑下，像是這邊我再加一個 vue-testing，我是加在這個 vue-testing 下的話，我們就要另外做一些些調整。</li><li>調整的方式我們可以把 config/index.js 打開，裡面有一個 build、然後下方可以找到 assetPublicPath，那這個是針對編譯後的路徑來做調整，所以這個時候如果我把 vue-testing 這個路徑加進來，再運行 npm run build 我們就可以在這個目錄下運行，假設如果你沒有加入這一段的話，它就只能在根目錄的 Domain 下才能運行這個專案。那這裡就跟同學分享一下這一段。</li><li>最後我們在講一下作業的部分，最後的作業的部分就有分為前台跟後台，那前台跟後台同學都可以選擇使用老師所提供的版型、 Bootstrap 的版型、或自定義版型都是可以的。當然也希望同學可以經營成屬於自己主題的購物網站，那圖庫的話，你可以使用 unsplash 這個網站圖庫，細節的話有些部分希望同學可以自己做加強，像是錯誤回饋的部分，同學可以加上連線、以及表單的錯誤回饋…等等，然後還有增加 Vue 的 Component 使用，另外還有一個、希望同學的作品都可以有增加多一點的獨特性，所以盡量去自定義 Bootstrap 的樣式、色彩，然後不要只使用預設的樣式。</li><li>那作業交送的方式有兩種，一種是直接寄給我們，寄給我們的話請不要包含 node_modules 這個資料夾，這個資料夾非常的大，而且你上傳給我的話，我還是必需要重新安裝。那另外一個比較推薦的做法是你直接將這個 dist 資料夾上傳到 GitHub Pages，那前後台的原始碼上傳到 GitHub，相關連結直接提供到 Udemy 問答區，你都提供完之後，老師就會來做檢視。如果沒有問題的話，大家來開始練習吧。</li></ol>



<pre class="wp-block-code"><code>// config/prod.env.js

'use strict'
module.exports = {
  NODE_ENV: '"production"',
  APIPATH: '"https://vue-course-api.hexschool.io/"',
  CUSTOMPATH: '"geehsu"',
}
</code></pre>



<h3>最終作業文件</h3>



<p>最終作業說明<br><br>注意：每個最終作業限制<strong>檢視三次</strong>，講師會在每次檢視後回覆的剩餘批改次數。<br><br>在第一次提交時：</p>



<ul><li>請提供 GitHub 及 GitHub Page 兩種版本</li><li>確保 GitHub 上的程式碼下載後可正確運行，並修正 Console 所有錯誤</li></ul>



<p>重新提交檢視時：</p>



<ul><li>請確保修正完講師的所有建議</li><li>如有疑問可回覆詢問講師 (詢問不會算次數)</li><li>若是課程觀念問題請提交至線上問答區</li></ul>



<p>課程中提供完整的 API 與後台教學<br>同學的作業是完成此作品，並上傳至 Github Pages<br>那麼同學就來完成此作業吧</p>



<ul><li>後台：可使用 Bootstrap 的 Dashboard 版型、或自選撰寫 CSS、上網下載其他版型皆可</li><li>前台：可使用課程提供的免費版型或自定義版型</li><li>經營成屬於自己主題的購物網站</li><li>圖庫可用：<a rel="noreferrer noopener" href="https://unsplash.com/" target="_blank">unsplash</a></li><li>細節要求：<ul><li>增加錯誤回饋如：連線錯誤、表單錯誤等錯誤訊息提示</li><li>增加 Vue 元件的使用，如頁碼、Modal、卡片都可運用 Component 練習</li><li>自定義 Bootstrap 的樣式、色彩，盡可能不使用預設的樣式</li></ul></li><li>作業前後台需要釋出至 Github Pages 或寄送到 service@hexschool.com<br>另外必需提供原始碼給老師查閱(不然有錯很難抓阿~)</li></ul>



<p>作業寄送：</p>



<ol><li>推薦做法：<br>編譯後的檔案(dist) 上傳至 Github Pages<br>前後台原始碼上傳至 Github<br>將相關連結提供到<a rel="noreferrer noopener" href="https://rpg.hexschool.com/login" target="_blank">任務系統回報任務</a><br><br>Github Pages 基礎部屬教學 –&nbsp;<a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=bU0f1IvUcZA" target="_blank">連結</a></li></ol>



<p>如果作業希望做為應徵作品集使用<br>可在回覆時增加：<strong>希望作為履歷作品集的一部分</strong><br><br>作業審核標準會不太一樣，許多內容將針對畫面處理給予建議<br><strong>希望作為履歷作品集的一部分</strong>盡可能以 “接近實際運作的網站” 經營，<br>以下部分可先多加強</p>



<ul><li>網頁主要文案 (怎麼吸引用戶在這個網站購買)</li><li>產品文案可多加調整 (吸引用戶買該產品)</li><li>網頁可增加互動性內容 (我的最愛、類似品項、優惠券介紹…)</li></ul>



<p>可參考同學們的作品 (連結頁面下方) –&nbsp;<a href="https://www.hexschool.com/qa/how-to.html" target="_blank" rel="noreferrer noopener">連結</a></p>



<p>Github 部屬時，如果出現資源路徑錯誤<br>則需要調整設定檔的路徑</p>



<pre class="wp-block-code"><code>// ./config/index.js

build: {
  // ...
  assetsPublicPath: '/view', // 修改這裡得值，使其對應 Github Pages 的路徑

}</code></pre>



<p>接下來輸出後，再把 dist 資料夾推到 gh-pages 分支</p>



<p>如果使用 npm run build 時遇到類似下方的錯誤訊息：</p>



<pre class="wp-block-code"><code>⠋ building for production.../.../node_modules/last-call-webpack-plugin/src/index.js:170
  compiler.hooks.compilation.tap(
    ^
TypeError: Cannot read property 'compilation' of undefined</code></pre>



<p>因為部分套件更新導致錯誤，可以打開 package.json 調整套件版號如下：</p>



<pre class="wp-block-code"><code>"optimize-css-assets-webpack-plugin": "3.2.0",</code></pre>



<p>此講座的資源</p>



<ul><li>shoppingCartTemplate.zip (在 Udemy 課程內下載)</li></ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>JavaScript 必修篇 &#8211; 前端修練全攻略 (1)</title>
		<link>/wordpress_blog/javascript-compulsory-1/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Mon, 13 Dec 2021 06:53:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=715</guid>

					<description><![CDATA[介紹 目前課程更新進度 本課程於 2021 年 7/21 正式對 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2>介紹</h2>



<h3>目前課程更新進度</h3>



<p>本課程於 2021 年 7/21 正式對外上線，並會在 2021/9/30 補充下列章節：</p>



<ol><li>JS – 箭頭函式 (8/15(日) 錄製完成)</li><li>JS – 陣列中進階 (filter、map)運用 (8/15(日) 錄製完成)</li><li>JS – 彩蛋課程 – NPM 管理 (9/11(日) 錄製完成)</li><li>JS – 彩蛋課程 – webpack 壓縮打包工具管理 (9/11(日) 錄製完成)</li><li>JS – 最終作業 – OPEN API 蔬菜比價網 (9/18(日) 提供任務繳交)</li></ol>



<h4>JS 章節題目更新說明</h4>



<p>JS 各小節將會提供選擇題幫助觀念吸收，將會在 8/4(三) 陸續更新於課程內，並於 9/26(日) 前更新完畢。</p>



<h4>課程更新保障說明</h4>



<p>將在未來三年，因應時代趨勢，每年新增 120 分鐘教材，總計增加 6 小時直播錄影或影音課程，</p>



<p>並於 2024/12/31 前完成全數更新。</p>



<h2>JavaScript 課前知識與環境介紹</h2>



<h3>安裝 Chrome 網頁瀏覽器</h3>



<h3>安裝 VSCode 程式編輯器</h3>



<h3>每日任務資源</h3>



<h2>變數與資料型別</h2>



<h3>變數大綱簡介</h3>



<p><a href="https://hackmd.io/@hexschool/r1r6p5qCw" target="_blank" rel="noreferrer noopener">共筆文件</a></p>



<h4>變數(Variable)與值(Value)</h4>



<p>透過程式幫我們去記錄資訊。</p>



<p>以人類來講，是透過大腦吸收資訊。</p>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>香蕉價格</td><td>79</td></tr><tr><td>店長姓名</td><td>“Tom”</td></tr><tr><td>店面開啟</td><td>是</td></tr></tbody></table></figure>



<p>變數記錄資訊</p>



<h5>課程目標</h5>



<ul><li>宣告變數的方法：let、const、var</li><li>基本型別(primitives types) 介紹<ol><li>字串 (String) – “Tom”</li><li>數字 (Number) – 79</li><li>布林 (Boolean) – true, false</li><li>undefined</li><li>null</li><li>Symbol</li></ol></li><li>型別操作方法</li></ul>



<blockquote class="wp-block-quote"><p>除了基本型別外，後面還會講解物件型別，例如陣列(array)與物件(object)</p></blockquote>



<h3>透過 Chrome 開發人員工具來寫 JavaScript</h3>



<p>debug 除錯。</p>



<ul><li>右上角選單→更多工具→開發人員工具</li><li>滑鼠右鍵→檢查</li><li>快捷鍵：Ctrl+Shift+I 或者 F12</li></ul>



<pre class="wp-block-code"><code>// Google Console
&gt;  alert('hello');
&lt;  undefined
&gt;</code></pre>



<p>Console 面板選單→Dock side 調整面板位置。</p>



<h3>如何宣告變數</h3>



<p>let 變數名稱 = value;</p>



<p>let a = 1;<br>宣告一個變數，變數名稱為 a，並賦予值為 1 。</p>



<ul><li>宣告一個變數 – let</li><li>變數名稱 – a</li><li>賦予值 – =</li><li>值 – 1</li></ul>



<p>變數、賦予值通常是沒辦法做修改。<br>; 是中斷程式碼、然後進行下一個程式碼的意思。</p>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>1</td></tr><tr><td>b</td><td>3</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// Google Console
&gt;  let a = 1;
&lt;  undefined
&gt;  a
&lt;  1
&gt;  let b = 3;
&lt;  undefined
&gt;  b
&lt;  3
&gt;</code></pre>



<h3>設定變數，如同在 excel 設定欄位般容易！</h3>



<pre class="wp-block-code"><code>// Google Console - 分頁1
&gt;  let a = 1;
&lt;  undefined
&gt;  let b = 3;
&lt;  undefined
&gt;  a
&lt;  1
&gt;  b
&lt;  3</code></pre>



<pre class="wp-block-code"><code>// Google Console - 分頁2
&gt;  a
x  Uncaught ReferenceError: a is not defined at &lt;anonymous&gt;:1:1
&gt;  b
x  Uncaught ReferenceError: b is not defined at &lt;anonymous&gt;:1:1</code></pre>



<p>跨頁面、同頁面的記憶體存放的機制<br>觀念：新的分頁是獨立的頁面，JavaScript 程式碼不會共享到其他頁面，自己本身有自己的記憶體空間去做存放。<br><br>情況：頁面重新整理的話，記憶體空間會被清除。<br><br>自訂及管理 Google Chrome → 更多工具 → 工作管理員，<br>右鍵可以勾選 JavaScript 記憶體使用量。<br>變數是存放在瀏覽器記憶體上面。</p>



<h3>number 型別 – 讓您擁有簡易計算機功能</h3>



<ul><li>20%2 – 取餘數</li></ul>



<pre class="wp-block-code"><code>// Google Console -1
&gt;  30*8
&lt;  240
&gt;  1+5
&lt;  6
&gt;  5-4
&lt;  1
&gt;  4/2
&lt;  2
&gt;  20%2
&lt;  0
&gt;  5**2
&lt;  25
&gt;  5**3
&lt;  125
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console -2
&gt;  3+2*2
&lt;  7
&gt;  let a = 1;
&lt;  undefined
&gt;  let b = 2+2+2
&lt;  undefined
&gt;  b
&lt;  6
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console -3
&gt;  a*b
&lt;  6
&gt;  let c = 3;
&lt;  undefined
&gt;  b*c
&lt;  18
&gt;  let d = 2*3
&lt;  undefined
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>1</td></tr><tr><td>b</td><td>6</td></tr><tr><td>c</td><td>3</td></tr><tr><td>d</td><td>6</td></tr></tbody></table></figure>



<h3>number 型別 – 各種數字的支援程度大解密</h3>



<pre class="wp-block-code"><code>// Google Console -1
&gt;  let a = 1;
&lt;  undefined
&gt;  let b = -3;
&lt;  undefined
&gt;  b
&lt;  -3
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console
&gt;  let c = 1.1314;
&lt;  undefined
&gt;  c
&lt;  1.1314
&gt;  typeof c
&lt;  "number"</code></pre>



<h3>number 型別 – 變數如何帶變數</h3>



<ul><li>學程式，任務拆解</li><li>變數命名 – milkPrice，小駝峰命名</li></ul>



<h4>模擬情境：幫小明算數學</h4>



<p>小明去了超商，想到母親要他幫忙買牛奶<br><br>1.小明來到冰櫃，看到牛奶一瓶30元<br>2.於是他買了 6 罐<br>3.小明開始心算總共多少錢</p>



<pre class="wp-block-code"><code>// Google Consoel
&gt;  let milkPrice = 30;
&lt;  undefined
&gt;  let milkNum = 6;
&lt;  undefined
&gt;  milkPrice*milkNum
&lt;  180
&gt;  let total = milkPrice*milkNum;
&lt;  undefined
&gt;  total
&lt;  180
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>milkPrice</td><td>30</td></tr><tr><td>milkNum</td><td>6</td></tr><tr><td>total</td><td>milkPrice*milkNum</td></tr></tbody></table></figure>



<h3>變數與資料型別-小節作業</h3>



<h5>變數與資料型別</h5>



<p>練習一：小美買冰塊<br>1. 練習變數取名 (使用小駝峰)<br>2. 根據影片題目練習 『賦予變數值』以及『計算出結果』<br>3. 提供 Chrome 執行結果的截圖</p>



<p>練習二：小華去速食店<br>1. 練習變數取名 (使用小駝峰)<br>2. 根據影片題目『賦予變數值』以及『計算出結果』<br>3. 提供 Chrome 執行結果的截圖</p>



<h4>模擬情境一：小美買冰塊</h4>



<p>小美他去超商買冰塊，<br>1.小美錢包有 200 元<br>2.他看到冰塊一包 25 元<br>3.他買了 7 包冰塊<br>4.請問他付費完，錢包還剩下多少錢</p>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>walletMoney</td><td>200</td></tr><tr><td>icePrice</td><td>25</td></tr><tr><td>iceNum</td><td>7</td></tr><tr><td>leftMoney</td><td>25</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// Google Console
&gt;  let walletMoney = 200;
&lt;  undefined
&gt;  let icePrice = 25;
&lt;  undefined
&gt;  let iceNum = 7;
&lt;  undefined
&gt;  let leftMoney = walletMoney - (icePrice*iceNum);
&lt;  undefined
&gt;  leftMoney
&lt;  25
&gt;</code></pre>



<h4>模擬情境二：小華去速食店，幫他計算差額</h4>



<p>小華他去速食店吃中餐，他很擔心錢帶不夠，他看了下菜單，漢堡一顆50元，可樂一瓶30元，小華很口渴，所以他想要買一顆漢堡跟兩瓶可樂，於是他看了口袋的錢，總共有180元，請問小華如果買完的話，還剩多少錢？</p>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>burgerPrice</td><td>50</td></tr><tr><td>cokePrice</td><td>30</td></tr><tr><td>pocketMoney</td><td>180</td></tr><tr><td>leftMoney</td><td>70</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// Google Console
&gt;  let burgerPrice = 50;
&lt;  undefined
&gt;  let cokePrice = 30;
&lt;  undefined
&gt;  let pocketMoney = 180;
&lt;  undefined
&gt;  let leftMoney = pocketMoney-(burgerPrice+cokePrice*2);
&lt;  undefined
&gt;  leftMoney
&lt;  70
&gt;</code></pre>



<h3>變數與資料型別小節測驗</h3>



<h2>let、const、var 介紹</h2>



<h3>let 變數詳細介紹</h3>



<p>let 用於宣告一個 「只作用在當前區塊的變數」，初始值可選擇性的設定。</p>



<ul><li>可以重新複寫既有的值。</li></ul>



<pre class="wp-block-code"><code>// Google Console
&gt;  let cokePrice = 20;
&lt;  undefined
&gt;  cokePrice
&lt;  20
&gt;  cokePrice = 40;
&lt;  40
&gt;  cokePrice
&lt;  40
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console
&gt;  let a = 1;
&lt;  undefined
&gt;  a = 3;
&lt;  3
&gt;  a
&lt;  3
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>cokePrice</td><td>40</td></tr><tr><td>a</td><td>3</td></tr></tbody></table></figure>



<h3>const 詳細介紹</h3>



<ul><li>let 賦予的值可以複寫</li><li>const 賦予的值比較難複寫</li></ul>



<pre class="wp-block-code"><code>// Google Console -1
&gt;  let a = 1;
&lt;  undefined
&gt;  const b = 1;
&lt;  undefined
&gt;  a
&lt;  1
&gt;  b
&lt;  1
&gt;  a = 2;
&lt;  2
&gt;  a
&lt;  2
&gt;  b = 3;
x  Uncaught TypeError: Assignment to constant variable. at &lt;anonymous&gt;:1:3
&gt;  b
&lt;  1
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console -2
&gt;  let cloud = 3;
&lt;  undefined
&gt;  cloud = 8
&lt;  8
&gt;  cloud
&lt;  8
&gt;  const sunNum = 1;
&lt;  undefined
&gt;  sunNum = 2;
x  Uncaught TypeError: Assignment to constant variable. at &lt;anonymous&gt;:1:8</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>sale</td><td>0.7</td></tr><tr><td>hatPrice</td><td>100</td></tr><tr><td>hatNum</td><td>3</td></tr><tr><td>total</td><td>210</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// Google Console -3
&gt;  const sale = 0.7;
&lt;  undefined
&gt;  const hatPrice = 100;
&lt;  undefined
&gt;  let hatNum = 3;
&lt;  undefined
&gt;  let total = sale*hatPrice*hatNum;
&lt;  undefined
&gt;  total
&lt;  210
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>sale</td><td>0.7</td></tr><tr><td>hatPrice</td><td>100</td></tr><tr><td>hatNum</td><td>10</td></tr><tr><td>total</td><td>700</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// Google Console -4
&gt;  hatNum = 10;
&lt;  10
&gt;  total = sale*hatPrice*hatNum;
&lt;  700
&gt;</code></pre>



<ul><li>變數的值比較常更動用 let，變數的值不再更動用 const</li><li>const 變數的值無法去做修改，let 變數的值可以被修改</li></ul>



<h3>var 歷史的眼淚詳細介紹</h3>



<p>var 在使用上比較容易造成一些奇怪的問題，所以現在比較少用了。</p>



<p>目前主流來講，學 let、const 就好。</p>



<pre class="wp-block-code"><code>// Google Console
&gt;  var a = 1;
&lt;  undefined
&gt;  a = 3;
&lt;  3
&gt;  a
&lt;  3
&gt;</code></pre>



<ul><li><a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Grammar_and_types" target="_blank">語法與型別</a></li><li><a rel="noreferrer noopener" href="https://caniuse.com/" target="_blank">Can I use</a>&nbsp;–<ul><li><a rel="noreferrer noopener" href="https://caniuse.com/?search=javascript%20var" target="_blank">javascript var</a></li><li><a rel="noreferrer noopener" href="https://caniuse.com/?search=javascript%20let" target="_blank">javascript let</a></li><li><a rel="noreferrer noopener" href="https://caniuse.com/?search=javascript%20const" target="_blank">javascript const</a></li></ul></li></ul>



<h3>宣告變數一次讓你知！</h3>



<h4>變數宣告特性 – 變數名稱</h4>



<ul><li>不能使用特定名稱，開頭不能使用數字</li><li>名稱大小寫是不同的變數名稱</li><li>可以接受中文</li><li>不能使用關鍵字、保留字 –&nbsp;<a rel="noreferrer noopener" href="https://www.w3schools.com/js/js_reserved.asp" target="_blank">javascript keywords</a></li></ul>



<pre class="wp-block-code"><code>// Google Console -1
&gt;  let a = 1;
&lt;  undefined
&gt;  a
&lt;  1
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console -2
&gt;  let const = 1;
x  Uncaught SyntaxError: Unexpected token 'const'
&gt;  </code></pre>



<pre class="wp-block-code"><code>// Google Console -3
&gt;  let b333 = 3;
&lt;  undefined
&gt;  let 1qqq = 4;
x  Uncaught SyntaxError: Invalid or unexpected token
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console -4
&gt;  let catNum = 1;
&lt;  undefined
&gt;  let catnum = 2;
&lt;  undefined
&gt;  catNum
&lt;  1
&gt;  catnum
&lt;  2
&gt; </code></pre>



<pre class="wp-block-code"><code>// Google Console -5
&gt;  let 貓咪數量 = 3;
&lt;  undefined
&gt;  貓咪數量
&lt;  3
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console -6
&gt;  let _a = 3;
&lt;  undefined
&gt;  _a
&lt;  3
&gt;  let $qq = 1;
&lt;  undefined
&gt;  $qq
&lt;  1
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console -7
&gt;  let if = 3;
x  Uncaught SyntaxError: Unexpected token 'if'
&gt;  let true = 3;
x  Uncaught SyntaxError: Unexpected token 'true'
&gt;  let var = 1;
x  Uncaught SyntaxError: Unexpected token 'var'
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>1</td></tr><tr><td>b333</td><td>3</td></tr><tr><td>catNum</td><td>1</td></tr><tr><td>catnum</td><td>2</td></tr><tr><td>_a</td><td>3</td></tr><tr><td>$qq</td><td>1</td></tr></tbody></table></figure>



<h3>let、const、var 介紹小節測驗</h3>



<h2>網頁與 Code 環境建立流程教學</h2>



<h3>VSCode 撰寫 JS 環境建立</h3>



<h4>建立網頁環境</h4>



<p>建立一支 index.html、建立一支 all.js，在 index.html 載入 js。</p>



<h4>操作流程</h4>



<ul><li>建立一個新的資料夾 project</li><li>新增檔案 index.html<ul><li>File → New File</li><li>在空白處點擊兩下</li><li>快捷鍵 ctrl + n</li></ul></li><li>建立一個網頁環境，使用 ! + tab or ! + enter 快速建立</li><li>新增檔案 all.js</li><li>在網頁右鍵檢查 → Google Console<ul><li>輸入a、輸入b 查看有無資料</li></ul></li><li>在 index.html 載入 all.js</li><li>網頁重新整理後再到 Google Console 測試有無資料</li></ul>



<pre class="wp-block-code"><code>// index.html
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;js-compulsory&lt;/h1&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js
let a = 1;
let b = 2;</code></pre>



<h3>console.log 印出你想顯示的資訊！</h3>



<pre class="wp-block-code"><code>// all.js

let a = 1;
let b = 2;

// alert(a);

console.log(a);
console.log(b);
console.log(a,b);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  1
  2
  1 2
&gt;</code></pre>



<h3>如何撰寫優雅的註解</h3>



<pre class="wp-block-code"><code>// all.js
// a玩家的得分
let a = 1;

console.log(a);</code></pre>



<pre class="wp-block-code"><code>// all.js
// 想知道自己還剩下幾根薯條
// 紀錄薯條的根數
let num = 0;
// 紀錄數薯條的過程
num+=1;
num+=1;
num += 2;
num += 2;
// 顯示最後薯條的數量
console.log(num);</code></pre>



<pre class="wp-block-code"><code>// all.js
// 想知道自己還剩下幾根薯條
let friesNum = 0;
// 紀錄數薯條的過程
friesNum+=1;
friesNum+=1;
friesNum += 2;
friesNum += 2;

console.log(friesNum);</code></pre>



<h3>Codepen – 透過它來提交您的程式碼</h3>



<p><a href="https://codepen.io/" target="_blank" rel="noreferrer noopener">Codepen</a></p>



<h4>操作流程</h4>



<ul><li>Google 搜尋 Codepen</li><li>註冊 Codepen 並登入</li><li>Create Pen</li><li>HTML、CSS、JS 程式碼去撰寫</li><li>Save 程式碼存檔</li><li>產生網址，可以用來作業來提交</li><li>沒辦法直接去修改別人程式碼，使用 Fork 複製到自己的 Codepen</li></ul>



<h4>練習</h4>



<ul><li>新增一個 codepen</li><li>新增第二個 codepen，要確保兩個 codepen 網址不同</li></ul>



<h3>網頁與 Code 環境建立流程教學小節測驗</h3>



<h2>數字型別與賦值運算子</h2>



<h3>賦值運算子+=、-=</h3>



<pre class="wp-block-code"><code>// all.js
let a = 50;
a = a+100;

console.log(a);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  150
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>150</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// all.js
let a = 50;
a = a+200;
a = a+150;

console.log(a);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  400
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>400</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// all.js
let a = 50;
a = a-10;</code></pre>



<pre class="wp-block-code"><code>// Google Console
  40
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>40</td></tr></tbody></table></figure>



<h4>縮寫寫法</h4>



<pre class="wp-block-code"><code>// all.js
let a = 50;
a = a+10;
a+=10;

console.log(a);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  70
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>70</td></tr></tbody></table></figure>



<ul><li>a = a+10; 等於 a+=10;</li><li>a = a-10; 等於 a-=10;</li></ul>



<h3>a++、a– 一次搞懂！</h3>



<p>數字的處理方式 – 桌球</p>



<pre class="wp-block-code"><code>// all.js
let a = 0;
let b = 0;

a++;
a++;
a++;
b++;

console.log(a,b);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  3 1
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>3</td></tr><tr><td>b</td><td>1</td></tr></tbody></table></figure>



<ul><li>a+=1; 等於 a++;</li><li>a-=1; 等於 a–;</li></ul>



<h3>數字型別與賦值運算子小節測驗</h3>



<h2>字串型別</h2>



<h3>宣告字串流程</h3>



<pre class="wp-block-code"><code>// all.js
let a = 'hello';
let b = "你好嗎？";
let c = "let's go";

console.log(a,b,c);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  hello 你好嗎？ let's go</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>‘hello’</td></tr><tr><td>b</td><td>“你好嗎？”</td></tr><tr><td>c</td><td>“let’s go”</td></tr></tbody></table></figure>



<p>單引號、雙引號使用起來是相同的。</p>



<h3>一次搞懂字串相加</h3>



<pre class="wp-block-code"><code>// all.js - 1
let a = 'hello 你好嗎？'

console.log(a);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
  hello 你好嗎？
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2
let a = 'hello ' + '你好嗎？';

console.log(a);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
  hello 你好嗎？
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 3
let friendName = 'Tom ';
let content = '你好嗎？'
console.log(friendName+content);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
  Tom 你好嗎？
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 4
let friendName = 'Tom';
let content = '你好嗎？'
console.log(friendName+' '+content);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 4
  Tom 你好嗎？
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 5
let friendName = 'Tom';
let content = '你好嗎？'
let total = friendName + ' ' + content;
console.log(total);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 5
  Tom 你好嗎？
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>friendName</td><td>Tom</td></tr><tr><td>content</td><td>你好嗎？</td></tr><tr><td>total</td><td>Tom 你好嗎？</td></tr></tbody></table></figure>



<h3>透過 typeof 瞭解當前變數型別</h3>



<pre class="wp-block-code"><code>// all.js
let friendName = 'Tom';
let content = '你好嗎？'
let total = friendName + ' ' + content;
let age = 18;
let ageString = "18";

console.log(typeof friendName);
console.log(typeof age);
console.log(typeof ageString);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  string
  number
  string
&gt;</code></pre>



<h3>數字與字串相加</h3>



<h4>自動轉型</h4>



<p>JavaScript 有些情況下會貼心的幫你轉型。</p>



<ul><li>數字自動轉型成字串</li></ul>



<pre class="wp-block-code"><code>// all.js
let myName = 'Tom';
let age = 18;
let total = myName + age;

console.log(total);
console.log(typeof total);
console.log("hi 我是"+myName+"，我今年18歲");</code></pre>



<pre class="wp-block-code"><code>// Google Console
  Tom18
  string
  h1 我是Tom，我今年18歲
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js
let myName = 'Tom';
let age = 20;
let total = myName + age;

console.log(total);
console.log(typeof total);
console.log("hi 我是"+myName+"，我今年"+age+"歲");</code></pre>



<pre class="wp-block-code"><code>// Google Console
  Tom20
  string
  h1 我是Tom，我今年20歲
&gt;</code></pre>



<h5>作業練習</h5>



<p>我體重55公斤，我是小美。</p>



<pre class="wp-block-code"><code>// all.js
// 我體重55公斤，我是小美
let myName = '小美';
let weight = 55;

// 數字自動轉型成字串
let total = myName + weight;
console.log(typeof total);

console.log('我體重'+weight+'公斤，我是'+myName+'。');</code></pre>



<pre class="wp-block-code"><code>// Google Console
  string
  我體重55公斤，我是小美。
&gt;</code></pre>



<h3>NaN 產生時機</h3>



<ul><li>NaN – 非數字</li><li>字串轉數字 – 使用 parseInt</li></ul>



<pre class="wp-block-code"><code>// all.js - 1
let myName = 'Tom';
let age = 20;

let total = myName * age;
console.log(total);
console.log(typeof total);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
  NaN
  number
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2
let myName = 'Tom';
let age = 20;

let yourAge = "30";
console.log(typeof yourAge);
// 字串轉數字 - 使用 parseInt
yourAge = parseInt("30");
console.log(typeof yourAge);

let words = parseInt("hello");
console.log(words);
console.log(typeof words);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
  string
  number
  NaN
  number
&gt;</code></pre>



<h3>字串處理實用方法</h3>



<ul><li>字串的處理方式、方法。</li><li>JS 本身有很多語法</li><li>length 屬性表示一個字符串的長度。</li><li>trim() 方法會移除字串起始及結尾處的空白字元。<ul><li>example：信箱帳號的處理</li></ul></li></ul>



<pre class="wp-block-code"><code>// Google Console - 1
&gt;  let a = "Mark";
&lt;  undefined
&gt;  typeof a
&lt;  "string"
&gt;  a.length
&lt;  4
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
&gt;  let a = '1234567890';
&lt;  undefined
&gt;  a
&lt;  '1234567890'
&gt;  a.length
&lt;  10
&gt;  a = '你好嗎'
&lt;  '你好嗎'
&gt;  a.length
&lt;  3
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
&gt;  let yourName = " Mark ";
&lt;  undefined
&gt;  yourName.length
&lt;  6
&gt;  yourName
&lt;  " Mark "
&gt;  yourName.trim();
&lt;  "Mark"
&gt;</code></pre>



<pre class="wp-block-code"><code>// Google Console - 4
&gt;  let myEmail = "   hexschool@gmail.com"
&lt;  undefined
&gt;  myEmail
&lt;  "   hexschool@gmail.com"
&gt;  myEmail.trim();
&lt;  "hexschool@gmail.com"
&gt;</code></pre>



<h3>變數記憶體指向講解</h3>



<p>value 資料指向。</p>



<pre class="wp-block-code"><code>// all.js - 1
let myEmail = 'Tom';
myEmail.length;

console.log(myEmail);
</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
  Tom
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2
let myEmail = 'Tom';
let nameLength = myEmail.length;

console.log(myEmail);
console.log(nameLength);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
  Tom
  3
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>myEmail</td><td>Tom</td></tr><tr><td>nameLenght</td><td>3</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// all.js - 3
let myEmail = '  Tom  ';
let nameLength = myEmail.length;
let updateEmail = myEmail.trim();

console.log(myEmail);
console.log(updateEmail);
console.log(nameLength);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
    Tom  
  Tom
  7
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 4
let myEmail = '  Tom  ';

console.log(myEmail.trim());</code></pre>



<pre class="wp-block-code"><code>// Google Console - 4
   Tom
&gt;  myEmail
&lt;  "  Tom  "
&gt; </code></pre>



<pre class="wp-block-code"><code>// all.js - 5
let myEmail = '  Tom  ';
myEmail = myEmail.trim();
console.log(myEmail);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 5
   Tom
&gt;  myEmail.length
&lt;  3
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">樣板字面值教學</h3>



<pre class="wp-block-code"><code>// all.js
let myName = "Tom";
let myAge = 18;
let content = "您好我是"+myName+"我今年"+myAge+"歲";

console.log(content);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  您好我是Tom我今年18歲
&gt;</code></pre>



<p>樣板字面值 (Template literals)</p>



<ul><li>ES6 語法<ul><li>反引號 ` `</li><li>變數 ${變數名稱}</li></ul></li></ul>



<pre class="wp-block-code"><code>// all.js
// 樣板字面值 (Template literals)

let myName = "Tom";
let myAge = 18;
// let content = "您好我是"+myName+"我今年"+myAge+"歲";
let content = `您好我是${myName}，我今年${myAge}歲`;
console.log(content);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  您好我是Tom，我今年18歲
&gt;</code></pre>



<h5>作業練習</h5>



<p>我現在189公分，我是Mary。</p>



<pre class="wp-block-code"><code>// all.js
// 題目：我現在189公分，我是Mary。

let myName = "Mary";
let myHeight = 189;

// 樣板字面值 (Template literals)
let content = `我現在${myHeight}公分，我是${myName}。`;

console.log(content);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  我現在189公分，我是Mary。
&gt;</code></pre>



<h3>字串型別小節測驗</h3>



<h2>變數：布林、undefined、null</h2>



<h3>布林介紹</h3>



<p>變數型別 – 布林</p>



<ul><li>true 正確</li><li>false 錯誤</li></ul>



<p>電腦不知道，你要告訴電腦。</p>



<h4>情境題</h4>



<ul><li>小名吃過飯了嗎？</li><li>是否為 VIP 資格</li></ul>



<pre class="wp-block-code"><code>// all.js
let a = 1;
console.log(a);
console.log(typeof a);

let str = 'hello';
console.log(str);
console.log(typeof str);

let isWakeUp = true;
console.log(isWakeUp);
console.log(typeof isWakeUp);

console.log(2 &gt; 1);
console.log(2 &gt; 3);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   1
   number
   hello
   string
   true
   boolean
   true
   false
&gt;</code></pre>



<h3>undefined 介紹</h3>



<p>尚未被賦予值。</p>



<h4>原始型別</h4>



<ul><li>字串</li><li>數字</li><li>布林</li><li>undefined</li><li>null</li></ul>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>1</td></tr><tr><td>b</td><td>undefined</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// all.js
let a = 1;
console.log(a);

let b;
console.log(b);
console.log(typeof b);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   1
   undefined
   undefined
&gt;</code></pre>



<h3>null 介紹</h3>



<p>有被賦予值，是告知為空值。</p>



<ul><li>常考面試題目</li></ul>



<pre class="wp-block-code"><code>// all.js
let b = 1;
let c = null;
console.log(c);
console.log(typeof c);

let d = 1234;
console.log(d);
d = null;
console.log(d);
</code></pre>



<pre class="wp-block-code"><code>// Google Console
   null
   object
   1234
   null
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>b</td><td>1</td></tr><tr><td>c</td><td>null</td></tr><tr><td>d</td><td>null</td></tr></tbody></table></figure>



<p>後面會講到陣列物件，是組合資料的方式，放大量的資料在變數上面。</p>



<h3>字串轉數字方法</h3>



<p>parseInt() 函式能將輸入的字串轉成整數。</p>



<ul><li>input 文字欄位取出的數字都是字串，從表單文字取出來的數字都會是字串</li></ul>



<pre class="wp-block-code"><code>// all.js
let a = "1";
console.log(a+1);
a = parseInt(a);
console.log(a+1);

a = parseInt("456777");
console.log(a+1);

a = parseInt("小明");
console.log(a);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   11
   2
   456778
   NaN
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>1</td></tr></tbody></table></figure>



<h3>數字轉字串方法</h3>



<p>toString() 方法返回一個表示該對象的字符串。</p>



<ul><li>大樂透號碼</li><li>“07”+”1234567″</li></ul>



<pre class="wp-block-code"><code>// all.js
let b = 1;
console.log(b+1);
b = b.toString();
console.log(typeof b);
console.log(b+1);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   2
   string
   11
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>b</td><td>“1”</td></tr></tbody></table></figure>



<h3>變數：布林、undefined、null 小節測驗</h3>



<h3>第一週總複習</h3>



<h2>比較與邏輯運算子</h2>



<h3>比較與邏輯運算子簡介</h3>



<ul><li>之前所學 – 變數</li><li>這個章節 –&nbsp;<strong>流程判斷</strong></li></ul>



<h4>流程判斷 – 畫流程圖</h4>



<ul><li>步驟一：任務拆解</li><li>步驟二：流程設計</li></ul>



<p>產生程式邏輯思維、運算思維。</p>



<h3>比較運算子：&gt;、=、&lt;=</h3>



<pre class="wp-block-code"><code>// all.js

// &gt; &lt; &gt;= &lt;= == !=

console.log(3&gt;2);
console.log(4&lt;1);
console.log(36.3&gt;=37.5);
console.log(37.5&gt;=37.5);
console.log(1==1);
console.log("hi"=="hi");
console.log(true==true);
console.log("hello"=="hi");
console.log(1 != 1);
console.log(1 != 2);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   true
   false
   false
   true
   true
   true
   true
   false
   false
   true
&gt;</code></pre>



<p>後面講到 if else 流程判斷。</p>



<p>這章節講到比較運算子、之後章節講到邏輯運算子。</p>



<h3>比較運算子搭配變數方法</h3>



<pre class="wp-block-code"><code>// all.js
// &gt; &lt; &gt;= &lt;= == !=
// 比較運算子，利用變數來比較

let a = 2;
let b = 3;
console.log(a&gt;b);
console.log((a+b)&gt;1);

let c = 4;
let d = 3;
console.log(c==d);

let e = 8;
let f = 5;
console.log(f&gt;=e);
console.log(f!=e);

let k = 2&gt;1;
console.log(k);

let isWakeUp = false;
console.log(isWakeUp);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   false
   true
   false
   false
   true
   true
   false</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>k</td><td>true</td></tr></tbody></table></figure>



<h3>=、== 差異講解</h3>



<pre class="wp-block-code"><code>// = ==

// 一個 = 賦予值的意思
let a = 1;

// 兩個 == 比較運算子

let b = 2;
console.log(a==b);
console.log(a!=b);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   false
   true
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>a</td><td>1</td></tr></tbody></table></figure>



<h3>==、=== 差異講解</h3>



<pre class="wp-block-code"><code>// all.js

// === 嚴謹模式

let a = 1;
let b = "1";
// 兩個等於，協助轉型
console.log(a==b);
console.log(a!=b);


// 三個等於，會比較也會看型別
console.log(a===b);
console.log(a!==b);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   true
   false
   false
   true
&gt;</code></pre>



<ul><li>常考面試題目</li></ul>



<h3>邏輯運算子介紹</h3>



<pre class="wp-block-code"><code>// all.js
// 邏輯運算子 &amp;&amp; ||
// &amp;&amp; 同時滿足條件
// 擁有VIP、消費500元，這兩個都要滿足才送贈品。
// || 滿足其中一個條件
// 擁有VIP、消費500元，這兩個只要一個滿足就送贈品。

let a = 1;
let b = 2;
console.log(a==1);
console.log(b==2);
console.log(a == 1 &amp;&amp; b == 2);
console.log(a == 2 &amp;&amp; b == 2);

let c = 3;
let d = 4;
console.log(c == 4 || d == 4);
console.log(c == 5 || d == 8);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   true
   true
   true
   false
   true
   false
&gt;</code></pre>



<h3>邏輯運算子範例情境</h3>



<pre class="wp-block-code"><code>// all.js

// &amp;&amp; 練習
// 符合贈禮條件
// 必須同時符合以下兩個條件才贈禮
// 消費滿 500 (涵蓋)
// 是 VIP 條件

let a = 600;
let isVip = true;
console.log( a &gt;= 500 &amp;&amp; isVip == true);

// || 練習
// 小孩吃東西
// 只要冰箱有米飯或蘋果任一個，小朋友就願意進食

let haveRice = true;
let haveApple = false;

console.log(haveRice == true || haveApple == true);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   true
   true
&gt;</code></pre>



<h3>邏輯運算子增加多條件作法</h3>



<pre class="wp-block-code"><code>// all.js

// &amp;&amp; 練習 and
// 符合贈禮條件
// 必須同時符合以下三個條件才贈禮
// 消費滿 500 (涵蓋)
// 是 VIP 條件
// 買到蛋糕，指定商品

let a = 600;
let isVip = true;
let buyCake = false;

console.log( a &gt;= 500 &amp;&amp; isVip == true &amp;&amp; buyCake == true);


// || 練習 or
// 小孩吃東西
// 只要冰箱有米飯、蘋果或牛奶任一個，小朋友就願意進食

let haveRice = false;
let haveApple = false;
let haveMilk = false;

console.log(haveRice == true || haveApple == true || haveMilk == true);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   false
   false
&gt;</code></pre>



<h3>比較與邏輯運算子小節測驗</h3>



<h2>流程判斷 – if、else if、else</h2>



<h3>為什麼要理解流程判斷？</h3>



<p>if 在寫 JavaScript 流程判斷很常使用的一個語法。</p>



<h4>情境題</h4>



<p>小美在氣溫 15 度以下時一定會穿上她心愛的棉外套，<br>今天氣溫是 14 度，請試著用 if 來寫小美會如何行動？</p>



<pre class="wp-block-code"><code>// all.js

// 小美在氣溫 15 度以下時一定會穿上她心愛的棉外套
// 今天氣溫是 14 度，請試著用 if 來寫小美會如何行動？

// console.log("小美穿著外套出門了");

let todayDegrees = 14;

let isWearJacket = 15 &gt;= todayDegrees;

// 條件式 true 就會執行
if(15 &gt;= todayDegrees){
  console.log("小美穿著外套");
  console.log("她準備出門了");
}

if(true){
  console.log("小美穿著外套");
  console.log("她準備出門了");
}

// 使用變數名稱，語意化可讀性比較高
if(isWearJacket){
  console.log("小美穿著外套");
  console.log("她準備出門了");
}

if(15&gt;14){
  console.log("小美穿著外套");
  console.log("她準備出門了");
}</code></pre>



<pre class="wp-block-code"><code>// Google Console
   小美穿著外套
   她準備出門了
   小美穿著外套
   她準備出門了
   小美穿著外套
   她準備出門了
   小美穿著外套
   她準備出門了
&gt;</code></pre>



<h3>if、else、else if 講解</h3>



<h4>if…else</h4>



<p>當條件成立的時候會執行 if 陳述式裡的程式，而不成立時則執行另外一個陳述式。</p>



<pre class="wp-block-code"><code>// all.js

// 小美在氣溫 15 度以下時一定會穿上她心愛的棉外套
// 今天氣溫是 14 度，請試著用 if 來寫小美會如何行動？

// console.log("小美穿著外套出門了");

let todayDegrees = 20;
let isWearJacket = 15 &gt;= todayDegrees;

// 條件式 true 就會執行
// 使用變數名稱，語意化可讀性比較高
if(isWearJacket){
  console.log("小美穿著外套");
  console.log("她準備出門了");
} else {
  console.log("小美因為太熱，所以不穿外套了");
}</code></pre>



<pre class="wp-block-code"><code>// Google Console
   小美因為太熱，所以不穿外套了
&gt;</code></pre>



<h4>情境題</h4>



<p>小明想要去外面吃飯，他很想吃牛肉麵，價格為110元，<br>但他不確定錢包剩下多少錢，<br>於是他打開錢包前決定，錢不夠就回家吃飯</p>



<pre class="wp-block-code"><code>// all.js

// 但他不確定錢包剩下多少錢
// true 小明想要去外面吃飯，他很想吃牛肉麵，價格為110元
// false 於是他打開錢包前決定，錢不夠就回家吃飯

// let wallet = 130;
let wallet = 90;
// 使用console.log 測試
// console.log(wallet &gt;= 110);

if(wallet &gt;= 110){
  console.log("小明跑去吃牛肉麵了");
} else {
  console.log("小明錢不夠，跑回家吃飯了！");
}</code></pre>



<pre class="wp-block-code"><code>// Google Console
   小明錢不夠，跑回家吃飯了！
&gt;</code></pre>



<h3>if 詳細講解 (一)</h3>



<ul><li>if、else 只能有一組</li><li>else if 可以多組</li></ul>



<pre class="wp-block-code"><code>// all.js

// 但他不確定錢包剩下多少錢
// true 小明想要去外面吃飯，他很想吃牛肉麵，價格為110元
// 有 80 元，他就吃夜市牛排
// 有 35 元，他就會跑去吃薯條
// false 於是他打開錢包前決定，錢不夠就回家吃飯

let wallet = 79;
// console.log(wallet &gt;= 110);
if(wallet &gt;= 110){
  console.log("小明跑去吃牛肉麵了");
} 
else if(wallet &gt;= 80){
  console.log("小明跑去吃夜市牛排了");
}
else if(wallet &gt;= 35){
  console.log("小明跑去吃薯條了！");
}
else {
  console.log("小明錢不夠，跑回家吃飯了！");
}</code></pre>



<pre class="wp-block-code"><code>// Google Console
   小明跑去吃薯條了！
&gt;</code></pre>



<h3>if 詳細講解 (二)</h3>



<ul><li>if</li><li>else if</li><li>else</li><li>下雨程度</li><li>字串</li></ul>



<pre class="wp-block-code"><code>// all.js

// 小華他的習慣是
// 1. 如果沒有下雨，就不會帶雨具
// 2. 但如果下毛毛雨，他會帶輕便雨衣
// 3. 假使下普通的雨，他會帶折傘
// 4. 如果颱風天豪雨，他會帶長傘

// 今天的天氣是毛毛雨，那小華會帶什麼雨具？

let todayWeather = "天災";
// 使用 console.log 測試
// console.log(todayWeather == "沒有下雨");
console.log(todayWeather == "毛毛雨");

if(todayWeather == "沒有下雨"){
  console.log("小華不帶雨具");
}
else if(todayWeather == "毛毛雨"){
  console.log("帶了輕便雨衣");
}
else if(todayWeather == "普通的雨"){
  console.log("帶了折傘");
}
else if(todayWeather == "颱風豪雨"){
  console.log("帶長傘");
}
else {
  console.log("小華遇到異常狀態");
}

</code></pre>



<pre class="wp-block-code"><code>// Google Console
   false
   小華遇到異常狀態
&gt;</code></pre>



<ul><li>if else 只能有一個</li><li>else if 可以多個</li><li>if 也可以不寫 else</li></ul>



<h3>流程判斷 – if、else if、else 小節測驗</h3>



<h2>if 流程圖規劃流程</h2>



<h3>if 圖表介紹</h3>



<p>學了很多語法，自己做作業、作品、比較大的時候，<br>腦袋一片空白、不知從何開始下手。</p>



<p>情境、解決的事情</p>



<h4>流程判斷</h4>



<ul><li>步驟一：任務拆解</li><li>步驟二：流程設計</li></ul>



<h4>工具</h4>



<ul><li><a rel="noreferrer noopener" href="https://whimsical.com/" target="_blank">Whimsical</a>&nbsp;– 線上流程圖工具</li><li>Powerpoint</li></ul>



<p>重要：運算思維、程式邏輯培養。</p>



<h3>圖表服務註冊流程</h3>



<ul><li>繪製流程圖官網 –&nbsp;<a href="https://whimsical.com/" target="_blank" rel="noreferrer noopener">Whimsical</a></li></ul>



<h4>操作流程</h4>



<ul><li>滑鼠移到 PRIVATE 區塊後點擊 +</li><li>選擇 Flowchart 建立新的檔案</li><li>命名檔案名稱：流程圖</li></ul>



<h3>流程圖符號簡介</h3>



<h4><a rel="noreferrer noopener" href="https://zh.wikipedia.org/zh-tw/%E6%B5%81%E7%A8%8B%E5%9B%BE" target="_blank">流程圖</a></h4>



<h5>常用符號</h5>



<ul><li>流程符號：用來表達過程的次序，用一條線由一個符號連接去到另一個符號。如果不是標準的上至下，左至右圖就會加上箭頭。</li><li>起止符號：用來表示程式或子程式的開始與完結。常一個圓角長方形表示。通常裡面會標上「開始」或「結束」或其他相關字眼，如「提交查詢」或「接受產品」。</li><li>程式：以長方形來代表一系列程式去改變數值、形式、數據的位置。</li><li>決策判斷：以一個菱形去顯示一個條件進程，用來按情況去決定下一步走向。通常以「是/否」或「真/假」值去決定。</li></ul>



<h3 class="has-background" style="background-color:#ff6663">流程圖 let code 講解</h3>



<h4>情境題</h4>



<p>想查詢自己的錢包有多少錢</p>



<p>小華他想出門，但他不確定自己的錢包有沒有錢<br>於是他想打開錢包看看還有多少錢<br>打開後，他發現有 150元，於是他就記錄在腦袋裡，他擁有 150元</p>



<pre class="wp-block-code"><code>// all.js

// 想查詢自己的錢包有多少錢

// 小華他想出門，但他不確定自己的錢包有沒有錢
// 於是他想打開錢包看看還有多少錢
// 打開後，他發現有 150 元，於是他就記錄在腦袋裡，他擁有 150 元

let wallet = 0;

wallet += 150;
console.log(`小華錢包有${wallet}元`);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   小華錢包有150元
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">流程圖 if code 講解</h3>



<h4>情境題</h4>



<p>想查詢自己的錢包剩下多少錢</p>



<p>小華他想出門，但他不確定自己的錢包有沒有錢<br>於是他打開錢包看看還有多少錢<br>如果小華發現自己有 100 元，他就吃 80 元牛肉麵<br>如果沒有 100 元，就不吃任何東西，也不出門<br>最後小華還想計算自己最後剩下多少元</p>



<pre class="wp-block-code"><code>// all.js

// 想查詢自己的錢包剩下多少錢

// 小華他想出門，但他不確定自己的錢包有沒有錢

// 於是他想打開錢包看看還有多少錢

// 如果小華發現自己有 100 元，他就吃 80 元牛肉麵
// 如果沒有 100 元，就不吃任何東西，也不出門

// 最後小華還想計算自己最後剩下多少元

let wallet = 0;
wallet += 150;
if(wallet &gt;= 100){
  wallet -= 80;
}
else {
  wallet -= 0;
}

console.log(`小華錢包還剩下${wallet}元`);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   小華錢包還剩下70元
&gt;</code></pre>



<h5>問與答</h5>



<p>Q：wallet -= 0; 可以不寫嗎？</p>



<p>A：要培養程式邏輯，初期在練習的時候會建議、鼓勵要寫，因為這樣你才會知道每一個動作做了什麼事。</p>



<ul><li><a href="https://whimsical.com/R2BzDA8RSKYQPSwTiWaaM6" target="_blank" rel="noreferrer noopener">流程圖 – let、if code</a></li></ul>



<h3>if 流程圖規劃流程小節測驗</h3>



<h2 class="has-background" style="background-color:#ff6663">if 中階運用</h2>



<h3 class="has-background" style="background-color:#ff6663">if 包 if 腰圍判斷流程圖設計</h3>



<p>if 包 if 的練習。</p>



<h4>情境題 – 腰圍指數測量</h4>



<p>男生腰圍大於 90 為過胖<br>女生腰圍大於 80 為過胖</p>



<ol><li>判斷是男生還是女生</li><li>如果是男生，還得判斷他的腰圍，90 為過胖</li><li>如果是女生，還得判斷她的腰圍，80 為過胖</li></ol>



<ul><li><a href="https://whimsical.com/if-8b1a4D72ZFiuyE3xQ99k6v" target="_blank" rel="noreferrer noopener">流程圖 – if 包 if 腰圍指數</a></li></ul>



<h3>if 包 if 腰圍判斷 Code 設計</h3>



<p>注意：影片中的『超過』為不包含本數者，因此應是 &gt; 而非 &gt;=</p>



<pre class="wp-block-code"><code>// all.js

// 測試資料、條件
let sex = "woman";
let cm = 88;

if(sex == "male"){
  // console.log("男生");
  if(cm &gt; 90) {
    console.log("男生體型過胖");
  }
  else {
    console.log("男生體型正常");
  }
}
else if(sex == "woman") {
  // console.log("女生");
  if(cm &gt; 80) {
    console.log("女生體型過胖");
  }
  else {
    console.log("女生體型正常");
  }
}
else {
  console.log("您的資料錯誤");
}

console.log("計算結束");</code></pre>



<pre class="wp-block-code"><code>// Google Console
   女生體型過胖
   計算結束
&gt;</code></pre>



<h3>看圖說故事 – if 練習一</h3>



<ul><li><a rel="noreferrer noopener" href="https://whimsical.com/4oYtsHWjADWsieeNrjY1Xa" target="_blank">圖表連結</a></li></ul>



<pre class="wp-block-code"><code>// all.js - 1

// if 練習
// 觀察客戶體溫

let myDegree = 38;
if(myDegree &gt;= 37.5) {
  console.log("您不得進入");
}</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   您不得進入
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2
// if 練習
// 觀察客戶體溫

let myDegree = 38;
console.log(myDegree &gt;= 37.5);

if(myDegree &gt;= 37.5) {
  console.log("您不得進入");
}
else {
  console.log("您可以進入");
}

console.log("結束");</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   true
   您不得進入
   結束
&gt;</code></pre>



<h3>看圖說故事 – if、else if 練習二</h3>



<pre class="wp-block-code"><code>// all.js

// if else 練習
// 計算成績是否及格

let myScore = 90;

if(myScore &gt;= 60) {
  console.log("您的成績及格");
}
else {
  console.log("您的成績不及格");
}

console.log("結束");</code></pre>



<pre class="wp-block-code"><code>// Google Console
   您的成績及格
   結束
&gt;</code></pre>



<h3>看圖說故事 – if、else if 練習三</h3>



<pre class="wp-block-code"><code>// all.js

// if else if 練習
// 計算成績評等
// 80分以上優秀、60~79分普通、59分以下不及格

let myScore = 60;
// console.log(myScore &gt;=60 &amp;&amp; 79 &gt;= myScore);
// 假使、如果，我的成績大於等於80
if(myScore &gt;= 80) {
  console.log("優秀");
}
else if (myScore &gt;= 60 &amp;&amp; 79 &gt;= myScore) {
  console.log("普通");
}
else if (myScore &lt;= 59) {
  console.log("不及格");
}

// myScore &gt;= 60
// 79 &gt;= myScore</code></pre>



<pre class="wp-block-code"><code>// Google Console
   普通
&gt;</code></pre>



<h4>if else if、else 練習</h4>



<p>計算成績評等<br>80分以上優秀、60~79分普通、59分以下不及格</p>



<pre class="wp-block-code"><code>// all.js
// if else if、else 練習
// 計算成績評等
// 80分以上優秀、60~79分普通、59分以下不及格

let myScore = "59";

if(myScore &gt;= 80) {
  console.log("顯示優秀");
}
else if(myScore &gt;= 60 &amp;&amp; myScore &lt;= 79) {
  console.log("顯示普通");
}
else if(myScore &lt;= 59) {
  console.log("顯示不及格");
}
else {
  console.log("無法判定");
}

console.log("結束");</code></pre>



<pre class="wp-block-code"><code>// Google Console
   顯示不及格
   結束
&gt;</code></pre>



<h3>if 中階運用小節測驗</h3>



<h2>陣列教學</h2>



<h3>為什麼要學陣列物件？</h3>



<p>陣列、物件是資料集合。</p>



<ul><li>人名、身高</li><li>水果區域、數量</li></ul>



<pre class="wp-block-code"><code>// all.js

// 陣列
let colors = &#91;'red','yellow','black'];

// 物件
let home = {
  "fatherName":"Tom",
  "motherName":"Mary",
  "sons":&#91;"bob","John","Tim"],
  "isWakeUp":false,
  "dogs":3,
}</code></pre>



<h3>筆刷工具介紹</h3>



<p>Screen Brush – Mac 才有。</p>



<h3>陣列寫法教學</h3>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>color1</td><td>‘blue’</td></tr><tr><td>color2</td><td>‘red’</td></tr><tr><td>colors</td><td>[‘blue’,’red’,’black’]</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// all.js

let color1 = 'blue';
let color2 = 'red';

// 陣列

let colors = &#91;'blue', 'red','black'];</code></pre>



<pre class="wp-block-code"><code>// Google Console

&gt; colors
&lt; (3) &#91;"blue", "red", "black"]
&gt;</code></pre>



<h3>陣列不只能放字串，也能放數字與混合資料</h3>



<pre class="wp-block-code"><code>// all.js
// 陣列 array

let colors = &#91;'blue', 'red','black'];

let ary = &#91;'blue',5,false];
console.log(ary);

let books = &#91;5,30,400,100];
console.log(books);

let data = &#91;];
console.log(data);</code></pre>



<pre class="wp-block-code"><code>// Google Console
 (3) &#91;"blue", 5, false]
 (4) &#91;5, 30, 400, 100]
 &#91;]</code></pre>



<h3>陣列讀取教學</h3>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;'blue', 'red', 'black'];

// 讀取陣列資料、瞭解陣列長度
console.log(colors&#91;0]); // 第一筆
console.log(colors&#91;1]); // 第二筆
console.log(colors&#91;2]); // 第三筆
</code></pre>



<p>陣列第一筆資料是從 0 開始。</p>



<h3>讀取陣列資料，並賦予新變數流程</h3>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;'blue', 'red', 'black'];

let liaoLikeColor = colors&#91;2];

console.log(liaoLikeColor);</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>colors</td><td>[‘blue’, ‘red’, ‘black’]</td></tr><tr><td>liaLikeColor</td><td>black</td></tr></tbody></table></figure>



<h3>length 讀取陣列長度流程</h3>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;'blue', 'red', 'black', 'pink'];

let colorsNum = colors.length;

console.log(colors.length);</code></pre>



<pre class="wp-block-code"><code>// Google Console
4
&gt; colorsNum
&lt; 4
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>colors</td><td>[‘blue’,’red’,’black’,’pink’]</td></tr><tr><td>colorsNum</td><td>4</td></tr></tbody></table></figure>



<h3>陣列預設寫入資料</h3>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;];

// 寫入
colors&#91;0] = "blue";
colors&#91;1] = "red";
colors&#91;2] = "black";

colors&#91;4] = "pink";
console.log(colors&#91;3]);
console.log(colors&#91;4]);
console.log(colors.length);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  undefined
  pink
  5
&gt;</code></pre>



<h3>push 寫入資料流程</h3>



<p>push() 方法會添加一個或多個元素至陣列的末端，並且回傳陣列的新長度。</p>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;'blue', 'red', 'black'];

colors.push(3);
colors.push("pink");
colors.push("yellow");


console.log(colors);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  (6) &#91;'blue', 'red', 'black', 3, 'pink', 'yellow']
&gt;</code></pre>



<h3>unshift 寫入資料流程</h3>



<p>unshift() 方法會添加一個或多個元素至陣列的開頭，並且回傳陣列的新長度。</p>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;'blue', 'red', 'black'];

colors.unshift('pink');

console.log(colors);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  (4) &#91;'pink', 'blue', 'red', 'black']
&gt;</code></pre>



<ul><li>unshift – 例如：留言板</li><li>push – 例如：列表</li></ul>



<h3>pop 與 shift 刪除資料</h3>



<p>pop() 方法會移除並回傳陣列的最後一個元素。此方法會改變陣列的長度。</p>



<p>shift() 方法會移除並回傳陣列的第一個元素。此方法會改變陣列的長度。</p>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;'blue', 'red', 'black'];

// 新增 push、unshift
// 刪除 pop、shift

colors.pop();
console.log(colors);

colors.shift();
console.log(colors);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  (2) &#91;'blue', 'red']
  &#91;'red']
&gt;</code></pre>



<h3>splice 刪除指定資料</h3>



<p>splice() 方法可以藉由刪除既有元素並/或加入新元素來改變一個陣列的內容。</p>



<pre class="wp-block-code"><code>// all.js

// 陣列 array

let colors = &#91;'blue', 'red', 'black'];

// 第一個數字，起始位置
// 第二個數字，要往後刪除幾筆資料

colors.splice(1,1);

console.log(colors);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  (2) &#91;'blue', 'black']
&gt;</code></pre>



<ul><li>splice – 常用在介面互動上面。</li></ul>



<h3>其他陣列總結</h3>



<ul><li>function 函式</li><li><a href="https://www.hexschool.com/2017/09/01/2017-09-01-javascript-for/" target="_blank" rel="noreferrer noopener">其他陣列處理方法</a></li></ul>



<h3>陣列教學小節測驗</h3>



<h2>物件教學</h2>



<h3>為什麼要有物件</h3>



<p>寫程式常用物件去撰寫。</p>



<ul><li>舉例 – 房子，游泳池、兩樓、頂樓設施、煙囪、陽台</li></ul>



<p>陣列有幾筆資料在裡面，物件描述一個東西裡面有哪些資訊。</p>



<h3>物件格式教學</h3>



<pre class="wp-block-code"><code>// all.js

// 陣列
let colors = &#91;"blue","red","black"];

// 物件
// 描述家庭
let motherName = "Mary";
let fatherName = "Tom";
let dogs = 3;

let home = {
  // 屬性: 值
  motherName: "Mary",
  fatherName: "Tom",
  dogs: 3,
  isWakeUp: false
};

console.log(home);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  {motherName: 'Mary', fatherName: 'Tom', dogs: 3, isWakeUp: false}
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>home</td><td>{<br>&nbsp; motherName: “Mary”,<br>&nbsp; fatherName: “Tom”,<br>&nbsp; dogs: 3,<br>&nbsp; isWakeUp: false<br>}</td></tr></tbody></table></figure>



<h3>如何讀取物件的值</h3>



<pre class="wp-block-code"><code>// all.js

let home = {
  motherName: "Mary",
  fatherName: "Tom",
  dogs: 3,
  isWakeUp: false
};

console.log(home);

console.log(home.motherName);
console.log(home.dogs);

let tomDogs = home.dogs;
console.log(tomDogs);</code></pre>



<pre class="wp-block-code"><code>// Google Console

  {motherName: 'Mary', fatherName: 'Tom', dogs: 3, isWakeUp: false}
  Mary
  3
  3
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>home</td><td>{<br>&nbsp; motherName: “Mary”,<br>&nbsp; fatherName: “Tom”,<br>&nbsp; dogs: 3,<br>&nbsp; isWakeUp: false<br>}</td></tr><tr><td>tomDogs</td><td>3</td></tr></tbody></table></figure>



<h3>新增物件屬性</h3>



<p>Q：資料會一起直接組好、還是自己需要去組資料</p>



<ul><li>兩者都有<ul><li>從別人伺服器抓取完整資料</li><li>網頁上做新增功能</li></ul></li></ul>



<pre class="wp-block-code"><code>// all.js

let home = {};

home.motherName =  'Mary';
home.fatherName = 'Tom';
home.dogs = 3;
home.isWakeUp = false;

console.log(home);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  {motherName: 'Mary', fatherName: 'Tom', dogs: 3, isWakeUp: false}
&gt;</code></pre>



<h3>修改物件值</h3>



<pre class="wp-block-code"><code>// all.js

let home = {
  motherName: "Mary",
  fatherName: "Tom",
  dogs: 3,
  isWakeUp: false
};

home.motherName = "Jane";
home.dogs += 1;  
home.dogs= home.dogs + 1;
console.log(home);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  {motherName: 'Jane', fatherName: 'Tom', dogs: 5, isWakeUp: false}
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數</td><td>值</td></tr><tr><td>home</td><td>{<br>&nbsp; motherName: “Jane”,<br>&nbsp; fatherName: “Tom”,<br>&nbsp; dogs: 5,<br>&nbsp; isWakeUp: false<br>}</td></tr></tbody></table></figure>



<h3>刪除物件資料</h3>



<pre class="wp-block-code"><code>// all.js

let home = {
  motherName: "Mary",
  fatherName: "Tom",
  dogs: 3,
  isWakeUp: false
};

delete home.dogs;
delete home.motherName;
console.log(home);
console.log(home.motherName);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  {fatherName: 'Tom', isWakeUp: false}
  undefined
&gt;</code></pre>



<h3>另一種讀取物件屬性方法</h3>



<pre class="wp-block-code"><code>// all.js

let home = {
  motherName: "Mary",
  fatherName: "Tom",
  dogs: 3,
  isWakeUp: false
};

console.log(home&#91;'motherName']);

let herName = 'motherName';
console.log(home&#91;herName]);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  Mary
  Mary
&gt;</code></pre>



<h3>物件讀取資料判斷時間</h3>



<pre class="wp-block-code"><code>// all.js

let home = {
  motherName: "Mary",
  fatherName: "Tom",
  dogs: 3,
  isWakeUp: false,
  "001": "hello"
};

// JSON 格式資料

console.log(home&#91;'motherName']);

// 使用.會產生錯誤
// console.log(home.001);
console.log(home&#91;'001']);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  Mary
  hello
&gt;</code></pre>



<h3>物件教學小節測驗</h3>



<h3>第二週總複習</h3>



<h2>陣列與物件整合運用</h2>



<h3>陣列與物件混合運用</h3>



<p>陣列跟物件的集合情境。</p>



<h4>情境文字</h4>



<p>有兩個水果攤<br>第一個水果攤，老闆叫Tom，香蕉有6個，蘋果有5個，還沒關店<br>第二個水果攤，老闆叫John，香蕉有9個，蘋果有8個，還沒關店</p>



<p>陣列來說，他都是放幾筆幾筆(資料) [0] [1]</p>



<pre class="wp-block-code"><code>// all.js

let market = &#91;
  {
    bossName: "Tom",
    bananaNum: 6,
    appleNum: 5,
    isClose: false
  },
  {
    bossName: "John",
    bananaNum: 9,
    appleNum: 8,
    isClose: false
  }
]

console.log(market);
console.log(market.length);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  (2) &#91;{},{}]
  2
&gt;</code></pre>



<h3>一次搞懂陣列與物件混合讀取教學</h3>



<pre class="wp-block-code"><code>// all.js

let market = &#91;
  {
    bossName: "Tom",
    bananaNum: 6,
    appleNum: 5,
    isClose: false
  },
  {
    bossName: "John",
    bananaNum: 9,
    appleNum: 8,
    isClose: false
  }
]

// 陣列
console.log(market);
// 物件
console.log(market&#91;0]);

// 物件裡面的屬性的值
console.log(market&#91;0].bossName);
console.log(market&#91;0]&#91;'bossName']);

// 測驗1
console.log(market&#91;1].appleNum);
// 測驗2
console.log(market&#91;0].isClose);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  (2) &#91;{},{}]
  {bossName: 'Tom', bananaNum: 6, appleNum: 5, isClose: false}
  Tom
  Tom
  8
  false
&gt;</code></pre>



<h3>JSON 格式介紹</h3>



<p>JavaScript Object Notation (JSON) 為將結構化資料 (structured data) 呈現為 JavaScript 物件的標準格式，常用於網站上的資料呈現、傳輸 (例如將資料從伺服器送至用戶端，以利顯示網頁)。</p>



<h3>安裝 JSON 檢視 Chrome 套件</h3>



<ul><li><a href="https://data.kcg.gov.tw/" target="_blank" rel="noreferrer noopener">高雄 OPEN DATA 開放資料官網網站</a></li><li><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=zh-TW" target="_blank" rel="noreferrer noopener">JSONView 安裝網站</a></li></ul>



<p>資料集→格式 JSON</p>



<h3>下載 JSON 格式資料</h3>



<ul><li>Download –&nbsp;<a href="https://cdn.fs.teachablecdn.com/OPXa0mREqO3hpSLfVnQw" target="_blank" rel="noreferrer noopener">電動車資訊.json</a></li></ul>



<p>備註：原網站已無提供 JSON 格式，請直接下載上方附件的 JSON 檔案進行練習。</p>



<p>檢視網頁原始碼，把資料複製起來。</p>



<ul><li>ctrl + a</li><li>ctrl + c</li></ul>



<pre class="wp-block-code"><code>// all.js

let data = &#91;{},{},{},{},{}];

console.log(data);
console.log(data.length);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  (136)&nbsp;&#91;{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…},&nbsp;…]
  136
&gt;</code></pre>



<p>可以在 VSCode 操作，也可以在 Google Console 操作。</p>



<h3>JSON 讀取方式教學 – 以充電站為例</h3>



<ul><li>Download –&nbsp;<a href="https://cdn.fs.teachablecdn.com/1OkbKqQrGKBVTUq4tPvg" target="_blank" rel="noreferrer noopener">電動車資訊.json</a></li></ul>



<p>充電站線上網址：<a rel="noreferrer noopener" href="https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json" target="_blank">JSON 線上網址</a>&nbsp;(因網站規範限制，請同學直接使用上方附件 json 下載練習)</p>



<ul><li>全部資料 – 陣列</li><li>每筆資料 – 物件</li></ul>



<pre class="wp-block-code"><code>// all.js

let data = &#91;{},{},{},{},{}];

console.log(data&#91;0].Charge);
console.log(data&#91;0].Address);
console.log(data&#91;2].Location);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  免費
  高雄市新興區中正三路34號1樓(室內停車場)
  為鑫機車行
&gt;</code></pre>



<h3>物件裡面還能包物件</h3>



<pre class="wp-block-code"><code>// all.js

let home = {
  motherStatus: {
    age: 30,
    name: "Mary"
  },
  fatherStatus: {
    age: 38,
    name: "Mark"
  },
  dogs: 3
}

console.log(home.motherStatus.name);
console.log(home.fatherStatus.name);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  Mary
  Mark
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">物件包物件讀取流程 – 以活動公告 open data 為例</h3>



<ul><li>Download –&nbsp;<a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/OCqdvvQ6CYXsJNFlPIgT" target="_blank">公告資料.json</a></li><li>公告 OPEN DATA 網址：<a href="https://www.ktec.gov.tw/ktec_api.php?type=json" target="_blank" rel="noreferrer noopener">JSON 網址</a></li></ul>



<pre class="wp-block-code"><code>// all.js

let data = { paging:{}, entries: &#91;{},{},{},{},{}] };

// 全部資料
console.log(data);

// 抓出total的值
console.log(data.paging.total);

// 抓出第二筆公告 title的值
console.log(data.entries&#91;1].title);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  {paging: {}, entries: Array(5)}
  5
  &#91;三民] 110年11月22日(一)扭轉薪時代，就業咖實在
&gt;  </code></pre>



<h3>如何篩選出自己想要的資料格式，並賦予到特定變數上</h3>



<pre class="wp-block-code"><code>// all.js

let data = { paging:{}, entries: &#91;{},{},{},{},{}] };

// 全部資料
console.log(data);

// 篩選想要的資料，並賦予到特定變數上
let ary = data.entries;

console.log(ary);
console.log(ary.length);
console.log(ary&#91;0].title);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  {paging: {}, entries: Array(5)}
  (5) &#91;{},{},{},{},{}]
  5
  &#91;左營] 110年11月26日(五)跨越展望、光明無限
&gt;</code></pre>



<h3>小魔王題目：複雜 JSON 格式，你/妳撈得到嗎？</h3>



<ul><li>Download –&nbsp;<a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/2oFNlRbaSb6M9oeiDM0z" target="_blank">高雄旅遊網.json</a></li><li>高雄旅遊網線上網址：<a href="https://api.kcg.gov.tw/api/service/get/9c8e1450-e833-499c-8320-29b36b7ace5c" target="_blank" rel="noreferrer noopener">線上 JSON 網址</a></li></ul>



<pre class="wp-block-code"><code>// all.js

let data = {
  "contentType": "application/json; charset=utf-8",
  "isImage": false,
  "data": {
    "XML_Head": {
      "Listname": "1",
      "Language": "C",
      "Orgname": "397000000A",
      "Updatetime": "2021/01/20 08:40:00",
      "Infos": {
        "Info": &#91;
          {
            "Id": "C1_397000000A_000230",
            "Status": "2",
            "Name": "田寮月世界",
            "Zone": "",
            "Toldescribe": "田寮「月世界」特殊景觀在地理學上稱為「惡地」，是由於地殼的「回春作用」，經年累月的經由雨水與河水強烈侵蝕，將泥沙堆積在泥岩上，地層變動後，泥沙更與泥岩混合再經由風化、沉積作用，形成今日地貌，僅適於耐旱、耐鹽的淺根植物（如：箭竹）、濱海植物生長。從田寮到旗山台28線沿路除了月世界景觀，還有大小不等的二十多個泥火山，常呈現間歇性的噴發現象，噴發的規模則視地底天然氣與泥漿的累積壓力而定，噴發後的泥流堆積地區。",
            "Description": "田寮「月世界」特殊景觀在地理學稱為「惡地」，經年累月由雨、河水侵蝕，將泥沙堆積在泥岩上，泥沙與泥岩混合經由風化形成。",
            "Tel": "886-7-6367036",
            "Add": "高雄市823田寮區崇德里月球路36號",
            "Zipcode": "823",
            "Travellinginfo": "無障礙交通：高鐵台南站 → 沙旗美月世界快線公車 → 月世界 → 旗山高鐵左營站 → 旗美快線公車 → 旗山 → 轉搭沙旗美月世界快線公車 → 月世界",
            "Opentime": "遊客中心：09:00–17:00月世界：全天候開放",
            "Gov": "397000000A",
            "Px": "120.38898",
            "Py": "22.88600"
          },
          {
            "Id": "C1_397000000A_000234",
            "Status": "2",
            "Name": "西子灣風景區",
            "Zone": "",
            "Toldescribe": "西子灣以夕陽美景及天然礁石聞名，區內包括了西子灣海水浴場、海濱公園、打狗英國領事館....等景點；可觀海景、遠眺高雄港；海水浴場極富熱帶氣息、南國風情，每當夜幕低垂，晚霞的照耀，漁船燈火閃爍其間，呈現海天一色美景。",
            "Description": "西子灣以夕陽美景及天然礁石聞名，區內包括了西子灣海水浴場、海濱公園、打狗英國領事館....等景點。",
            "Tel": "886-7-5250005",
            "Add": "高雄市804鼓山區蓮海路51號",
            "Zipcode": "804",
            "Travellinginfo": "搭高鐵至左營站下或搭臺鐵至高雄站下 → 轉搭高雄捷運至西子灣站下 → 轉搭高雄市公車(99路、橘1A路)至西子灣站下。",
            "Opentime": "西子灣海水浴場：10:00–16:00",
            "Gov": "397000000A",
            "Px": "120.26391",
            "Py": "22.62442"
          }
        ]
      }
    }
  },
  "id": "b69ffff9-23a5-44a6-a398-089b11a5f84c",
  "success": true
};

// 全部資料
console.log(data);

// 抓取 isImage的值
console.log(data.isImage);

// 抓取第一筆Listname的值
console.log(data.data.XML_Head.Listname);

// 抓取裡面Info陣列資料
console.log(data.data.XML_Head.Infos.Info);

// 抓取裡面第一筆Name的值
console.log(data.data.XML_Head.Infos.Info&#91;0].Name);

// 篩選想要的資料，並賦予到特定變數上
let ary = data.data.XML_Head.Infos.Info;
console.log(ary);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  {contentType: 'application/json; charset=utf-8', isImage: false, data: {…}, id: 'b69ffff9-23a5-44a6-a398-089b11a5f84c', success: true}
  false
  1
  (2) &#91;{},{}]
  田寮月世界
  (2) &#91;{},{}]
&gt;</code></pre>



<h4>tag簡單重點</h4>



<ul><li>看到物件就用 . 的方式前往屬性</li></ul>



<h3 class="has-background" style="background-color:#ff6663">物件搭配 if 練習</h3>



<ul><li><a href="https://whimsical.com/4oYtsHWjADWsieeNrjY1Xa" target="_blank" rel="noreferrer noopener">流程判斷圖線上版本</a></li></ul>



<pre class="wp-block-code"><code>// all.js

let tomStatus = {
  name: "Tom",
  age: 30,
  status: ""
}

tomStatus.degree = 36.5;

if(tomStatus.degree&gt;=37.5) {
  console.log("您不得進入");
  tomStatus.status = "您不得進入"
} else {
  console.log("您可以進入")
  tomStatus.status = "您可以進入"
}

console.log(tomStatus);</code></pre>



<pre class="wp-block-code"><code>// Google Console
  您可以進入
  {name: 'Tom', age: 30, status: '您可以進入', degree: 36.5}
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">陣列物件搭配 if 流程判斷練習</h3>



<pre class="wp-block-code"><code>// all.js

let peopleStatus = &#91;
  {
    name: "Tom",
    age: "30",
    status: ""
  }
];

peopleStatus&#91;0].degree = 39.5;

console.log(peopleStatus&#91;0]);

if(peopleStatus&#91;0].degree &gt;=37.5){
  peopleStatus&#91;0].status = "您不得進入";
  console.log("您不得進入");
}
else {
  peopleStatus&#91;0].status = "您可以進入";
  console.log("您可以進入");
}

console.log(peopleStatus&#91;0]);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   {name: 'Tom', age: '30', status: '', degree: 39.5}
   您不得進入
   {name: 'Tom', age: '30', status: '您不得進入', degree: 39.5}
&gt;</code></pre>



<h3>陣列與物件整合運用小節測驗</h3>



<h2>函式 function</h2>



<h3>為什麼需要學函式？</h3>



<h4>function 函式</h4>



<p>設定指令驅動程式。</p>



<ul><li>掃地</li><li>查詢資料</li><li>計算機</li><li>煮晚餐</li><li>倒垃圾</li></ul>



<h3>函式寫法教學</h3>



<pre class="wp-block-code"><code>// all.js

// 變數複習
let a = 1;
console.log(a);

// 機器人-早起活動-起床刷牙洗臉出門

// 宣告函式  函式名稱
function morningAction() {
  console.log('起床');
  console.log('刷牙');
  console.log('洗臉');
  console.log('出門');
}

// 執行函式
morningAction();
</code></pre>



<pre class="wp-block-code"><code>// Google Console
   1
   起床
   刷牙
   洗臉
   出門
&gt;</code></pre>



<h3>註冊多組函式流程</h3>



<pre class="wp-block-code"><code>// all.js

// 變數複習
let a = 1;
console.log(a);

// 機器人-早起活動-起床刷牙洗臉出門
// 宣告函式 函式名稱
function morningAction() {
  console.log('起床');
  console.log('刷牙');
  console.log('洗臉');
  console.log('出門');
}

// 機器人-晚上活動
function nightAction() {
  console.log('回家');
  console.log('刷牙');
  console.log('洗臉');
  console.log('睡覺');
}

// 執行函式
morningAction();
nightAction();</code></pre>



<pre class="wp-block-code"><code>// Google Console
   1
   起床
   刷牙
   洗臉
   出門
   回家
   刷牙
   洗臉
   睡覺
&gt;</code></pre>



<h3>函式裡面仍可以執行函式</h3>



<pre class="wp-block-code"><code>// all.js

// 變數複習
let a = 1;
console.log(a);

// 機器人-早起活動-起床刷牙洗臉出門
// 宣告函式 函式名稱 (參數)
function morningAction() {
  console.log('起床');
  cleanHead();
  console.log('出門');
}

// 機器人-晚上活動
function nightAction() {
  console.log('回家');
  cleanHead();
  console.log('睡覺');
}

// 機器人-清理頭部
function cleanHead() {
  console.log('刷牙');
  console.log('洗臉');
}

// 執行函式
morningAction();
nightAction();</code></pre>



<pre class="wp-block-code"><code>// Google Console
   1
   起床
   刷牙
   洗臉
   出門
   回家
   刷牙
   洗臉
   睡覺
&gt;</code></pre>



<h3>函式參數介紹</h3>



<pre class="wp-block-code"><code>// all.js - 1

function a() {
  console.log('hello');
}

a();</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   hello
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

function a(num) {
  console.log(num);
}

a(1);

a(3);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   1
   3
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 3

function a(num1, num2) {
  console.log(num1);
  console.log(num2);
}

a(1,2);

a(3,4);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
   1
   2
   3
   4
&gt;</code></pre>



<h3>參數寫法-參數只存活在大括號</h3>



<p>參數跟變數不一樣。</p>



<pre class="wp-block-code"><code>// all.js

function a(num1, num2) {
  console.log(num1);
  console.log(num2);
}

a(1,2);
console.log(num1);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   1
   2
x  Uncaught ReferenceError: num1 is not defined at ...
&gt;</code></pre>



<h3>參數寫法-兩個數字相加工具</h3>



<pre class="wp-block-code"><code>// all.js - 1

// 透過函式
// 函式 兩個數字相加工具

function add(num1, num2) {
  console.log(`您加總的數字為${num1+num2}`);
}

add(2,3);
</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   您加總的數字為5
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

// 透過函式
// 函式 兩個數字相加工具
function add(num1,num2) {
  console.log(`您加總的數字為${num1+num2}`);
}

add(2,3);

// 函式 兩個數字相減工具
function minus(num1,num2) {
  console.log(`您錢包所剩下的金額為${num1-num2}元`);
}

minus(100,60);

// 函式 兩個數字相乘工具
function multiply(num1,num2) {
  console.log(`您使用3C產品的總時間為${num1*num2}小時`);
}

multiply(30,8);

// 函式 兩個數字除法工具
function divided(num1,num2) {
  console.log(`您每天飲食開銷為${num1/num2}元`);
}

divided(6000,30);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   您加總的數字為5
   您錢包所剩下的金額為40元
   您使用3C產品的總時間為240小時
   您每天飲食開銷為200元
&gt;</code></pre>



<h3>輸入跟輸出的重要性</h3>



<p>函式的觀念，懂輸入跟輸出比較好理解什麼時候該使用參數。</p>



<figure class="wp-block-table"><table><tbody><tr><td></td><td>input 輸入</td><td></td><td>處理</td><td></td><td>output 輸出</td></tr><tr><td>電腦運作</td><td>鍵盤輸入 a文字</td><td>→</td><td>電腦處理</td><td>→</td><td>螢幕顯示 a 文字</td></tr><tr><td>冷氣</td><td>遙控器輸入電源鍵</td><td>→</td><td>冷氣機獲得指令並開始處理此行為</td><td>→</td><td>開啟冷氣機</td></tr><tr><td>學習</td><td>輸入大量學習資源</td><td>→</td><td>吸收消化</td><td>→</td><td>輸出：寫作業、筆記</td></tr><tr><td>相加產生器</td><td>輸入兩個數字 1 與 3</td><td>→</td><td>你的程式碼</td><td>→</td><td>輸出 4</td></tr><tr><td>偶數查詢</td><td>輸入 4</td><td>→</td><td>你的程式碼</td><td>→</td><td>輸出 “是偶數”</td></tr><tr><td>小數點留後兩位</td><td>輸入 1.5678</td><td>→</td><td>你的程式碼</td><td>→</td><td>輸出 1.56</td></tr><tr><td>BMI 計算</td><td>輸入<br>身高 178<br>體重 70</td><td>→</td><td>你的程式碼</td><td>→</td><td>輸出 22</td></tr></tbody></table></figure>



<h3 class="has-background" style="background-color:#ff6663">return 寫法教學</h3>



<p>return：回傳，把值回傳回去的意思。</p>



<p>把函式裡面的值，往外層、指定的地方回傳，並透過變數把值賦予上去。</p>



<pre class="wp-block-code"><code>// all.js - 1

// 國文分數+數學分數的加總計算機

function calcTotalScore(chineseScore,mathScore) {
  console.log(chineseScore+mathScore);
}


let markTotalScore = calcTotalScore(40, 60);
console.log(markTotalScore);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   100
   undefined
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

// 國文分數+數學分數的加總計算機

function calcTotalScore(chineseScore,mathScore) {
  // console.log(chineseScore+mathScore);

  return chineseScore + mathScore;
}


let markTotalScore = calcTotalScore(40, 60);
console.log(markTotalScore);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   100
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 3

// 國文分數+數學分數的加總計算機

function calcTotalScore(chineseScore,mathScore) {
  // console.log(chineseScore+mathScore);

  return chineseScore + mathScore;
}


let markTotalScore = calcTotalScore(40, 60);
console.log(markTotalScore);
let tomTotalScore = calcTotalScore(100, 100);
console.log(tomTotalScore);

console.log(`Tom 的總分為${tomTotalScore}`);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
   100
   200
   Tom 的總分為200
&gt;</code></pre>



<figure class="wp-block-table"><table><tbody><tr><td>變數名稱</td><td>值</td></tr><tr><td>markTotalScore</td><td>100</td></tr></tbody></table></figure>



<h3 class="has-background" style="background-color:#ff6663">return 宣告 let</h3>



<pre class="wp-block-code"><code>// all.js - 1

// 國文分數+數學分數的加總計算機

function calcTotalScore(chineseScore,mathScore) {
  // console.log(chineseScore+mathScore);
  let totalScore = chineseScore + mathScore;
  return totalScore;
}

let markTotalScore = calcTotalScore(40, 60);
console.log(markTotalScore);
let tomTotalScore = calcTotalScore(100, 100);
console.log(tomTotalScore);

console.log(`Tom 的總分為${tomTotalScore}`);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   100
   200
   Tom 的總分為200
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

// 國文分數+數學分數的加總計算機

function calcTotalScore(chineseScore,mathScore) {
  // console.log(chineseScore+mathScore);
  let totalScore = chineseScore + mathScore;
  return totalScore;
}

console.log(totalScore);

let markTotalScore = calcTotalScore(40, 60);
console.log(markTotalScore);
let tomTotalScore = calcTotalScore(100, 100);
console.log(tomTotalScore);

console.log(`Tom 的總分為${tomTotalScore}`);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
x  Uncaught ReferenceError: totalScore is not defined at ...
&gt;</code></pre>



<h3>return 可以有多個</h3>



<pre class="wp-block-code"><code>// all.js

// 國文分數+數學分數的加總計算機
// return 可以中斷函式執行，後面的程式就不跑了

function calcTotalScore(chineseScore,mathScore) {
  // console.log(chineseScore+mathScore);
  let totalScore = chineseScore + mathScore;
  return totalScore;

  console.log('hello');
  return 3;
}

let markTotalScore = calcTotalScore(40, 60);
console.log(markTotalScore);
let tomTotalScore = calcTotalScore(100, 100);
console.log(tomTotalScore);

console.log(`Tom 的總分為${tomTotalScore}`);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   100
   200
   Tom 的總分為200
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">return 可以有多個-範例Code</h3>



<pre class="wp-block-code"><code>// all.js

// return 檢查及格的 function
// 檢查學生成績是否及格的函式

function checkScore(score) {
  if (score &gt;= 60) {
    return '及格';
  }
  else {
    return '不及格';
  }
}

let tomScore = checkScore(60);
console.log(tomScore);

let markScore = checkScore(30);
console.log(markScore);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   及格
   不及格
&gt;</code></pre>



<h3>判斷是否為偶數 – 畫流程圖</h3>



<pre class="wp-block-code"><code>// Google Console
// 取餘數
&gt;  4%2
&lt;  0
&gt;  4%3
&lt;  1
&gt;  10%2
&lt;  0
&gt;  10%7
&lt;  3
&gt;</code></pre>



<figure class="wp-block-image size-full"><img loading="lazy" width="791" height="312" src="/wordpress_blog/wp-content/uploads/2022/04/判斷是否為偶數想法.jpg" alt="" class="wp-image-717"/><figcaption>判斷是否為偶數想法</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" width="627" height="1108" src="/wordpress_blog/wp-content/uploads/2022/04/判斷是否為偶數流程圖.jpg" alt="" class="wp-image-719"/><figcaption>判斷是否為偶數流程圖</figcaption></figure>



<h3 class="has-background" style="background-color:#ff6663">判斷是否為偶數-寫Code流程(上)</h3>



<h4>觀念</h4>



<ul><li>寫程式沒有最佳解法，只有當下最適合</li><li>小步測試，反覆驗證</li></ul>



<pre class="wp-block-code"><code>// all.js - 1

let myInput = 7;
let checkNumber = myInput%2==0;

console.log(checkNumber);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   false
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

let myInput = 7;

if(myInput %2 == 0) {
  console.log('是偶數');
}
else {
  console.log('不是偶數');
}</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   不是偶數
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 3

function checkNumber() {
  let myInput = 8;
  if(myInput %2 == 0) {
    console.log('是偶數');
  }
  else {
    console.log('不是偶數');
  }
}

checkNumber();</code></pre>



<pre class="wp-block-code"><code>// Google Console - 3
   是偶數
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 4

function checkNumber(myInput) {
  // let myInput = 8;
  if(myInput %2 == 0) {
    console.log('是偶數');
  }
  else {
    console.log('不是偶數');
  }
}

checkNumber(4);
checkNumber(7);
</code></pre>



<pre class="wp-block-code"><code>// Google Console - 4
   是偶數
   不是偶數
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 5

function checkNumber(myInput) {
  // let myInput = 8;
  if(myInput %2 == 0) {
    // console.log('是偶數');
    return '是偶數';
  }
  else {
    // console.log('不是偶數');
    return '不是偶數';
  }
}

let checkSevenNumber = checkNumber(7);
console.log(checkSevenNumber);

let checkEightNumber = checkNumber(8);
console.log(checkEightNumber);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 5
   不是偶數
   是偶數
&gt;</code></pre>



<h3>let 全域與區域變數邏輯</h3>



<pre class="wp-block-code"><code>// all.js
// 紀錄總共計算了幾次

let count = 0;

function test() {
  count += 1;
  console.log('test1');
}

test();
test();

console.log(`目前您紀錄了${count}次`);
</code></pre>



<pre class="wp-block-code"><code>// Google Console
   test1
   test1
   目前您紀錄了2次
&gt;</code></pre>



<h3>判斷是否為偶數-寫Code流程(下)</h3>



<pre class="wp-block-code"><code>// all.js - 1

let count = 0;

// 寫程式沒有最佳解法，只有當下最適合
// 小步測試，反覆驗證
function checkNumber(myInput) {
  count+=1;
  if (myInput %2 == 0) {
    return '是偶數';
  }
  else {
    return '不是偶數';
  }
}

let checkSevenNumber = checkNumber(7);
console.log(checkSevenNumber);

console.log(`您一共計算了${count}次`);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   不是偶數
   您一共計算了1次
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

let count = 0;

// 寫程式沒有最佳解法，只有當下最適合
// 小步測試，反覆驗證
function checkNumber(myInput) {

  if (myInput %2 == 0) {
    count+=1;
    return '是偶數';
  }
  else {
    count+=1;
    return '不是偶數';
  }
}

let checkSevenNumber = checkNumber(7);
console.log(checkSevenNumber);

console.log(`您一共計算了${count}次`);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   不是偶數
   您一共計算了1次
&gt;</code></pre>



<h5>兩種方式都可以，第一種比較直觀。</h5>



<h3>函式 function 小節測驗</h3>



<h3 class="has-background" style="background-color:#ff6663">第三週總複習</h3>



<h2>DOM – 選取網頁元素</h2>



<h3>為什麼要瞭解 DOM？</h3>



<ul><li><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noreferrer noopener">文件物件模型-維基百科</a></li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;MyTitle&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;Header&lt;/h1&gt;
  &lt;a href="#"&gt;MyLink&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h4>dom tree – 節點樹狀圖</h4>



<figure class="wp-block-image size-full"><img loading="lazy" width="777" height="652" src="/wordpress_blog/wp-content/uploads/2022/04/dom-tree.jpg" alt="" class="wp-image-721"/><figcaption>dom-tree</figcaption></figure>



<h3>瞭解 document 的重要性</h3>



<pre class="wp-block-code"><code>// Google Console
&gt;  document
&lt;  #document
&gt;</code></pre>



<h3>DOM 環境配置</h3>



<p>&lt;script&gt; 從 &lt;head&gt; 移到 &lt;body&gt; 的最下方</p>



<ul><li>程式碼是由上到下執行</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;a href="#"&gt;link&lt;/a&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h3>querySelector 選擇器</h3>



<pre class="wp-block-code"><code>// index.html - 1

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;a href="#"&gt;link&lt;/a&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 1

// 選取 h1          // 選取網頁上的元素   'CSS 選擇器'
const el = document.querySelector('h1');</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
&gt;  el
&lt;  &lt;h1&gt;js-compulsory&lt;/h1&gt;
&gt;</code></pre>



<ul><li>const：宣告變數</li><li>el：element (元素)的縮寫</li><li>=：賦予</li><li>document：網頁文件</li><li>querySelector：選取網頁上的元素</li><li>(‘h1′)：’CSS 選擇器’</li></ul>



<pre class="wp-block-code"><code>// index.html - 2

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1 class="header"&gt;js-compulsory&lt;/h1&gt;
  &lt;a href="#"&gt;link&lt;/a&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

// 選取 .header          // 選取網頁上的元素   'CSS 選擇器'
const el = document.querySelector('.header');</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
&gt;  el
&lt;  &lt;h1 class="header"&gt;js-compulsory&lt;/h1&gt;
&gt;</code></pre>



<h3>textContent 寫入文字資料</h3>



<ul><li>textContent：修改文字節點、文字內容</li></ul>



<pre class="wp-block-code"><code>// index.html - 1

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;a href="#"&gt;link&lt;/a&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// 選取 h1          // 選取網頁上的元素   'CSS 選擇器'
const el = document.querySelector('h1');
el.textContent = "Hello World!!";

</code></pre>



<pre class="wp-block-code"><code>// Google Console
&gt;  el
&lt;  &lt;h1&gt;Hello World!&lt;/h1&gt;
&gt;</code></pre>



<pre class="wp-block-code"><code>// 瀏覽器畫面

Hello World
link</code></pre>



<h3>innerHTML 插入 HTML 標籤</h3>



<ul><li>innerHTML：修改、新增網頁標籤的內容</li><li>`：反引號</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;div class="main"&gt;
    &lt;p&gt;hello!&lt;/p&gt;
  &lt;/div&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// .main class div 新增一個 h1

const main = document.querySelector(".main");
// console.log(main);

main.innerHTML = `&lt;h1 class="header"&gt;標題&lt;/h1&gt;`;</code></pre>



<h4>程式碼拆解說明</h4>



<ul><li>main：選取網頁的元素</li><li>innerHTML：增加網頁的結構</li><li>=：賦予</li><li>`&lt;h1 class=”header”&gt;標題&lt;/h1&gt;`：自己組出來的字串資料</li></ul>



<h4>&lt;p&gt;裡面的內容不見</h4>



<p>innerHTML 會刪掉全部裡面的內容，再重新去做寫入。</p>



<h4>回顧</h4>



<ul><li>要加入 HTML 標籤，請使用 innerHTML</li><li>innerHTML 的特性是會把原本裡面的預設內容全部清掉，清掉以後它才會重新賦予新的值進去</li></ul>



<h3>innerHTML 加入變數</h3>



<p>innerHTML 字串可以帶變數。</p>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;ul class="list"&gt;
    
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// ul .list
// &lt;li&gt;&lt;a href="https://www.google.com.tw/"&gt;Google連結&lt;/a&gt;&lt;/li&gt;

const list = document.querySelector('.list');
// console.log(list);

let myLink = "https://www.yahoo.com.tw/";
let myName = "奇摩";
let content = `&lt;li&gt;&lt;a href="${myLink}"&gt;${myName}連結&lt;/a&gt;&lt;/li&gt;`;
list.innerHTML = content+content;</code></pre>



<h3>textContent 與 innerHTML 運用差異</h3>



<ul><li>textContent：只針對文字做調整，文字</li><li>innerHTML：元素、屬性、文字都可以做調整，HTML結構</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;div class="main"&gt;&lt;/div&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const main = document.querySelector('.main');

// console.log(main); // 測試有沒有正確執行

// main.innerHTML = `&lt;h1&gt;標題&lt;/h1&gt;`;
main.textContent = `&lt;h1&gt;標題&lt;/h1&gt;`;</code></pre>



<h4>使用時機</h4>



<ul><li>HTML 標籤、顯示 DOM 結構時，使用 innerHTML</li><li>只是文字內容的時候，使用 textContent</li></ul>



<h3>setAttribute 增加 HTML 標籤屬性</h3>



<ul><li>setAttribute 後面設定兩個參數，第一個是屬性、第二個是內容</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;a href="#"&gt;連結&lt;/a&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
  &lt;style&gt;
    .red {
      color: red;
    }
  &lt;/style&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// # yahoo
const myLink = document.querySelector('a');
// console.log(myLink);

myLink.setAttribute('href','https://www.yahoo.com.tw/');
myLink.setAttribute('class','red');
</code></pre>



<h3>querySelectorAll 可重複選取多個元素</h3>



<ul><li>querySelector：只會去抓網頁裡面最前面的第一個 DOM 而已，選取到是一個DOM</li><li>NodeList：節點列表</li><li>querySelectorAll：可重複選取多個元素，回傳是 NodeList 陣列節點</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;a href="#"&gt;連結&lt;/a&gt;
  &lt;a href="#"&gt;連結&lt;/a&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
  &lt;style&gt;
    .red {
      color: red;
    }
  &lt;/style&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

// # yahoo
// const myLink = document.querySelector('a');
// // console.log(myLink);

// myLink.setAttribute('href','https://www.yahoo.com.tw/');
// myLink.setAttribute('class','red');

const myLinks = document.querySelectorAll('a');
console.log(myLinks);

myLinks&#91;0].setAttribute('href','https://www.yahoo.com.tw/');
myLinks&#91;0].setAttribute('class','red');

myLinks&#91;1].setAttribute('href','https://www.google.com.tw/');
myLinks&#91;1].setAttribute('class','red');</code></pre>



<h3>.innerHTML、.textContent、.getAttribute 取值方法</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;a href="https://yahoo.com.tw/" class="red"&gt;&lt;span&gt;連結&lt;/span&gt;&lt;/a&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const myLink = document.querySelector('a');
// console.log(myLink);

console.log(myLink.getAttribute('href'));
console.log(myLink.getAttribute('class'));
console.log(myLink.innerHTML);
let content = myLink.innerHTML;
console.log(content);

console.log(myLink.textContent);</code></pre>



<h3>表單元素取值方式</h3>



<ul><li>.value – 取值、重新賦予值方式</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;input type="text" class="txt" value="你好嗎"&gt;
  &lt;select class="list"&gt;
    &lt;option value="高雄市"&gt;高雄市&lt;/option&gt;
    &lt;option value="台北市"&gt;台北市&lt;/option&gt;
  &lt;/select&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const txt = document.querySelector('.txt');
// console.log(txt.value);  // 取值

const list = document.querySelector('.list');
// console.log(list.value);

txt.value = 'hello!!';  // 重新賦予值

list.value = '台北市';</code></pre>



<h3>DOM – 選取網頁元素小節測驗</h3>



<h2>Event 事件 – 讓您的網頁具有互動效果</h2>



<h3>什麼是 event？</h3>



<ul><li>event – 事件<ul><li>點擊事件：選單下拉、關閉按鈕</li><li>滾動事件：滑鼠滾動</li></ul></li><li><a rel="noreferrer noopener" href="https://www.w3schools.com/jsref/dom_obj_event.asp" target="_blank">HTML DOM Event Object</a></li><li>DOM 註冊事件</li></ul>



<h3>addeventListener 註冊事件監聽教學</h3>



<h4>event – 點擊</h4>



<ul><li>addEventListener 裡面要帶2個參數，第1個是行為事件、第2個是函式內容</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;input type="button" value="點擊" class="btn"&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const btn = document.querySelector('.btn');
const title = document.querySelector('h1');
// console.log(btn);
// console.log(title);

// 監聽 事件
btn.addEventListener('click', function(e) {
  // console.log('您被點擊了');
  title.textContent = '按鈕已經被點擊';
});</code></pre>



<h3>如何觀看 DOM 有註冊事件監聽</h3>



<h4>使用 Chrome Elements &gt; Event Listeners 查看</h4>



<p>在點擊按鈕上按滑鼠右鍵檢查，找到 Elements 面板裡面的 Event Listeners(事件監聽者)，可以查看 DOM 有沒有註冊事件監聽。</p>



<h3>來寫一個加法器吧！</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;input type="button" value="點擊" class="btn"&gt;
  &lt;h2&gt;0&lt;/h2&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const btn = document.querySelector('.btn');
const title = document.querySelector('h2');

// console.log(btn);
// console.log(title);

let count = 0;

btn.addEventListener('click',function(e) {
  // console.log('你被點擊了');
  count+=1;
  // console.log(count);
  title.textContent = count;
});</code></pre>



<h3>event 物件 – 告訴你當下元素資訊</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;input type="button" value="點擊" class="btn"&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const btn = document.querySelector('.btn');
// console.log(btn);

btn.addEventListener('click',function(e) {
  console.log(e);
  console.log(e.clientX);
});</code></pre>



<pre class="wp-block-code"><code>// Google Console
   PointerEvent&nbsp;{isTrusted: true, pointerId: 1, width: 1, height: 1, pressure: 0,&nbsp;…}
   42
&gt;</code></pre>



<h4>event 物件</h4>



<ul><li>會回傳一個物件，會把你事件的狀態捕捉、快照</li><li>e 是 event 的縮寫</li><li>function()裡面的參數可以自行命名各種名稱</li></ul>



<h3>DOM 複習 – 透過 nodeName 瞭解目前 DOM 的 HTML 位置</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;input type="button" value="點擊" class="btn"&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const btn = document.querySelector('.btn');

console.log(btn.getAttribute("class"));
console.log(btn.getAttribute("value"));
// 節點名稱
console.log(btn.nodeName);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   btn
   點擊
   INPUT
&gt;</code></pre>



<h3>e.target – 了解目前所在元素位置</h3>



<ul><li>target：目前點擊、選取到哪一個 DOM 物件</li><li>監聽只要在這個範圍內點擊都會觸發</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;input type="button" value="點擊" class="btn"&gt;
  &lt;ul class="list"&gt;
    &lt;li&gt;標題&lt;/li&gt;
    &lt;li&gt;標題 &lt;input type="button" class="btn" value="按鈕"&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const btn = document.querySelector('.btn');

btn.addEventListener("click",function(e) {
  console.log(e.target);
});

const list = document.querySelector('.list');
// console.log(list);

list.addEventListener('click',function(e) {
  console.log(e.target);
});</code></pre>



<pre class="wp-block-code"><code>// Google Console
   &lt;input type="button" value="點擊" class="btn"&gt;
   &lt;ul class="list"&gt;...&lt;/ul&gt;
   &lt;li&gt;...&lt;/li&gt;
   &lt;input type="button" class="btn" value="按鈕"&gt;
&gt;</code></pre>



<h3>e.target 搭配 nodeName 節點，抓到你預期要做的事情</h3>



<h4>if(我現在點擊到的是按鈕){}</h4>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;input type="button" value="點擊" class="btn"&gt;
  &lt;ul class="list"&gt;
    &lt;li&gt;標題&lt;/li&gt;
    &lt;li&gt;標題 &lt;input type="button" class="btn" value="按鈕"&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const btn = document.querySelector('.btn');

btn.addEventListener("click",function(e) {
  console.log(e.target);
});

const list = document.querySelector('.list');
// console.log(list);

list.addEventListener('click',function(e) {
  console.log(e.target.nodeName);
  if(e.target.nodeName == "INPUT"){
    console.log('你目前點到按鈕了!');
  }
});</code></pre>



<pre class="wp-block-code"><code>// Google Console
   INPUT
   你目前點到按鈕了!
&gt;</code></pre>



<h3>preventDefault – 取消預設觸發行為</h3>



<ul><li>&lt;a&gt; – href=”url”</li><li>&lt;button&gt; – type=”submit”</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;!-- 取消 HTML 標籤默認行為 --&gt;
  &lt;a href="https://www.yahoo.com.tw/"&gt;連結&lt;/a&gt;
  
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

const myLink = document.querySelector('a');

myLink.addEventListener('click',function(e) {
  e.preventDefault();
  console.log('有被點擊到');
  document.querySelector('h1').textContent = 'hello world!!';
});</code></pre>



<pre class="wp-block-code"><code>// Google Console
   有被點擊到
&gt;</code></pre>



<h3>Event 事件 – 讓您的網頁具有互動效果小節測驗</h3>



<h3 class="has-background" style="background-color:#ff6663">第四週總複習</h3>



<h2>陣列 forEach 資料處理方法</h2>



<h3>為什麼要學陣列資料處理？</h3>



<h4>陣列 – 資料處理</h4>



<ul><li>陣列資料數量多、無法判斷資料量有多少</li><li><a rel="noreferrer noopener" href="https://www.hexschool.com/2017/09/01/2017-09-01-javascript-for/" target="_blank">JavaScript 陣列處理方法</a><ul><li>針對 forEach 方法介紹</li></ul></li><li>充電站的陣列資料</li></ul>



<h3 class="has-background" style="background-color:#ff6663">forEach 寫法介紹</h3>



<p>forEach – 陣列資料處理的方法</p>



<ul><li>forEach 只有陣列才可以使用</li><li>function 預設裡面會帶三個參數(item,index,array)<ul><li>item – 物件</li><li>index – 索引</li><li>array – 全部陣列</li></ul></li><li>function 裡面的參數可以自定義名稱</li></ul>



<pre class="wp-block-code"><code>// all.js

let data = &#91;30,40];

// function(物件(值), 索引(第幾筆資料), 全部陣列)
data.forEach(function(item,index,array){
  console.log(item,index,array);
});

console.log('hello');</code></pre>



<pre class="wp-block-code"><code>// Google Console
   30 0 (2) &#91;30, 40]
   40 1 (2) &#91;30, 40]
   hello world!!
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">陣列數字累加與變數作用域講解</h3>



<h4>forEach 常見用法</h4>



<ul><li>第三個參數不用可以省略不寫</li><li>let total = 0;<ul><li>要放在外層，全域變數</li><li>不可以放在函式內層，區域變數</li></ul></li></ul>



<pre class="wp-block-code"><code>// all.js - 1，let total = 0; 放在外層

let data = &#91;30,40,100];

let total = 0;

data.forEach(function(item,index) {
  // console.log(item);
  total+=item;
  console.log(total);
});

console.log(total);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   30
   70
   170
   170</code></pre>



<pre class="wp-block-code"><code>// all.js - 2，let total = 0; 放在內層

let data = &#91;30,40,100];

// let total = 0;

data.forEach(function(item,index) {
  // console.log(item);
  let total = 0;

  total+=item;
  console.log(total);
});

console.log(total);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   30
   40
   100
x  Uncaught ReferenceError: total is not defined
&gt;</code></pre>



<h3>搭配 if ，篩選出陣列裡面有幾個偶數</h3>



<h4>判斷陣列裡面有幾個偶數</h4>



<ul><li>30%2 → 整除</li></ul>



<pre class="wp-block-code"><code>// all.js - 1 篩選有幾個偶數

let data = &#91;30,40,100,33,96];

let total = 0;

data.forEach(function(item,index) {
  // console.log(item);
  if(item%2 == 0) {
    total+=1;
  }
});

console.log(total);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   4
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2 設計一個新陣列

let data = &#91;30,40,100,33,96];

let total = 0;
let newData = &#91;];

data.forEach(function(item,index) {
  // console.log(item);
  if(item%2 == 0) {
    total+=1;
    newData.push(item);
  }
});

console.log(newData);

console.log(total);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   (4) &#91;30, 40, 100, 96]
   4
&gt;</code></pre>



<h3>forEach 讀取資料</h3>



<p>讀取陣列資料，除了數字也可以讀取到字串、物件、陣列、布林值。</p>



<pre class="wp-block-code"><code>// all.js - 1

let data = &#91;30,'hello world!',true];

data.forEach(function(item,index) {
  console.log(item);
});</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   30
   hello world!
   true
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

let data = &#91;
  {
    name: 'Tom',
    sex: 'male'
  },
  {
    name: 'Mary',
    sex: 'woman'
  }
];

data.forEach(function(item,index){
  console.log(item);
  console.log(item.name, item.sex);
});</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   {name: 'Tom', sex: 'male'}
   Tom male
   {name: 'Mary', sex: 'woman'}
   Mary woman
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">男女人數計算機 – 透過物件整合資料</h3>



<h4>計算男女生的總數</h4>



<pre class="wp-block-code"><code>// all.js - 1 方法一

let data = &#91;
  {
    name: 'Tom',
    sex: 'male'
  },
  {
    name: 'Mary',
    sex: 'woman'
  },
  {
    name: 'Jane',
    sex: 'woman'
  },
  {
    name: 'Jenny',
    sex: 'woman'
  },
  {
    name: 'Joan',
    sex: 'woman'
  }
];

let maleTotal = 0;
let womanTotal = 0;

data.forEach(function(item,index){
  // console.log(item.sex);

  if(item.sex == 'woman') {
    // console.log('是女生');
    womanTotal+=1;
  }
  else {
    // console.log('是男生');
    maleTotal+=1;
  }
});

console.log(womanTotal, maleTotal);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   4 1
&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2 方法二

let data = &#91;
  {
    name: 'Tom',
    sex: 'male'
  },
  {
    name: 'Mary',
    sex: 'woman'
  },
  {
    name: 'Jane',
    sex: 'woman'
  },
  {
    name: 'Jenny',
    sex: 'woman'
  },
  {
    name: 'Joan',
    sex: 'woman'
  }
];

let people = {
  male: 0,
  woman: 0
}

data.forEach(function(item,index){
  if(item.sex == 'woman') {
    people.woman+=1;
  }
  else {
    people.male+=1;
  }
});

console.log(people);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 2
   {male: 1, woman: 4}
&gt;</code></pre>



<h3>高雄 OPEN DATA – 觀看免費與投幣式充電站有幾處</h3>



<ul><li><a rel="noreferrer noopener" href="https://cdn.fs.teachablecdn.com/EajqXPa3RxOH1P12cdei" target="_blank">電動車資訊.json</a><ul><li>JSON 格式</li><li>高雄公共充電站</li></ul></li></ul>



<pre class="wp-block-code"><code>// all.js

let data = &#91;{},{},{},...{},{},{}];

// console.log(data);
// console.log(data.length);

let total = {
  free: 0,
  paid: 0
};

data.forEach(function(item,index) {
  // console.log(item);
  // console.log(item.Charge);
  // console.log(item.Charge == "免費")
  if(item.Charge == "免費") {
    total.free+=1;
  }
  else if(item.Charge == "投幣式") {
    total.paid+=1;
  }
});

// console.log(total);
console.log(`高雄充電站免費的站有${total.free}處`);
console.log(`高雄充電站投幣式站有${total.paid}處`);</code></pre>



<pre class="wp-block-code"><code>// Google Console
   高雄充電站免費的站有69處
   高雄充電站投幣式站有67處
&gt;</code></pre>



<h3 class="has-background" style="background-color:#ff6663">高雄 OPEN DATA – 陣列物件處理</h3>



<p>串接很多的第三方服務、套件。</p>



<pre class="wp-block-code"><code>all.js - 1

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

let total = {
  free: &#91;],
  paid: &#91;]
};

data.forEach(function(item,index) {
  // console.log(item.Charge);
  // console.log(item.Charge == '免費');
  if(item.Charge == '免費') {
    // console.log("是免費的");
    total.free.push(item);
  }
  else if(item.Charge == '投幣式') {
    // console.log("是投幣式的");
    total.paid.push(item);
  }
});

// console.log(total);
console.log(`目前免費充電站有${total.free.length}處`);
console.log(`目前投幣式充電站有${total.paid.length}處`);</code></pre>



<pre class="wp-block-code"><code>// Google Console - 1
   目前免費充電站有1處
   目前投幣式充電站有3處
&gt;</code></pre>



<p>目的：懂得整合資料、處理資料。</p>



<h4>練習：高雄 OPEN DATA 電動車資料</h4>



<h3>陣列 forEach 資料處理方法小節測驗</h3>



<h2 class="has-background" style="background-color:#ff6663">forEach 題型練習</h2>



<h3>範例功能講解</h3>



<p>本章節 Codepen 範例程式碼網址：<a href="https://codepen.io/hexschool/pen/oNYPPPx?editors=1010" target="_blank" rel="noreferrer noopener">網址</a></p>



<ul><li>DOM</li><li>Event</li><li>forEach</li><li>陣列操作</li></ul>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;h2&gt;新增資料&lt;/h2&gt;
  &lt;input type="text" placeholder="充電站名稱" class="stationName"&gt;
  &lt;select class="stationCharge"&gt;
    &lt;option value="免費"&gt;免費&lt;/option&gt;
    &lt;option value="投幣式"&gt;投幣式&lt;/option&gt;
  &lt;/select&gt;
  &lt;input type="button" class="btn" value="儲存"&gt;
  &lt;h2&gt;資料顯示&lt;/h2&gt;
  &lt;div class="filter"&gt;
    &lt;input type="button" value="全部"&gt;
    &lt;input type="button" value="免費"&gt;
    &lt;input type="button" value="投幣式"&gt;
  &lt;/div&gt;
  &lt;ul class="list"&gt;
    
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

const list = document.querySelector('.list');
// 預設載入函式
function init() {
  let str = '';
  data.forEach(function(item,index) {
    let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    str += content;
  });
  list.innerHTML = str;
}
init();
// 篩選器邏輯
const stationFilter = document.querySelector('.filter');
stationFilter.addEventListener('click',function(e) {
  if(e.target.value == undefined){
    retrun;
  }
  let str = '';
  data.forEach(function(item,index){
    if(e.target.value == "全部") {
      str += `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    }
    else if(e.target.value == item.Charge) {
      str+= `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`
    }
  })
  list.innerHTML = str;
});

// 新增邏輯
const stationName = document.querySelector('.stationName');
const stationCharge = document.querySelector('.stationCharge');
const btn = document.querySelector('.btn');

btn.addEventListener('click',function(e) {
  console.log(stationName.value);
  console.log(stationCharge.value);
  let obj = {};
  obj.Charge = stationCharge.value;
  obj.name = stationName.value;
  data.push(obj);
  init();
  stationCharge.value = '免費';
  stationName.value = '';
});</code></pre>



<h3 class="has-background" style="background-color:#ff6663">如何整合 innerHTML 資料</h3>



<p>forEach 搭配 DOM 來去做整合，把資料顯示在網頁上。</p>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;ul class="list"&gt;
    &lt;li&gt;xx充電站，免費&lt;/li&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

const list = document.querySelector('.list');

// 初始化一個空字串
let str = '';

data.forEach(function(item,index){
  // console.log(item);
  
  // &lt;li&gt;xx充電站，免費&lt;/li&gt;
  // console.log(`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`);
  let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
  str+=content;

  console.log(str);
});
// console.log(str);

// list.innerHTML = `&lt;li&gt;hello world&lt;/li&gt;`;
list.innerHTML = str;</code></pre>



<h3>搭配網頁初始化狀態</h3>



<p>用函式 init() 把程式碼整理起來後再執行。</p>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;ul class="list"&gt;
    &lt;li&gt;xx充電站，免費&lt;/li&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

// 初始化狀態
function init() {
  const list = document.querySelector('.list');

  // 初始化一個空字串
  let str = '';
  
  data.forEach(function(item,index){
    // console.log(item);
    
    // &lt;li&gt;xx充電站，免費&lt;/li&gt;
    // console.log(`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`);
    let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    str+=content;
  
    console.log(str);
  });
  // console.log(str);
  
  // list.innerHTML = `&lt;li&gt;hello world&lt;/li&gt;`;
  list.innerHTML = str;
}

init();</code></pre>



<h3>免費與投幣式事件監聽設計</h3>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;div class="filter"&gt;
    &lt;input type="button" value="免費"&gt;
    &lt;input type="button" value="投幣式"&gt;
  &lt;/div&gt;
  &lt;ul class="list"&gt;
    &lt;!-- &lt;li&gt;xx充電站，免費&lt;/li&gt; --&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

// 初始化狀態
function init() {
  const list = document.querySelector('.list');

  // 初始化一個空字串
  let str = '';
  
  data.forEach(function(item,index){
    // console.log(item);
    
    // &lt;li&gt;xx充電站，免費&lt;/li&gt;
    // console.log(`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`);
    let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    str+=content;
  
    // console.log(str);
  });
  // console.log(str);
  
  // list.innerHTML = `&lt;li&gt;hello world&lt;/li&gt;`;
  list.innerHTML = str;
}

init();

// 免費與投幣式事件監聽設計
const stationFilter = document.querySelector('.filter');
// console.log(stationFilter);

stationFilter.addEventListener('click',function(e) {
  // console.log(e);
  // console.log(e.target.value);
  // console.log(e.target.value == undefined);
  if (e.target.value == undefined) {
    console.log('你點擊到空的地方');
    return; // 回傳、強制中斷
  }
  console.log(e.target.value);
});</code></pre>



<h3 class="has-background" style="background-color:#ff6663">事件監聽搭配 if 流程判斷</h3>



<p>點擊按鈕篩選哪些是免費、哪些是投幣式的判斷。</p>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;div class="filter"&gt;
    &lt;input type="button" value="免費"&gt;
    &lt;input type="button" value="投幣式"&gt;
  &lt;/div&gt;
  &lt;ul class="list"&gt;
    &lt;!-- &lt;li&gt;xx充電站，免費&lt;/li&gt; --&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

// 初始化狀態
function init() {
  const list = document.querySelector('.list');

  // 初始化一個空字串
  let str = '';
  
  data.forEach(function(item,index){
    // console.log(item);
    
    // &lt;li&gt;xx充電站，免費&lt;/li&gt;
    // console.log(`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`);
    let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    str+=content;
  
    // console.log(str);
  });
  // console.log(str);
  
  // list.innerHTML = `&lt;li&gt;hello world&lt;/li&gt;`;
  list.innerHTML = str;
}

init();

// 免費與投幣式事件監聽設計
const stationFilter = document.querySelector('.filter');
// console.log(stationFilter);

stationFilter.addEventListener('click',function(e) {
  // console.log(e);
  // console.log(e.target.value);
  // console.log(e.target.value == undefined);
  if (e.target.value == undefined) {
    // console.log('你點擊到空的地方');
    return; // 回傳、強制中斷
  }
  // console.log(e.target.value);

  // 事件監聽搭配 if 流程判斷
  // 初始化一個空字串
  let str = "";
  data.forEach(function(item,index) {
    // console.log(item.Charge);
    // console.log(e.target.value == item.Charge);
    if(e.target.value == item.Charge) {
      str+=`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`
    }
  });
  // console.log(str);
  const list = document.querySelector('.list');
  list.innerHTML = str;

});</code></pre>



<h3>DOM 拉出全域變數進行管理</h3>



<p>裡面的函式找不到 DOM，會往外層找。</p>



<pre class="wp-block-code"><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;div class="filter"&gt;
    &lt;input type="button" value="免費"&gt;
    &lt;input type="button" value="投幣式"&gt;
  &lt;/div&gt;
  &lt;ul class="list"&gt;
    &lt;!-- &lt;li&gt;xx充電站，免費&lt;/li&gt; --&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

// DOM 拉出全域變數進行管理
const list = document.querySelector('.list');


// 初始化狀態
function init() {
  // const list = document.querySelector('.list');

  // 初始化一個空字串
  let str = '';
  
  data.forEach(function(item,index){
    // console.log(item);
    
    // &lt;li&gt;xx充電站，免費&lt;/li&gt;
    // console.log(`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`);
    let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    str+=content;
  
    // console.log(str);
  });
  // console.log(str);
  
  // list.innerHTML = `&lt;li&gt;hello world&lt;/li&gt;`;
  list.innerHTML = str;
}

init();

// 免費與投幣式事件監聽設計
const stationFilter = document.querySelector('.filter');
// console.log(stationFilter);

stationFilter.addEventListener('click',function(e) {
  // console.log(e);
  // console.log(e.target.value);
  // console.log(e.target.value == undefined);
  if (e.target.value == undefined) {
    // console.log('你點擊到空的地方');
    return; // 回傳、強制中斷
  }
  // console.log(e.target.value);

  // 事件監聽搭配 if 流程判斷
  // 初始化一個空字串
  let str = "";
  data.forEach(function(item,index) {
    // console.log(item.Charge);
    // console.log(e.target.value == item.Charge);
    if(e.target.value == item.Charge) {
      str+=`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`
    }
  });
  // console.log(str);
  // const list = document.querySelector('.list');
  list.innerHTML = str;

});</code></pre>



<h3>篩選條件增加流程</h3>



<p>本章節 Codepen 範例程式碼網址：<a href="https://codepen.io/hexschool/pen/oNYPPPx?editors=1010" target="_blank" rel="noreferrer noopener">網址</a></p>



<h3 class="has-background" style="background-color:#ff6663">新增充電站 UI 介面邏輯新增</h3>



<pre class="wp-block-code"><code>// index.html - 1

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;h2&gt;新增資料&lt;/h2&gt;
  &lt;input type="text" placeholder="充電站名稱" class="stationName"&gt;
  &lt;input type="text" placeholder="免費、付費" class="stationCharge"&gt;
  &lt;input type="button" class="btn" value="儲存"&gt;
  &lt;h2&gt;資料顯示&lt;/h2&gt;
  &lt;div class="filter"&gt;
    &lt;input type="button" value="全部"&gt;
    &lt;input type="button" value="免費"&gt;
    &lt;input type="button" value="投幣式"&gt;
  &lt;/div&gt;
  &lt;ul class="list"&gt;
    &lt;!-- &lt;li&gt;xx充電站，免費&lt;/li&gt; --&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 1

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

// DOM 拉出全域變數進行管理
const list = document.querySelector('.list');


// 初始化狀態
// 預設載入
function init() {
  // const list = document.querySelector('.list');

  // 初始化一個空字串
  let str = '';
  
  data.forEach(function(item,index){
    // console.log(item);
    
    // &lt;li&gt;xx充電站，免費&lt;/li&gt;
    // console.log(`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`);
    let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    str+=content;
  
    // console.log(str);
  });
  // console.log(str);
  
  // list.innerHTML = `&lt;li&gt;hello world&lt;/li&gt;`;
  list.innerHTML = str;
}

init();

// 免費與投幣式事件監聽設計
// 篩選器邏輯
const stationFilter = document.querySelector('.filter');
// console.log(stationFilter);

stationFilter.addEventListener('click',function(e) {
  // console.log(e);
  // console.log(e.target.value);
  // console.log(e.target.value == undefined);
  if (e.target.value == undefined) {
    // console.log('你點擊到空的地方');
    return; // 回傳、強制中斷
  }
  // console.log(e.target.value);

  // 事件監聽搭配 if 流程判斷
  // 初始化一個空字串
  let str = "";
  data.forEach(function(item,index) {
    // console.log(item.Charge);
    // console.log(e.target.value == item.Charge);
    if(e.target.value == "全部") {
      str+= `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    }
    else if(e.target.value == item.Charge) {
      str+=`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    }
  });
  // console.log(str);
  // const list = document.querySelector('.list');
  list.innerHTML = str;

});

// 新增邏輯

const stationName = document.querySelector('.stationName');
const stationCharge = document.querySelector('.stationCharge');
const btn = document.querySelector('.btn');
// console.log(stationName,stationCharge,btn);

btn.addEventListener('click',function(e){
  // console.log(e);
  console.log(stationName.value);
  console.log(stationCharge.value);

  let obj = {};
  obj.Charge = stationCharge.value;
  obj.name = stationName.value;
  console.log(obj);
  data.push(obj);
  init();
  stationCharge.value = "";
  stationName.value = "";

});

</code></pre>



<pre class="wp-block-code"><code>// index.html - 2

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;js-compulsory&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;h1&gt;js-compulsory&lt;/h1&gt;
  &lt;h2&gt;新增資料&lt;/h2&gt;
  &lt;input type="text" placeholder="充電站名稱" class="stationName"&gt;
  &lt;!-- &lt;input type="text" placeholder="免費、付費" class="stationCharge"&gt; --&gt;
  &lt;select class="stationCharge"&gt;
    &lt;option value="免費"&gt;免費&lt;/option&gt;
    &lt;option value="投幣式"&gt;投幣式&lt;/option&gt;
  &lt;/select&gt;
  &lt;input type="button" class="btn" value="儲存"&gt;
  &lt;h2&gt;資料顯示&lt;/h2&gt;
  &lt;div class="filter"&gt;
    &lt;input type="button" value="全部"&gt;
    &lt;input type="button" value="免費"&gt;
    &lt;input type="button" value="投幣式"&gt;
  &lt;/div&gt;
  &lt;ul class="list"&gt;
    &lt;!-- &lt;li&gt;xx充電站，免費&lt;/li&gt; --&gt;
  &lt;/ul&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<pre class="wp-block-code"><code>// all.js - 2

let data = &#91;
  {
    Charge: '免費',
    name: '六角充電站'
  },
  {
    Charge: '投幣式',
    name: '小花充電站'
  },
  {
    Charge: '投幣式',
    name: '小明充電站'
  },
  {
    Charge: '投幣式',
    name: '小天充電站'
  }
];

// DOM 拉出全域變數進行管理
const list = document.querySelector('.list');


// 初始化狀態
// 預設載入
function init() {
  // const list = document.querySelector('.list');

  // 初始化一個空字串
  let str = '';
  
  data.forEach(function(item,index){
    // console.log(item);
    
    // &lt;li&gt;xx充電站，免費&lt;/li&gt;
    // console.log(`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`);
    let content = `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    str+=content;
  
    // console.log(str);
  });
  // console.log(str);
  
  // list.innerHTML = `&lt;li&gt;hello world&lt;/li&gt;`;
  list.innerHTML = str;
}

init();

// 免費與投幣式事件監聽設計
// 篩選器邏輯
const stationFilter = document.querySelector('.filter');
// console.log(stationFilter);

stationFilter.addEventListener('click',function(e) {
  // console.log(e);
  // console.log(e.target.value);
  // console.log(e.target.value == undefined);
  if (e.target.value == undefined) {
    // console.log('你點擊到空的地方');
    return; // 回傳、強制中斷
  }
  // console.log(e.target.value);

  // 事件監聽搭配 if 流程判斷
  // 初始化一個空字串
  let str = "";
  data.forEach(function(item,index) {
    // console.log(item.Charge);
    // console.log(e.target.value == item.Charge);
    if(e.target.value == "全部") {
      str+= `&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    }
    else if(e.target.value == item.Charge) {
      str+=`&lt;li&gt;${item.name}，${item.Charge}&lt;/li&gt;`;
    }
  });
  // console.log(str);
  // const list = document.querySelector('.list');
  list.innerHTML = str;

});

// 新增邏輯

const stationName = document.querySelector('.stationName');
const stationCharge = document.querySelector('.stationCharge');
const btn = document.querySelector('.btn');
// console.log(stationName,stationCharge,btn);

btn.addEventListener('click',function(e){
  // console.log(e);
  console.log(stationName.value);
  console.log(stationCharge.value);

  let obj = {};
  obj.Charge = stationCharge.value;
  obj.name = stationName.value;
  console.log(obj);
  data.push(obj);
  init();
  stationCharge.value = "免費";
  stationName.value = "";

});</code></pre>



<h3>forEach 題型練習小節測驗</h3>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Vue 出一個電商網站 (3)</title>
		<link>/wordpress_blog/vue-hexschool-3/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Wed, 28 Apr 2021 03:39:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=676</guid>

					<description><![CDATA[第１１節：Vue&#160;出一個電商網站 (上) 課程架構及流 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2>第１１節：Vue&nbsp;出一個電商網站 (上)</h2>



<h3>課程架構及流程說明</h3>



<h5>VUE 一個電商網頁前置介紹</h5>



<p>練習到完整的 API、每個 API 都是獨立的。</p>



<h5>電商網站操作流程</h5>



<figure class="wp-block-image size-full"><img loading="lazy" width="1668" height="876" src="/wordpress_blog/wp-content/uploads/2022/04/電商網站操作流程.png" alt="" class="wp-image-678"/><figcaption>電商網站操作流程</figcaption></figure>



<h5>開發的架構說明</h5>



<figure class="wp-block-image size-full"><img loading="lazy" width="1672" height="874" src="/wordpress_blog/wp-content/uploads/2022/04/開發的架構說明.png" alt="" class="wp-image-680"/><figcaption>開發的架構說明</figcaption></figure>



<h5>課程練習的 API</h5>



<figure class="wp-block-image size-full"><img loading="lazy" width="1625" height="868" src="/wordpress_blog/wp-content/uploads/2022/04/課程練習的-API.png" alt="" class="wp-image-682"/><figcaption>課程練習的 API</figcaption></figure>



<h5>課程練習的流程</h5>



<figure class="wp-block-image size-full"><img loading="lazy" width="1610" height="865" src="/wordpress_blog/wp-content/uploads/2022/04/課程練習的流程.png" alt="" class="wp-image-684"/><figcaption>課程練習的流程</figcaption></figure>



<h3>課程 API&nbsp;文件及路徑</h3>



<h5>說明</h5>



<ol><li>課程需要先註冊屬於個人的 API 路徑，註冊方法在下一小節會介紹，而註冊網址與 API 網址都是以下連結：<br><a rel="noreferrer noopener" href="https://vue-course-api.hexschool.io/" target="_blank">vue-course-api</a></li><li><a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki" target="_blank">API 文件</a></li><li>課程中後期，不會所有步驟都一一說明，所以課程中有提供每個階段的 commit，讓大家可以看到每個章節老師修改了哪些部分：<br><a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E9%80%B2%E5%BA%A6-Commit" target="_blank">所有課程進度 Commit (對應課程章節)</a></li><li>課程中也會提供許多 HTML 片段模板，減少重複繁瑣的行為，如提到會提供模板的部分，可在以下連結查找：<br><a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E8%AA%B2%E7%A8%8B%E9%83%A8%E5%88%86%E6%A8%A1%E6%9D%BF" target="_blank">模板連結</a></li><li>雖然課程中 ESLint 選擇為 Yes，但在此推薦選擇 No。對 ES6 及錯誤排除有一定掌握者可選擇 Yes，新手不建議安裝，挫折感會非常重。<br>ESLint 安裝可參考：<a href="https://www.youtube.com/watch?v=WiommcFaYvY" target="_blank" rel="noreferrer noopener">超整齊程式碼！透過 ESlint 學習 ES6</a></li></ol>



<h3>Vue&nbsp;API&nbsp;課程補充說明</h3>



<p>由於 Google Chrome 在後續 80 版本後會預設封鎖第三方 Cookie，所以在登入 Vue 課程 API 就會出現無法登入的問題，補充相關解決方式。</p>



<p><a href="https://paper.dropbox.com/doc/Vue-API-28OrjdvBouPMjspZUM7h7" target="_blank" rel="noreferrer noopener">文章參考連結</a></p>



<h3>註冊課程專屬練習 API</h3>



<p><a href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0-%5B%E9%9C%80%E9%A9%97%E8%AD%89%5D" target="_blank" rel="noreferrer noopener">管理控制台 [需驗證] 文件</a></p>



<p>屆時會提供完整的 API，裡面有段 API 是要自己申請，在商品建立的時候，有一段 api_path，申請屬於自己的路徑，完整 API 路徑可能是 /api/:api_path/admin/product，這樣的話 API 才能正常的運作，所以要先申請屬於自己的 API 路徑，避免與別人的資料內容產生衝突。</p>



<h5>vue-course-api-wiki 主要分為兩區</h5>



<ul><li>Dashboard – 管理控制台 [需驗證]</li><li>Shopping – 客戶購物 [免驗證]</li></ul>



<p><a rel="noreferrer noopener" href="https://vue-course-api.hexschool.io/" target="_blank">Vue 課程練習 API 連結</a></p>



<h5>六角學院 Vue 課程練習 API 申請</h5>



<p>流程說明</p>



<ol><li>申請一個專屬的課程練習帳號</li><li>登入帳號，並申請一個 API 路徑</li><li>測試 API 是否可以運作，並且開始實作</li></ol>



<p>每筆資料會加入到個人的 API 帳號下避免與其他人衝突。<br><br>新增資料、申請 API 是相同的帳密。</p>



<h3>API&nbsp;常見問題解決方式</h3>



<p>方法、自我檢查</p>



<h5>路徑與方法是一對的</h5>



<p>API 是由路徑 + 方法組成的，文件中皆會標示所有 API 可用的方法如 GET、POST、DELETE 等等，必須使用完全對應的方法才能運作。<br><br>範例：以下 API 僅能使用 POST 行為，如果使用 GET 就會出現「您所查看的API不存在」的回應。</p>



<pre class="wp-block-code"><code>https:&#47;&#47;vue-course-api.hexschool.io/signin</code></pre>



<h5>從錯誤訊息中尋找問題</h5>



<p>API 發送的過程中錯一個字就會無法運行，盡可能從錯誤的回饋中尋找問題、檢查：</p>



<ul><li>路徑是否拼對</li><li>GET、POST 等方法是否正確</li><li>程式碼運作是否如預期</li></ul>



<p>範例：下圖的 API 路徑傳成了物件，並非產品 id 所以無法運行。</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1077" height="112" src="/wordpress_blog/wp-content/uploads/2022/04/路徑傳成物件非產品id.png" alt="" class="wp-image-686"/><figcaption>路徑傳成物件非產品id</figcaption></figure>



<h5>管理控制台的 API 都需要登入才能運作</h5>



<p>API 依據使用者不同分為兩大類 (需驗證及免驗證)，其中「管理控制台」一定要登入後才可以運作，所以請依據課程順序執行才能確保正確性。</p>



<h5>遇到錯誤無法解決</h5>



<p>依然可以到 Udemy 問答區發問<br>請遵循以下的流程：</p>



<ol><li>盡可能提供完整訊息<br>由於許多問題並非片段就能判斷<br>所以盡可能提供越完整越好<ul><li>錯誤的問題描述 (哪一個 API、做了什麼事、預期有怎樣的發展、錯誤的問題點)</li><li>錯誤的 API 連結為何</li><li>完整錯誤的訊息圖片 ( Chrome Console )</li><li>出現錯誤的程式碼</li></ul></li><li>可以提供完整程式碼讓老師測試<br><br>如果還是無法解決，請提供原始碼讓老師測試<br>可以使用 Github 或者寄送到 service@hexschool.com<br>寄送時特別注意：不需要夾帶「 node_modules、dist」資料夾<br>這會導致信件無法開啟，且下載後依然要刪除重新安裝。</li></ol>



<h3>啟用一個 Vue Cli&nbsp;並且引用帶入專屬 API</h3>



<p>用先前所申請好的 API 來取得資料。</p>



<p>操作步驟與講解</p>



<ol><li>用 Vue Cli 把 Webpack 環境建立起來，並且開始運行<br>安裝參數設定，ESLint 可以選擇不安裝，在寫程式碼會比較嚴謹，但不熟悉的話會產生些錯誤。</li><li>測試申請的 API 是否能在我們 Webpack 環境正確運行</li><li>安裝 AJAX 套件，是用來取得遠端資料，會使用 vue-axios 套件，按照 vue-axios 上面 NPM 的指令複製下來，把目前在運行的環境先暫停，然後貼上 NPM 指令。會安裝兩個套件，一個是 axios、一個是 vue-axios，安裝完成後，vue-axios 有要求說把相關的指令貼到 entry file，entry file 指的是 main.js 這個檔案，現在 import Vue from ‘vue’ 已經寫在 entry file 上面，就不需要再重新寫入，接下來把後面這兩行貼在 Vue 的下方，習慣把第三方的套件往上面放，像 Vue、axios、VueAxios 這是屬於第三方的套件，App、router 是我們自己撰寫的，就往下放。往下放之後這裡會出現紅字，原因是我們還沒使用它，在 vue-axios 把 Vue.use(VueAxios, axios) 貼進來，就可以正確運行</li><li>把 Vue Cli 環境再給運行起來，打開 App.vue 這個檔案，試著在這裡取得遠端資料，在 App.vue 新增 created 的 hook，它是個 function 存檔之後，我們要取得遠端資料，可以參考 vue-axios 的文件，這邊有個 this.$http.get 的方式，把它複製貼進來，裡面還有個 api 的變數，api 就是遠端的路徑，上方還需要遠端的路徑，使用 const api = ‘ 遠端的路徑’;，這個路徑要怎麼看，回到&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D" target="_blank">vue-course-api-wiki</a>，文件分為 dashboard、shopping，shopping 的部分是不需要驗證，所以我們在取得遠端的時候，先使用 shopping 這段是不需要登入驗證，可以直接使用這個 shopping，從取得商品列表，這裡有個 [api]，把這段的&nbsp;<code>/api/:api_path/products</code>複製起來，貼到 const api，這裡有個 :api_path 是先前在 Vue 課程練習 API 所申請的路徑，把它貼過來，在前方需加上前端遠端 API 伺服器的路徑，現在就來看資料能不能正確的取得，重新整理頁面，打開開發者工具的 Console，就可以看到資料有取得。不過我們 API 伺服器路徑、所申請的 APIPath 都是寫在程式碼內，這樣其實不是很好，因為這兩個路徑可能會做修改，盡可能把路徑取出來</li><li>打開 config 裡面有個 dev.env.js 這個檔案，跟它相對應的是 prod.env.js，兩者差異是 dev.env.js 這個是我們開發中的環境、prod.env.js 是正式的環境，我們現在把這個路徑加上來，可以先加在 dev.env.js 上面，要正式釋出的時候記得 prod.env.js 也是要加上相對應的變數。加上去的方式可以如下，前面是 APIPATH，另外一個是自定義的路徑 CUSTOMPATH，記得裡面的值不是直接將字串貼進來，裡面還要再加上另外一個雙引號，所以在這裡有一個單引號在外面，裡面還有一個雙引號，<strong>需特別注意</strong>。接下來把伺服器的路徑貼進來，另外一個一樣要補上一個單引號、一個雙引號以及自定義的路徑。存檔後，重啟 Vue Cli (npm run dev)</li><li>接下來回到 App.vue，就可以使用這兩個變數，先輸入 console.log，先把他們印出來看看，印出來的路徑是如下，試試看這兩個路徑能不能正確的印出來，重新整理，可以看到遠端伺服器的路徑、自定義的路徑，所以這個路徑是可以正確取出來</li><li>把 const api 改成使用環境變數來取得，取得的方式就可以改成反引號，把 api/自定義路徑/products 先貼進來，前面的這個部分就可以先使用 ${process.env.APIPATH}，在後面這邊的自定義路徑可以換成我們剛剛所定義的環境變數。所以在前面我們是使用 APIPATH 的環境變數、後面是使用 CUSTOMPATH 的環境變數，對應的就是 dev.env.js 這個檔案，存檔之後我們來看一下能不能正確取得資料。</li></ol>



<pre class="wp-block-code"><code>// 3. NPM 指令
npm install --save axios vue-axios</code></pre>



<pre class="wp-block-code"><code>// 3. vue-axios
// entry file - main.js
import axios from 'axios';
import VueAxios from 'vue-axios';

// usage in Vue 2
Vue.use(VueAxios, axios);</code></pre>



<pre class="wp-block-code"><code>// 4. App.vue
created() {
  const api = '/api/:api_path/products';
  // API 伺服器路徑
  // 所申請的 APIPath
  this.$http.get(api).then((response) =&gt; {
    console.log(response.data);
  })
},</code></pre>



<pre class="wp-block-code"><code>// 5. dev.env.js
// 加在 module.exports = merge(prodEnv, {}) 裡面
APIPATH: '"伺服器的路徑"',
CUSTOMPATH: '自定義的路徑',</code></pre>



<pre class="wp-block-code"><code>// 6. console.log
console.log(process.env.APIPATH, process.env.CUSTOMPATH);</code></pre>



<pre class="wp-block-code"><code>// 7. const api 改成使用環境變數來取得
const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`;</code></pre>



<h3>插件補充說明</h3>



<ul><li>vue 3.0 推出以後，如何安裝相對應的版本套件</li><li>veeValidate 3.x 版本驗證介紹</li></ul>



<h5><a rel="noreferrer noopener" href="https://www.npmjs.com/package/vue-axios" target="_blank">vue-axios</a></h5>



<p>在 vue-axios 文件下有支援度的說明(Support matrix)。</p>



<p>操作與講解</p>



<ol><li>移除 vue-axios 套件</li><li>安裝 vue-axios 舊版本，複製 vue-axios 指令，針對 vue-axios 來安裝。在套件的後方加上@版本號，版本號不需要去查是 .x 版本，只要輸入一個數字就可以，它就會安裝這個版本號下最新的版本</li><li>運行環境 npm run dev</li><li>打開後按模擬訂單就會取得遠端資料</li></ol>



<pre class="wp-block-code"><code>// 1. 移除 vue-axios 套件
npm uninstall vue-axios</code></pre>



<pre class="wp-block-code"><code>// 2. 安裝 vue-axios 舊版本
npm install --save vue-axios@2</code></pre>



<h3>引用 Bootstrap&nbsp;套件，並客製化樣式</h3>



<p>介紹怎麼把樣式匯入，會使用到的是 Bootstrap 4。</p>



<p><a href="https://getbootstrap.com/docs/4.6/getting-started/download/" target="_blank" rel="noreferrer noopener">Bootstrap 4</a></p>



<p>操作與說明</p>



<ol><li>安裝 Bootstrap 4，先把終端機停掉 (Ctrl+c)，輸入 npm 指令，安裝完成後，可以從終端機看到 Bootstrap 4 已經安裝完，但還缺少 jquery 以及 popper.js，這段的意思是說如果要使用 Bootstrap 的 JavaScript 的話，必須額外安裝這兩個，在這個地方我們先把 Bootstrap 引入就可以。</li><li>接下來再把環境運行 (npm run dev)，確定已經運行完成後，打開資料夾列表、點選 node_modules、找到 bootstrap，我們會使用到的 Bootstrap 是 scss 的版本，另外這邊有個 dist 的版本是它所匯出的包含 css、js，這個是已經編譯好的，那我們會使用到的是沒有編譯版本的 Bootstrap。</li><li>到 App.vue 下，這個預設的 CSS 先把它拿掉，接下來把&lt;style&gt; 標籤加上 lang=”scss”，當把 lang=”scss’ 加上後畫面可能會跳錯，依據不同的版本有些不會跳錯、有些會跳錯，跳錯的時候就必須把 sass-loader 給加進來。加上去的方式一樣把終端機停止，使用以下指令來安裝 sass-loader，安裝完成後，重新執行 npm run dev，這個時候就不會跳錯了</li><li>還是出現錯誤，討論區的解決方式，node-sass 和 sass-loader 版本問題，這兩個套件建議都安裝舊版本，確保支援 Vue Cli 不會出現錯誤，可先移除接著重新安裝 node-sass 和 sass-loader，指令如下</li><li>接下來我們使用 @import，把這個路徑下的 scss 的 bootstrap.scss 把它載入，這段的意思是說，我們要載入 bootstrap 這個 node_modules，接下來再載入 scss 下方的 bootstrap.scss，後面記得補上 ;，存檔後如果沒有跳錯，代表說 sass 應該已經正確的載入。</li><li>現在我們回到畫面上，使用開發者工具看一下是否有正確的載入 bootstrap，像 &lt;h1&gt; 標籤的 Styles 有出現_type.scss 這個基本上就是有載入，我們繼續往下，下方會出現特別的變數，就是 :root 後面出現很多顏色的變數，這些顏色的變數就是 Bootstrap 4 所定義的，所以現在 Bootstrap 4 有正確的載入。</li><li>我們在使用 Bootstrap 4 的時候，除了這種載入的方式，還有另外一種，現在這個方式是我們直接把 Bootstrap 直接載進來。但有些時候我們會希望它可以獨立的客製化，我們再新增一個檔案，然後我們另外存儲在 assets 裡面，叫做 all.scss，把這段 bootstrap 移到 all.scss 裡面，然後存檔，並且把 App.vue 的路徑做稍為的調整，把路徑指向 assets 裡面的 all.scss，後面的 scss 是可以省略的，存檔後兩個結果會是一樣的，樣式不會有任何的變化。</li><li>現在我們要客製化一些樣式，回到 node_modules 裡面的 bootstrap 下方有一個檔案是 _variables.scss，並把它打開，然後另存新檔，一樣在 assets 裡面，然後我們新增一個資料夾叫做 helpers (新增此路徑可避免原始套件路徑衝突)，叫做 _variables.scss 然後存儲，我們在 all.scss 做稍微的調整，第一行會載入 functions、第二行會載入我們所自定義的變數，第一行是載入 bootstrap 套用變數的方法，有這些方法這些變數才能正確的啟用，所以第二行是我們自定義的變數，存儲之後它一樣沒有什麼變化。</li><li>我們將 Bootstrap 一些樣式加進來試一下，把按鈕加進來，把<a rel="noreferrer noopener" href="https://getbootstrap.com/docs/4.6/components/buttons/" target="_blank">按鈕</a>的程式碼複製起來，然後到 App.vue 直接貼在 &lt;router-veiw/&gt; 標籤的下方，回到畫面上就會有這些按鈕，現在我們要客製化屬於自己的樣式的時候，就可以到 helpers/_variables.scss ，這個 variables 是屬於我們的 variable，所以在這個地方我們就可以做些調整，像它現在預設的顏色是這個藍色，如果說我們要把主色這個 primary 這個主色換成其他顏色的話，我們就可以先複製一個變數 $purple，在這裡可以選擇喜歡的顏色就好，接下來把它貼到下方有個 $theme-colors 的地方，把原本 $primary, 註解掉，替換成我們剛所複製的顏色變數。存檔之後會看到這個顏色已經被替換掉，這個就是我們自定義色彩的一個方式。</li><li>回到 App.vue 裡面來，再把 components 裡面有個 HelloWorld.vue 把它打開，這個 HelloWorld.vue 下方 &lt;style&gt; 有個 scoped，這裡要講解一下 scoped 是什麼意思，這個 scoped 的意思就是這些樣式只會在這裡運行，HelloWorld.vue 裡面的 a 連結都被套用成綠色， 如果說我在外層 ，再加入屬於自己的 a 連結的話，把 a 連結加在 App.vue &lt;button&gt; 標籤的下方，它的顏色會用我們 primary 這個主色，它並不會用內層這個綠色。這裡要說的是，樣式想要封裝在特定的元件內的話，就可以加入這個 scoped。</li><li>這個章節先使用 sass 的型式將 Bootstrap 載到專案內，這樣的話，我們等下就可以省去許多寫 CSS 的時間。</li></ol>



<pre class="wp-block-code"><code>// 1. 安裝 Bootstrap 4
npm install bootstrap --save</code></pre>



<pre class="wp-block-code"><code>// 3. 在 App.vue 的 &lt;style&gt; 標籤加上
&lt;style lang="scss"&gt;

&lt;/style&gt;</code></pre>



<p>有些 template 已經包含 sass-loader 這樣就不需要重新安裝。<br>安裝後不需要調整 Webpack，重新啟動即可。</p>



<pre class="wp-block-code"><code>// 3. 安裝 sass-loader 指令
npm install node-sass sass-loader --save</code></pre>



<pre class="wp-block-code"><code>// 4. node-sass 和 sass-loader 舊版本指令
npm install node-sass@4.14.1
npm install --save-d sass loader@7.1.0</code></pre>



<pre class="wp-block-code"><code>// 5. App.vue 使用 @import
&lt;style lang="scss"&gt;
  @import "~bootstrap/scss/bootstrap"
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 7. all.scss
@import "~bootstrap/scss/bootstrap";</code></pre>



<pre class="wp-block-code"><code>// 7. App.vue
&lt;style lang="scss"&gt;
@import "./assets/all";
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 8. all.scss
// 載入 functions
@import "~bootstrap/scss/functions";
// 載入自定義的變數
@import "./helpers/_variables";
@import "~bootstrap/scss/bootstrap";</code></pre>



<pre class="wp-block-code"><code>// 9.、10 App.vue
&lt;button type="button" class="btn btn-primary"&gt;Primary&lt;/button&gt;
&lt;button type="button" class="btn btn-secondary"&gt;Secondary&lt;/button&gt;
&lt;button type="button" class="btn btn-success"&gt;Success&lt;/button&gt;
&lt;button type="button" class="btn btn-danger"&gt;Danger&lt;/button&gt;
&lt;button type="button" class="btn btn-warning"&gt;Warning&lt;/button&gt;
&lt;button type="button" class="btn btn-info"&gt;Info&lt;/button&gt;
&lt;button type="button" class="btn btn-light"&gt;Light&lt;/button&gt;
&lt;button type="button" class="btn btn-dark"&gt;Dark&lt;/button&gt;
&lt;a href="#"&gt;連結&lt;/a&gt;</code></pre>



<pre class="wp-block-code"><code>// 9. helpers/_variables.scss
// 複製一個喜歡的顏色變數
$blue:    #007bff !default;
$indigo:  #6610f2 !default;
$purple:  #6f42c1 !default;
$pink:    #e83e8c !default;
$red:     #dc3545 !default;
$orange:  #fd7e14 !default;
$yellow:  #ffc107 !default;
$green:   #28a745 !default;
$teal:    #20c997 !default;
$cyan:    #17a2b8 !default;

// 把 $primary 替換成喜歡的顏色變數
$theme-colors: map-merge(
  (
    "primary":    $purple, //$primary,
    "secondary":  $secondary,
    "success":    $success,
    "info":       $info,
    "warning":    $warning,
    "danger":     $danger,
    "light":      $light,
    "dark":       $dark
  ),
  $theme-colors
);</code></pre>



<h3>製作登入介面</h3>



<p>這個章節要製作登入以及登出。</p>



<p>操作與說明</p>



<ol><li>回到 App.vue ，把多餘的內容先把它刪掉，留下一個 &lt;router-view/&gt; 標籤就好了</li><li>在 components 下面再新增一個資料夾叫做 pages，我們等下把所有的頁面的內容都往裡面放，在 pages 裡面新增一個檔案叫做 Login.vue，我們可以先把 HelloWorld.vue 的檔案結構複製貼過來，但是我們不需要裡面的內容，把內容都把它刪掉。</li><li>現在有個 Login.vue 以及 App.vue，接下來我們把 router 裡面的 index.js 打開，我們把 Login 的頁面把它載進來，這邊的 Login 會出現紅字，因為我們還沒使用它，我們在 routes 裡面再新增一個路徑，要記得在路徑上盡可能都打小寫。繼續往下，那 component 就指向我們剛新增的元件，現在應該可以正常的運行。我們現在可以到 login 的畫面來 (…/#/login)，login 的畫面目前是空的，所以沒有任何東西。</li><li>我們要做登入的話，就要有基本的版型，這個時候可以打開 Bootstrap 4，點選 Examples 後，下方有個<a rel="noreferrer noopener" href="https://getbootstrap.com/docs/4.6/examples/sign-in/" target="_blank">登入的頁面</a>，把它打開來，直接查看它的原始碼，我們可以直接把 &lt;form&gt; 標籤整個複製下來，貼到 Login.vue &lt;div&gt; 標籤內注意的是，這個圖片是我們不需要的，就可以把它移掉，其他就把它修改到可以運行的狀態。回到畫面上就會有個基本的登入畫面，我們還可以複製它的 CSS 樣式過來，這裡有個 signin.css，我們把它複製下來，在 Login.vue 下方可以加上 &lt;style&gt;，並加上剛所介紹的 scope 方法，然後把 CSS 貼進來，存檔之後、重新整理看一下，我們等下就會在這個畫面上製作登入。</li><li>我們可以看一下&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%99%BB%E5%85%A5%E5%8F%8A%E9%A9%97%E8%AD%89" target="_blank">API 文件</a>是怎麼寫的，到登入這個 API 這個地方有寫到我們會使用的 API 是 /signin，然後使用的參數是 username 以及 password，雖然它是叫 username 但是這裡傳入的還是 email，那這邊我們就來試試看。</li><li>到 Login.vue 下面的地方先來定義資料結構，這裡是 user，然後它是一個物件，會使用到的是 username 以及 password，接下來我們把這個定義好的資料結構再把它放上來，在 &lt;input&gt; 標籤上加上 v-model=”user.username”，下面的密碼也是一樣，在 &lt;input&gt; 標籤上加上 v-model=”user.password”</li><li>接下來我們要做的是登入的事件，登入的事件除了綁定這個按鈕上，我們可以直接寫在這個 &lt;form&gt; 標籤上，寫的方式就是 @submit.prevent=”signin”。接下來把這個事件移到下方，我們在 data 後面再加上一個 methods，然後加入一個 signin 的事件，signin 的事件要怎麼寫，我們剛剛已經有在 App.vue 練習過一次了，所以我們可以把 const api 這段先把它複製過來，直接把它複製到 signin 這段，但是在這個部分，不需要傳入 CUSTOMPATH，我們可以看&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%99%BB%E5%85%A5%E5%8F%8A%E9%A9%97%E8%AD%89" target="_blank">API 文件</a>這個部分，它只要直接把這個路徑貼進來，就是 signin 這個路徑貼進來，它不需要後面 CUSTOMPATH，那我們把這段改成這個樣子，只需要signin 就可以了。前面是我們伺服器的路徑，後面是補上一個 signin，然後在這個部份我們會使用 post，會把用戶的資料傳進來，用戶的資料就是上面這個 user，那麼我們就可以 const vm = this，在 post 的參數補上 vm.user，所以在這裡 vm.user 就是帳號以及密碼，那我們來試試看它能不能正確的登入。重新整理來看 Console 的狀態，我們來輸入帳號密碼，先打一次錯誤的，這裡會出現 success、false，訊息是登入失敗，那再輸入一次成功的試試看，這裡就會出現 success、true，訊息是登入成功，然後它還會回傳一個 uid，但 uid 這個地方我們不會用到。所以，如果成功的話，這個 success 會是 true，在後面我們就可以補上，如果我們的 response.data.success 是 true，那麼我們就把路由的路徑回到首頁，剛剛的 index 這個地方，在這個地方就是我們如果登入成功的話，就會把路徑改到首頁這個地方，那我們來試一次看看。重新整理，我再重新登入一次，登入成功之後，它就會轉到首頁這個地方。</li><li>那麼現在我們還要做個登出，我們回到 HelloWorld.vue 這個頁面，我們假設這個頁面是要登入才能進來的，我們先在這個地方補上一個登出的行為，我們直接使用一個 a 連結上面寫登出，然後使用 @click.prevent=”signout”，在後面再補上一個方法 methods 裡面是 signout，我們把基本的方法寫好之後，我們把登出的事件加上來，我們再看一下&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%99%BB%E5%85%A5%E5%8F%8A%E9%A9%97%E8%AD%89" target="_blank">API文件</a>，登出的 API 跟 signin 非常像，但不需要傳入任何參數，它只要觸發這個 logout 的 API 之後，就會直接登出。現在就可以直接把 Login.vue 的 signin 裡面的程式碼複製把它直接貼到 HelloWorld.vue 的 signout 裡面，把 signin 改成 logout，post 原本要傳入 vm.user 的部分，我們就把它拿掉，只要直接傳入 api 就可以了。傳入 api 之後，這裡如果回傳 true 的話，我們就回到剛剛登入的頁面，把 push(‘/’) 改成 push(‘/login’)。</li><li>重新整理，這裡有個小小的登出，登出之後就會回到登入的頁面，我們再登入一次，這樣就會登入進來這一頁，再按一次登出就會回到登入頁，目前這段會發現一個很嚴重的 bug，我登入的時候，它會回到登出頁，我不登入的時候一樣可以到達登出頁。下一個章節就會來介紹我們怎麼確認用戶有沒有登入，先練習試著把登入以及登出的行為都把它完成。</li></ol>



<pre class="wp-block-code"><code>// 1. App.vue
&lt;template&gt;
  &lt;div id="app"&gt;
    &lt;router-view/&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'App',
  created() {
    const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`; // 'https://vue-course-api.hexschool.io/api/geehsu/products';
    // API 伺服器路徑
    // 所申請的 API Path
    console.log(process.env.APIPATH, process.env.CUSTOMPATH);
    this.$http.get(api).then((response) =&gt; {
      console.log(response.data)
    });
  },
}
&lt;/script&gt;

&lt;style lang="scss"&gt;
@import "./assets/all";
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 2. Login.vue
&lt;template&gt;
    &lt;div&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'HelloWorld',
  data () {
    return {
      msg: 'Welcome to Your Vue.js App'
    }
  }
}
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// 3. index.js
// 把Login給載進來
import Login from '@/components/pages/Login';

// routes裡面再新增一個路徑
{
  path: '/login',
  name: 'Login',
  component: Login
}</code></pre>



<pre class="wp-block-code"><code>// 4. Login.vue
&lt;template&gt;
    &lt;div&gt;
        &lt;form class="form-signin"&gt;
        &lt;h1 class="h3 mb-3 font-weight-normal"&gt;請先登入&lt;/h1&gt;
        &lt;label for="inputEmail" class="sr-only"&gt;Email address&lt;/label&gt;
        &lt;input type="email" id="inputEmail" class="form-control" placeholder="Email address" required autofocus&gt;
        &lt;label for="inputPassword" class="sr-only"&gt;Password&lt;/label&gt;
        &lt;input type="password" id="inputPassword" class="form-control" placeholder="Password" required&gt;
        &lt;div class="checkbox mb-3"&gt;
            &lt;label&gt;
            &lt;input type="checkbox" value="remember-me"&gt; Remember me
            &lt;/label&gt;
        &lt;/div&gt;
        &lt;button class="btn btn-lg btn-primary btn-block" type="submit"&gt;Sign in&lt;/button&gt;
        &lt;p class="mt-5 mb-3 text-muted"&gt;© 2017-2021&lt;/p&gt;
&lt;/form&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'HelloWorld',
  data () {
    return {
      msg: 'Welcome to Your Vue.js App'
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
html,
body {
  height: 100%;
}

body {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
  align-items: center;
  padding-top: 40px;
  padding-bottom: 40px;
  background-color: #f5f5f5;
}

.form-signin {
  width: 100%;
  max-width: 330px;
  padding: 15px;
  margin: auto;
}
.form-signin .checkbox {
  font-weight: 400;
}
.form-signin .form-control {
  position: relative;
  box-sizing: border-box;
  height: auto;
  padding: 10px;
  font-size: 16px;
}
.form-signin .form-control:focus {
  z-index: 2;
}
.form-signin input&#91;type="email"] {
  margin-bottom: -1px;
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}
.form-signin input&#91;type="password"] {
  margin-bottom: 10px;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 6. Login.vue
&lt;template&gt;
    &lt;div&gt;
        &lt;form class="form-signin"&gt;
        &lt;h1 class="h3 mb-3 font-weight-normal"&gt;請先登入&lt;/h1&gt;
        &lt;label for="inputEmail" class="sr-only"&gt;Email address&lt;/label&gt;
        &lt;input type="email" id="inputEmail" class="form-control" placeholder="Email address" v-model="user.username" required autofocus&gt;
        &lt;label for="inputPassword" class="sr-only"&gt;Password&lt;/label&gt;
        &lt;input type="password" id="inputPassword" class="form-control" v-model="user.password" placeholder="Password" required&gt;
        &lt;div class="checkbox mb-3"&gt;
            &lt;label&gt;
            &lt;input type="checkbox" value="remember-me"&gt; Remember me
            &lt;/label&gt;
        &lt;/div&gt;
        &lt;button class="btn btn-lg btn-primary btn-block" type="submit"&gt;Sign in&lt;/button&gt;
        &lt;p class="mt-5 mb-3 text-muted"&gt;© 2017-2021&lt;/p&gt;
&lt;/form&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'HelloWorld',
  data () {
    return {
        user: {
            username: '',
            password: '',
        },
    };
  },
};
&lt;/script&gt;

&lt;style scoped&gt;
html,
body {
  height: 100%;
}

body {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
  align-items: center;
  padding-top: 40px;
  padding-bottom: 40px;
  background-color: #f5f5f5;
}

.form-signin {
  width: 100%;
  max-width: 330px;
  padding: 15px;
  margin: auto;
}
.form-signin .checkbox {
  font-weight: 400;
}
.form-signin .form-control {
  position: relative;
  box-sizing: border-box;
  height: auto;
  padding: 10px;
  font-size: 16px;
}
.form-signin .form-control:focus {
  z-index: 2;
}
.form-signin input&#91;type="email"] {
  margin-bottom: -1px;
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}
.form-signin input&#91;type="password"] {
  margin-bottom: 10px;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 7. Login.vue

&lt;template&gt;
    &lt;div&gt;
      &lt;form class="form-signin" @submit.prevent="signin"&gt;
      &lt;h1 class="h3 mb-3 font-weight-normal"&gt;請先登入&lt;/h1&gt;
      &lt;label for="inputEmail" class="sr-only"&gt;Email address&lt;/label&gt;
      &lt;input type="email" id="inputEmail" class="form-control" placeholder="Email address" v-model="user.username" required autofocus&gt;
      &lt;label for="inputPassword" class="sr-only"&gt;Password&lt;/label&gt;
      &lt;input type="password" id="inputPassword" class="form-control" v-model="user.password" placeholder="Password" required&gt;
      &lt;div class="checkbox mb-3"&gt;
          &lt;label&gt;
          &lt;input type="checkbox" value="remember-me"&gt; Remember me
          &lt;/label&gt;
      &lt;/div&gt;
      &lt;button class="btn btn-lg btn-primary btn-block" type="submit"&gt;Sign in&lt;/button&gt;
      &lt;p class="mt-5 mb-3 text-muted"&gt;© 2017-2021&lt;/p&gt;
&lt;/form&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'HelloWorld',
  data () {
    return {
      user: {
          username: '',
          password: '',
      },
    };
  },
  methods: {
    signin() {
    const api = `${process.env.APIPATH}/signin`;
    const vm = this;
    this.$http.post(api, vm.user).then((response) =&gt; {
      console.log(response.data);
      if (response.data.success) {
        vm.$router.push('/');
      }
    });
    },
  },
};
&lt;/script&gt;

&lt;style scoped&gt;
html,
body {
  height: 100%;
}

body {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
  align-items: center;
  padding-top: 40px;
  padding-bottom: 40px;
  background-color: #f5f5f5;
}

.form-signin {
  width: 100%;
  max-width: 330px;
  padding: 15px;
  margin: auto;
}
.form-signin .checkbox {
  font-weight: 400;
}
.form-signin .form-control {
  position: relative;
  box-sizing: border-box;
  height: auto;
  padding: 10px;
  font-size: 16px;
}
.form-signin .form-control:focus {
  z-index: 2;
}
.form-signin input&#91;type="email"] {
  margin-bottom: -1px;
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}
.form-signin input&#91;type="password"] {
  margin-bottom: 10px;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 8. HelloWorld.vue
&lt;template&gt;
  &lt;div class="hello"&gt;
    &lt;a href="#" @click.prevent="signout"&gt;登出&lt;/a&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'HelloWorld',
  data () {
    return {
      msg: 'Welcome to Your Vue.js App'
    }
  },
  methods: {
    signout() {
    const api = `${process.env.APIPATH}/logout`;
    const vm = this;
    this.$http.post(api).then((response) =&gt; {
      console.log(response.data);
      if (response.data.success) {
        vm.$router.push('/login');
      }
    });
    }
  }
}
&lt;/script&gt;

&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;
&lt;style scoped&gt;
h1, h2 {
  font-weight: normal;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
&lt;/style&gt;</code></pre>



<h5>補充：<a href="https://vue-loader.vuejs.org/guide/scoped-css.html" target="_blank" rel="noreferrer noopener">Scoped CSS</a></h5>



<h3>登入 API&nbsp;補充說明</h3>



<h5>注意!!</h5>



<p>原課程的 signin API 暫時移除功能<br>請同學參考 admin/signin 的做法 (下一講座有完整說明)</p>



<pre class="wp-block-code"><code>&#91;API]: /signin</code></pre>



<hr class="wp-block-separator"/>



<p>這段是針對跨域登入的說明<br>如果有 JWT 登入設計亦可使用<br><br>後端登入 API 改用 (&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%99%BB%E5%85%A5%E5%8F%8A%E9%A9%97%E8%AD%89#%E8%B7%A8%E5%9F%9F%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89" target="_blank">文件參考</a>&nbsp;)</p>



<pre class="wp-block-code"><code>&#91;API]: /admin/signin</code></pre>



<p>並加上以下程式碼於 main.js 內</p>



<pre class="wp-block-code"><code>axios.defaults.withCredentials = true;</code></pre>



<p>更多訊息可參考下小節影片說明</p>



<hr class="wp-block-separator"/>



<p>本章節登入驗證相關問題，已於「課程補充範例程式碼」章節補充。</p>



<h3>登入 API&nbsp;補充說明&nbsp;(跨域)</h3>



<p>操作與說明</p>



<ol><li>更新 API 的內容，主要是針對於 API 伺服器與 Vue 的站點如果有跨域的話，就必須加上這段的內容。如果說你的後端是自行設計的話，也可以參考&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%99%BB%E5%85%A5%E5%8F%8A%E9%A9%97%E8%AD%89" target="_blank">API 文件</a>&nbsp;的後端跨域設定的內容，這段是給後端伺服器給使用的，必需開啟跨域才能做跨域的存取。在登入 API 做法的部分，跟先前有一點點的不一樣，但是差距並不大。主要的部份是 signin 前面再加上 admin，原有的 API 也是可以運作的，如果在先前登入有些問題的話，就可以換上這個 /admin/signin 的部分。那這段是在做什麼事？主要是我們在先前登入的時候，並沒有把 Cookie 正確的存起來，補上這一段就是把 Cookie 正確的存在 Vue 的伺服器裡面，我們就稍微做一下，會比較了解這一段是做什麼事情。</li><li>不過在做之前我們再看一下&nbsp;<a rel="noreferrer noopener" href="https://github.com/axios/axios" target="_blank">axios 的文件</a>，在 axios 跨域的那個 Cookie 存起來的話，必需帶上 withCredentials 這個參數，必需把它寫入到 Vue 應用程式裡面，這樣它才能正確的運作，這部分只會改兩行程式碼，所以不用太擔心，它的量很少。接下來我們回到 Login.vue，我們在 signin 前面加上 admin，把登入的路徑稍微改一下。然後在 main.js 的部分，再加入另外一行，就是 axios.defaults.withCredentials = true;，存檔後回到登入頁面，按右鍵檢查、打開 Console，現在先登入一次試看看，看來是沒問題的正確登入，我們要注意的是 Application 這個地方，在老師的講解的 Terminal 是我們正在運行的伺服器，往上看這裡面就是有一個後端傳來的 session，這個 session 就會把這段存在前端，每次 Vue 在發送 API 的時候，就會把這個 session 自動的帶進去，你只要加入這個 withCredentials 之後，這段 session 就會自動存在你的 Cookie 裡面，那麼你在每次發送 API 的時候，它也會自動的帶往後端的地方送，所以現在我們先把這段隨便複製一小段起來，我們就可以用 filter 來搜尋，就可以看到這裡有個 Value，這邊跟我們後端的 session 這整行是一模一樣的，它也就是存在 Application 裡面的 Cookie 裡面，所以有這樣的存起來之後，你就可以正確的切換頁面。當然要特別注意只有使用 admin/signin 這個 API 它才會正確的觸發這個事件。</li><li>我們再試著把 withCredentials 關掉，我們來看一下如果沒有加入這段的話，這個 API 會有什麼不同。我們關掉的同時，也把這個 session 也把它刪掉，並且登出。剛這個動作就是把原本存在前端的 Cookie 把它刪除之後，我們再重新登入一次，它就不會把 Cookie 存起來，現在它會沒辦法正確的呈現畫面，原因就是因為它沒有辦法把 Cookie 存到前端來，老師的 Terminal 雖然有一個 sessionCookie，但是這段 Cookie 是沒有被存起來的。我們到 Application 裡面來，然後試著來搜尋一下，是沒有 Terminal 這一段的。試著把原本登入的 API 把它從 signin 換成 admin/signin，並且加上 axios.defaults.withCredentials = true; 這一段，試著使用 Cookie 的方式來登入我們 Vue 的伺服器。</li></ol>



<pre class="wp-block-code"><code>// 2. main.js
axios.defaults.withCredentials = true;</code></pre>



<h3>課程補充範例程式碼 (上完93~95節在回來上)</h3>



<p>介紹關於登入的一個問題。因為最近 Chrome 都有大幅度的改版，它就會影響到 Cookie 的運作，所以我們這個章節就來了解一下怎麼調整這個問題。</p>



<p>操作與說明</p>



<ol><li>因應這個問題，在這邊後端有做些調整，所以我們先來講解目前所遭遇到的狀況。現在我們先打開登入頁面，在登入頁面右鍵檢查、點選 Network，切換到 Network 這個地方，重新整理，Network 下方請確保紅燈是有開啟的，這裡會有個 XHR 的選項，把這個 XHR 點起來。</li><li>接下來我們輸入我們的帳號、密碼，登入進去試試看，按下登入之後，這個時候看起來是沒有問題，登入看起來是成功，可是登入之後一直呈現旋轉的狀態。其實它在登入的過程中，它被瀏覽器所阻擋，這是新的 Chrome 的政策，它會阻擋一個跨域的 Cookie。這個跨域的 Cookie 是怎樣的狀況，我們來看一下。這邊有一個 signin 的 api，那我們點開 signin 的 api，signin 的 api 一進來應該是在 Headers 的地方，會顯示 200 OK。Preview 這個地方會顯示成功，看起來登入上應該是沒有問題才對。接下來我們直接切到最後一個 Cookies，在 Cookies 裡面會看到這個地方有一個會多一個選項，這邊出現驚嘆號，這邊這個驚嘆號它就寫說簡單來講是屬於跨域的資源，現在因為安全性的關係，所以跨域的資源沒有辦法直接寫入的。</li><li>這是什麼樣的狀況，我們來畫圖了解一下為什麼會發生這樣的問題，我們先來畫一張圖，這張圖我們先畫分別代表前端以及後端的區塊，一邊是前端、一邊是後端，把文字給補上，左邊這裡是前端、右邊這裡是後端 ( 也就是 server )，我們這邊直接打 server。在原本的狀態裡面前端會對後端發送請求，前端的行為我們都用綠色表示，我們在前端往後端發送請求，假設是一個登入的請求之後，後端會回應相對應的內容。然候把後端的行為 ( 後端的行為用藍色表示)，這個後端就會執行一個程式叫做 set-cookie，這個 set-cookie 的作用就是把後端這 cookie 寫到前端的瀏覽器裡面來。但是目前因為跨域政策的關係，所以 set-cookie 這個程式碼就沒有辦法執行。我們先講原本的狀態，原本的狀態 set-cookie 它在執行之後這個前端會多一個 cookie，這個 cookie 是後端所加入的就不是前端所加入，在這個地方就用藍色來顯示。現在因為跨域存取的關係，目前來說像這種不是 Samesite、不是同域的，它沒有辦法給你做 set-cookie，它會直接把它擋掉，擋掉的話這 cookie 就寫不進來了。</li><li>現在我們打開網址查看網站資訊，這邊有個 cookie，點開 cookie 之後，這邊看起來就沒有找到這幾個對應的 cookie，這邊後來有找到一個 backend，但是另外幾個就找不到，像是 session、Hexuid，這裡有一些可能是先前沒有刪除到的 cookie，backend、session、Hexuid 這幾個 cookie 就沒有辦法正確的寫入。我們重新整理來看一下，這邊重新整理之後它就會發現這幾個 cookie 是真的不存在。所以我們在下次發送驗證的時候，我們在正式執行其他 api 的時候，像是我們要取得後端、後台的產品列表的時候，這個地方它就沒有辦法夾帶 cookie 去做存取，因為這裡找不到 cookie。原本應該夾帶進來，但是它找不到，所以它就沒有辦法往後端送。</li><li>因為這樣的狀況，所以我們現在要調整一下程式碼，先說明預期調整的狀況，現在的做法會跟先前有點不一樣。過去是從 server 存 cookie 到前端來，現在因為 server 沒有辦法存 cookie 到前端，所以我們在這個地方後端在往前端送的時候，會有一點點的改變。它在往前端送的時候會多一個欄位，我們原本的 data 會新增一個內容叫做 token，這個 token 往前端送來之後，我們的前端要負責由前端把它存到 cookie 裡面來，所以後端就不會執行 set-cookie、不會由後端來存取，接下來會由前端來把這個 cookie 給存起來。我們要發出請求向後端取得產品列表的時候，它就會把這個 cookie 往伺服器帶，就是由前端帶就不是由後端帶，後端就會把這個傳過來的 cookie 進行做驗證，這個欄位也會跟先前有點不同，那麼我們現在就來試著做做看吧。</li><li>現在我們先登出，在登出之後我們先把路徑改成本地端伺服器，到時候正式的伺服器也會使用相同的設定檔。先把這個伺服器給替換上來，現在把伺服器替換上來之後，重新運行一次，接下來重新整理、重新登入，按下登入之後跟先前有點不一樣，登入之後看一下 Preview 的地方，在先前只有訊息、是否成功、還有 uid 而已，現在這個版本會多一個 token 以及 expired (到期日)，它會多這兩個。接下來在 cookie 這個地方就要把這兩個資訊給存起來，包含這個 token 以及 expired。那麼要怎麼做存取，這邊已經有先幫大家先把文件準備起來，在 <a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank">MDN 的文件</a>有提供存取的方式，包含讀出跟寫入。在示例2的 var myCookie 這一行程式碼代表把 cookie 讀出來的方式，在示例3的 document.cookie 那一行代表把 cookie 寫入的方式，所以它的寫入以及讀出都準備好了。</li><li>在這個 Login.vue 頁面，我們先把轉址先把它註解掉，我們等下先不轉址，我們先把 cookie 做寫入，在寫入之前我們必須先把值給取出來，const token、const expired，都把它讀取出來之後，我們先用 console.log 來確定一下有沒有把這兩個值給帶出來，(停止終端機、重新運行)，登入之後，在這邊 console 就可以把這兩個值給帶出來。前面是 token、後面是 expired。</li><li>接下來我們就要把這兩個值寫到我們的 cookie 裡面來，回到 MDN 的文件頁面，示例3的 document.cookie 這一行是我們寫入的方式，我們先把這一段複製起來，記得這一行必須貼在我們的轉址之前，我們要在轉址前先把 cookie 存好，然後我們使用兩個反引號用樣板字面值來做儲存，然後這裡面會分別帶入幾個值。最後這個 path=/ 可以把它清掉，這個不會用到，然後這邊有分別兩個片段，前面這個是我們的 cookie 名稱以及它的值，後面這個是到期日以及它的值。所以在這個地方，這個 cookie 名稱是可以自訂的，我們來這邊給它一個名字叫做 hexToken，然後後面的是它的值，它的值我們就使用樣板字面值的方式把值給帶進去。另外一個地方也是使用相同的方式，但是 expires 這個是固定的名稱，然後我們一樣使用樣板字面值的方式把它的值帶進去，不過在這個地方要稍微注意一下，因為後端所傳來的數值，這個數值是 Unix Timestamp，所以我們必需轉成一般的時間格式，轉換的方式會像這樣子，會使用 new Date 然後把這個值給帶進來，那這樣子就可以把 cookie 給寫進去。</li><li>存檔之後，我們再試一次看看，重新整理之後，我們把帳號密碼給填入，按下登入之後， Console這邊看起來有跳出這一段，照理說就有存起來了。我們把查看網站資訊打開，可以看到我們有存了哪些 cookie。那麼在 cookie 部分這裡就可以看到我們剛剛存了一個 hexToken，hexToken 裡面這邊就可以看到我們剛剛所存入的值，然後移到最前面它的值與我們剛剛所取得的值是相同的。下面的地方還有一個到期日，建立的時間是現在，它的到期日大概是五天之後，那麼這樣就有存起來了。如何確定它有正確的存起來，我們可以重新整理畫面，重新整理畫面之後，我們再看一次 cookie，一樣在 hexToken 這個地方可以看到相同的值，這個就是我們的 Token，存起來之後，我們就可以正確的登入。</li><li>我們就把轉址打開，我們接下來要主動把 cookie 給提出來並且往後端做發送。這邊該怎麼樣製作，<a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank">MDN 的文件</a>有把 cookie 帶出來的方式，示例2的 var myCookie 這一行就是把 cookie 帶出來的方式，另外一個就是怎麼把它往後端進行發送，這裡也已經準備好一個文件，<a rel="noreferrer noopener" href="https://github.com/axios/axios#custom-instance-defaults" target="_blank">axios 的文件</a> 裡面有說明該怎麼樣去加入一個驗證的 Token 把它往後端發送，在 Custom instance defaults 這裡有一行的意思是說我之後所發出的請求預設就會加入這個欄位，Authoriazation 這個欄位。所以我們接下來就可以把這一行加入到我們的程式碼裡面來。我們的後端基本上所有的後端的行為都會加入進入 Dashboard.vue 這個元件，因為它是外層的元件，現在我們就加入一個 created()，在這邊我們先把 Token 給取出來，Token 取出來的方式在示例2的 var myCookie 這一行，我們先把 var 改成 const，然後這裡稍做一下調整 (“$1” → ‘$1’)、有一個地方多了一個反斜線可以刪掉 (= 之前的 \ 可以刪掉)，然後這邊有個 test2 這個是我們自定義 Token 的名稱，所以我們剛存的 Token 名稱必需把它帶過來，必需用一模一樣，這個名稱可以自訂。接下來我們定義一個 my Cookie 之後，我們就可以把這個 cookie 看看能不能看到它的值。使用 console.log(myCookie);，這邊我們再補上一個 ‘myCookie’ 確保我們看到的是 myCookie 的內容 ( console.log(‘myCookie’, myCookie); )。重新整理之後，這裡就會帶入 myCookie，這個就是我們剛剛所存入 cookie 的內容，就是我們存入的 Token。現在我們要把它往後端送，把這一行程式碼複製起來，這段直接複製起來，前面的 instance 不需要複製，回到 Dashboard.vue 頁面把它貼進來。我們在套用 axios 的時候都是使用 this.$http.，在這個地方只要使用 this.$http.，接下來後面這一段直接把 axios 文件裡面的程式碼貼上來就可以了，貼上來之後我們把 myCookie 帶到這個地方來(AUTH_TOKEN → myCookie)。再稍作調整 ( [‘Authorization’] →.Authorization )，調整之後我們再來看一下它能不能正確運作，把 console.log 移調。存檔之後我們重新整理，重新整理之後就可以發現畫面現在就可以正確使用了。headers 在加上去之後，它是所有的 API 都會自動套用，所以我們就不需要一一的套用。套用的值會在 Network 的 products，這邊有個 Headers 裡面有 Response Headers、在往下去有個 Request Headers，這個 Request Headers 就是我們發出去，綠色這條線就是我們的 Request Headers，它就會帶入 Authoriztion 這一段把我們驗證往後端帶。</li><li>這一章節就是更新後的驗證方式，不管是使用新的或者舊的，目前這兩個版本都會共存，我們建議換成新的方式，新的方式就不會受到跨域的影響。</li></ol>



<figure class="wp-block-image size-full"><img loading="lazy" width="681" height="241" src="/wordpress_blog/wp-content/uploads/2022/04/前端、後端與cookie關係.png" alt="" class="wp-image-688"/><figcaption>前端、後端與 cookie 關係</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" width="681" height="241" src="/wordpress_blog/wp-content/uploads/2022/04/data-token.png" alt="" class="wp-image-689"/><figcaption>data-token</figcaption></figure>



<pre class="wp-block-code"><code>// 7.~10. Login.vue
  methods: {
    signin() {
    const api = `${process.env.APIPATH}/admin/signin`;
    const vm = this;
    this.$http.post(api, vm.user).then((response) =&gt; {
      console.log(response.data);
      if (response.data.success) {
        const token = response.data.token;
        const expired = response.data.expired;
        console.log(token, expired);
        document.cookie = `hexToken=${token}; expires=${new Date(expired)};`;
        vm.$router.push('/admin/products');
      }
    });
    },
  },</code></pre>



<pre class="wp-block-code"><code>// 7.~10. Dashboard.vue
  created() {
    const myCookie = document.cookie.replace(/(?:(?:^|.*;\s*)hexToken\s*=\s*(&#91;^;]*).*$)|^.*$/, '$1');
    // console.log('myCookie', myCookie);
    this.$http.defaults.headers.common.Authorization = myCookie;
  }</code></pre>



<h3>課程補充範例程式碼說明</h3>



<h5>課程補充範例程式瑪</h5>



<p>因應 Chrome 的跨域限制，課程中新增 Token 的存取方式，讓前端可自行將 Token 存入 Cookie 及發送的方法，詳情可參考影音課程說明。</p>



<p>MDN 文件，將 Cookie 存入、取出：</p>



<p><a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank">MDN 文件</a></p>



<p>附上範例程式碼：</p>



<pre class="wp-block-code"><code>const token = response.data.token;
const expired = response.data.expired;
console.log(token, expired);
document.cookie = `hexToken=${token};expires=${new Date(expired)};`;</code></pre>



<p>Axios 文件，設定預設 Headers：</p>



<p>範例程式碼：</p>



<pre class="wp-block-code"><code>const token = document.cookie.replace(/(?:(?:^|.*;\s*)hexToken\s*=\s*(&#91;^;]*).*$)|^.*$/, '$1');
this.$http.defaults.headers.common.Authorization = `${token}`;</code></pre>



<h3>驗證登入及 Vue Router&nbsp;的配置</h3>



<p>資源</p>



<ul><li><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%AE%88%E5%8D%AB" target="_blank" rel="noreferrer noopener">Vue Router 導覽守衛</a></li><li><a href="https://router.vuejs.org/zh/guide/advanced/meta.html" target="_blank" rel="noreferrer noopener">Vue Router Meta</a></li></ul>



<p>操作與說明</p>



<ol><li>介紹怎麼阻止用戶在沒有登入的情況下，直接輸入網址的方式來進入指定頁面。像現在是在沒有登入的情況，但是我直接把後面的 login 拿掉就可以進入首頁。當然我們的 Router 目前也不知道說我們到底哪些頁面是需要登入，那些頁面是不需要。</li><li>我們先來看&nbsp;<a rel="noreferrer noopener" href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank">Vue Router 的文件</a>，在裡面有一個導航守衛的一個方法，導航守衛的概念是我們可以執行一個 router.beforeEach，這個會在切換頁面的時候觸發，然後這裡面會有三個參數，to 就是我們即將要到的頁面、from 就是我們從哪個頁面過來、next 就是到達下一個頁面，所以我們在往特定的頁面的時候，如果指定的頁面是需要登入的話，我們就可以做一些驗證，當它沒有問題的時候，我們就放行它，所以我們可以透過這個方法，去了解用戶接下來要到哪個路徑，接下來的路徑它需不需要登入，如果需要的話就先驗證，如果不需要的話就直接放行。</li><li>接下來我們就要去了解到底哪些頁面是需要驗證，在路由元信息這邊我們可以看到 meta 下方所提供的範例是 requireAuth，就是這個頁面它是需要經過驗證的。那麼需要經過驗證的話，如果導航守衛發現它是需要驗證的話，就需要先執行一些驗證的手續，沒有問題的話才能放行它。所以我們需要了解目前的用戶到底有沒有登入，在&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%99%BB%E5%85%A5%E5%8F%8A%E9%A9%97%E8%AD%89" target="_blank">API 文件</a>就有一個檢查用戶是否仍持續登入的說明。假設他回傳為 true 的話，就是目前它還是登入的狀態，所以它就不需要再重複登入。</li><li>我們開始撰寫這段的程式碼，接下來我們打開 main.js，然後我們在導航守衛這邊，把 router.beforeEach 直接把它複製過來，複製過來之後我們來看一下 to、from、next 分別代表的是什麼東西，使用 console.log 來看一下，我們到登入頁面重新整理，會發現導航守衛好像沒有觸發，在這個地方其實導航守衛還沒有辦法阻擋的很完整。它必需在用戶切換頁面的時候才會觸發，像是現在在登入頁面重新整理是不會觸發，因為它沒有來自於哪個頁面、以及到達哪個頁面，所以它是沒有辦法觸發的。我們必需重新修改這個路由，它才能觸發這個事件，但是我現在修改這個路由，它也沒有辦法到達指定的頁面。</li><li>因為它被導航守衛給擋下來了，為了避免被導航守衛擋下來，我們可以在後面先加上 next 的方法。存檔之後我們重新整理，接下來我們在切換頁面的時候，就不會直接被導航守衛擋下來，像這樣切換頁面是沒有問題的。</li><li>我們再看一下 Console 的內容，Console 的內容這裡就可以看到說我們現在 to 是往 HelloWorld 頁面去，然後我們是從 Login 頁面過來，裡面就有一個 meta，現在這個 meta 裡面是空的，這個 meta 也就是路由訊息，我們可以把路由訊息加在 Login 上面，Vue Router 文件的路由元信息範例程式碼有個 meta: { requiresAuth: true }，先把它複製下來，我們就可以把這個路由訊息，加在 router 的 index.js 裡面的 routes 上面，然後我們存檔。所以我們現在如果說，我們切換頁面的時候，切換到 Login 頁面的時候，這個 HelloWorld 這一頁，它的 meta requiresAuth 就會是 true，所以這個 requiresAuth 是我們目前判斷的一個基準。</li><li>所以在 main.js 的 router.beforeEach 這個地方就可以使用 if 判斷式，我們假設要到的頁面具有 requiresAuth 的話，那麼我們就不會直接放行，反之如果說它沒有 requireAuth 的話，我們就會直接放行。在這個裡面我們再加上一個 console.log(‘這裡需要驗證’); ，存檔。我們現在在 Login 的頁面，我們直接往首頁去做切換，這個時候它會跳出這裡需要驗證，而且沒有辦法直接過去。</li><li>接下來我們在這裡補上驗證，補上驗證的話，就去觸發這支 API，觸發的方式剛才有寫過好幾次了，我們就可以先複製先前的程式碼 (Login.vue)，把它直接貼過來 (main.js)，貼到這裡需要驗證的部分，後面的 API 路徑我們要把它替換成驗證用的 API 路徑，所以當我們需要驗證的時候，就會走這支 API，下面的 post 裡面的 user 參數是不需要的，const vm 也要拿掉，vm.$router.push(‘/’); 先把它註解起來。假設它需要登入的狀況，它就會去觸發這支 API，如果沒有問題就會執行 if 裡面的事件，那我們先存檔一次試試看。</li><li>接下來我們回到登入頁面，我們直接切到首頁，目前這個首頁是需要被驗證的，它怎麼會跳錯？這個原因在於說我們現在的執行環境是在這個 router 下，並不是在 Vue 的元件內，所以它沒有辦法直接呼叫 this.$http，這個 this.$http 是 Vue 的元件內才能使用的，所以我們要直接使用 axios 這個套件，我們可以把 this.$http 拿掉，直接替換成 axios ，那我們再來一次，我們先回到前頁，然後重新整理，直接切換到首頁試試看，這個時候它會出現我們沒有登入，請重新登入的訊息，當然這樣我們就沒辦法直接切換到指定的頁面。</li><li>所以在這個地方我們就可以加上，假設我們成功登入的話，我們就會放行 next，但是如果我們不是登入的狀態時，我們就必需回到登入的頁面，回來的方法是用 next 裡面包一個物件，物件再包上一個我們要到的路徑，路徑就是 login，然後存檔。接下來我們在 login 頁面直接對首頁去進行，這個時候會跳出 success 為 false 請重新登入，在這個地方我們就登入一次，登入後我們就可以進來。但是，我們再回到前一頁回到 login，這個時候如果我直接輸入首頁的網址，這個時候是可以轉進來，因為我目前還是持續登入的狀態。這個登入狀態是存在伺服器的，所以只要伺服器驗證我還是登入的狀態，我就不會被轉回首頁。</li><li>最後再補充一個小地方，現在我們在這個路由下，如果我們隨意輸入一個路徑，它會跳出空白的頁面，但是跳出空白的頁面並不是很好，我們就可以在這個路由的地方 (index.js的 routes 地方)，再加入一個新的物件，這個新的物件它的 path 是不一樣的，它的 path 是一個 * 。假設它所進入的路徑不是我們所定義的 path 的話，它就會被重新導向，redirect 那我們就把它導到 login 的頁面，這個方法是避免用戶直接進入不存在的頁面，這樣的話就會被直接阻擋，然後重新導向到 login 的頁面。</li></ol>



<pre class="wp-block-code"><code>// 4. main.js
// 導航守衛
router.beforeEach((to, from, next) =&gt; {
  // ...
})</code></pre>



<pre class="wp-block-code"><code>// 5. main.js
// 導航守衛
router.beforeEach((to, from, next) =&gt; {
  console.log('to', to, 'from', from, 'next', next);
  // ...
  next();
})</code></pre>



<pre class="wp-block-code"><code>// 6. index.js
  routes: &#91;
    {
      path: '/',
      name: 'HelloWorld',
      component: HelloWorld,
      meta: { requiresAuth: true }
    },</code></pre>



<pre class="wp-block-code"><code>// 7. main.js
// 導航守衛
router.beforeEach((to, from, next) =&gt; {
  console.log('to', to, 'from', from, 'next', next);
  // ...
  if (to.meta.requiresAuth) {
    console.log('這裡需要驗證');
  } else {
    next();
  }
})</code></pre>



<pre class="wp-block-code"><code>// 8. main.js
// 導航守衛
router.beforeEach((to, from, next) =&gt; {
  console.log('to', to, 'from', from, 'next', next);
  // ...
  if (to.meta.requiresAuth) {
    const api = `${process.env.APIPATH}/api/user/check`;
    this.$http.post(api).then((response) =&gt; {
      console.log(response.data);
      if (response.data.success) {
        // vm.$router.push('/');
      }
    });
  } else {
    next();
  }
})</code></pre>



<pre class="wp-block-code"><code>// 9. main.js
// 導航守衛
router.beforeEach((to, from, next) =&gt; {
  console.log('to', to, 'from', from, 'next', next);
  // ...
  if (to.meta.requiresAuth) {
    const api = `${process.env.APIPATH}/api/user/check`;
    axios.post(api).then((response) =&gt; {
      console.log(response.data);
      if (response.data.success) {
        // vm.$router.push('/');
      }
    });
  } else {
    next();
  }
})</code></pre>



<pre class="wp-block-code"><code>// 10. main.js
// 導航守衛
router.beforeEach((to, from, next) =&gt; {
  console.log('to', to, 'from', from, 'next', next);
  // ...
  if (to.meta.requiresAuth) {
    const api = `${process.env.APIPATH}/api/user/check`;
    axios.post(api).then((response) =&gt; {
      console.log(response.data);
      if (response.data.success) {
        next();
      } else {
        next({
          path: '/login',
        });
      }
    });
  } else {
    next();
  }
})</code></pre>



<pre class="wp-block-code"><code>// 11. index.js
  routes: &#91;
    // 重新導向
    {
      path: '*',
      redirect: 'login',
    },</code></pre>



<h3>套用 Bootstrap Dashboard&nbsp;版型</h3>



<p>製作簡單的 Dashboard 版型。</p>



<p>資源：<a href="https://getbootstrap.com/docs/4.6/examples/dashboard/" target="_blank" rel="noreferrer noopener">Bootstrap Dashboard 模板</a></p>



<p>操作與講解</p>



<ol><li>在 Bootstrap 4 的 Examples 裡面找到一個 Dashboard 版型。用哪個 Dashboard 的版型都是可以的，只不過這個是比較好取得的。我們可以打開它的原始碼來看一下，它的原始碼難度並不高，這裡有附帶一個自定義的 CSS，它的結構是上方有個 &lt;navbar&gt;，左方有個 &lt;sidebar&gt; 是 &lt;nav&gt; 開頭到 &lt;/nav&gt; 結尾，這裡是 &lt;navbar&gt;，下方是個 &lt;main&gt; 的標籤，這個是它主要的內容，對應回來 Dashboard 頁面，上方的 Navbar、以及左邊的 Sidebar、還有 Main 主要的內容。</li><li>那我們現在就把這個版型搬到我們 Vue 的專案裡面來。搬的方式我們先把這個自定義的 CSS 打開，把它全部複製起來，接下來我們開一個新檔案，然後把這些 CSS 全部貼進來，然後我們到 assets 裡面新增一個 dashboard 的檔案 ( _dashboard.scss )，前方要不要加 _ 都可以，加進來之後，我們在 all.scss 的檔案下，我們就可以新增 @import “./_dashboard”;，把剛剛的這個 dashboard 的檔案匯入進來，現在我們的專案內就包含這個 _dashboard 的 CSS。</li><li>回到原始碼這個地方，我們就把這個 &lt;nav&gt; 一直到最下方全部都把它複製起來，下方的 &lt;script&gt; 不用，我們只要它標籤的部分就好 &lt;nav&gt;、&lt;div&gt; 的標籤就可以了。複製下來之後，我們再新增一個 component，這個 component 我們就叫他 Dashboard.vue，這是主要的版型：Dashboard.vue，打開之後，我們一樣會有一個 &lt;template&gt; 標籤，然後 &lt;div&gt; 在外層，接下來把所有的內容都直接貼進來。貼進來之後可能會有一些些小錯誤，那我們就稍微修正一下。</li><li>現在我們並沒有把 Dashboard.vue 把它匯入進入，那我們就在 router 的 index.js 把它給載進來，這 HelloWorld 現在應該也適用不到，不過沒關係先把它留著，複製 HelloWorld 那一行程式碼，把它改成 import Dashboard from ‘@/components/Dashboard’;</li><li>接下來把下面原本首頁的路徑把它複製過來，並且把 component 的值改成 Dashboard，還有它是必須被驗證的，然後存檔，這個路徑記得改一下，path 的值改成 ‘/admin’，我們登進來之後，Login 進來之後，我們就給它一個 admin 的路徑，存檔。我們現在來看一下這個路徑有沒有正確的顯示，看起來是蠻正常的，都有正確的顯示。</li><li>做一些版型的拆解，我們現在回到 Dashboard.vue 這裡面來，Dashboard 上方有個 &lt;nav&gt; 標籤，我們就新增一個元件，叫做 Navbar.vue。那麼旁邊這個 Sidebar 也把它移過來， 現在左邊有個 Sidebar 那我們把它移過來，一樣新增一個元件，叫做 Sidebar.vue。現在中間 Main 的部分是不需要的，我們會插入自己的內容，所以 Main 的部分我們把它拿掉。現在 Dashboard 又變空的，因為內容都被我們拆出去，我們把 Navbar、Sidebar 都把它拆出去了。</li><li>拆出去之後我們現在要把它載進來，這下方就可以加上 &lt;script&gt; ，然後我們這裡先 export default {}，那麼這段其實也可以從其他的元件複製過來。但是這裡就直接寫，我們主要是把元件給匯進來，所以這裡可以有個 components，會發現這些觀念跟我們在 CDN 所介紹都是一樣，我們就會把其他的元件給插進來。我們在這邊把 &lt;script&gt; 寫好之後，我們看到畫面還是空白的。當然我們要記得把這些元件加回來這個地方，&lt;Sidebar&gt;&lt;/Sidebar&gt; 在這個地方，&lt;Navbar/&gt; 也可以這樣子寫，這邊提供兩種寫法來參考。一個是標籤有頭有尾、另外一個是把結尾直接結尾在一開始這個頭的標籤，我們就不需要另外一個結尾標籤，兩個結果是一樣的。這邊可以看到上方的 Navbar 以及左方的 Sidebar 都已經回來了。</li><li>現在我們要怎麼把內容塞到中間這個地方，我們再新增一個頁面 ( 在 Pages 裡面)，這個頁面是我們等下要來做的內容的。我們先給它一個正式一點的名字，叫做 Products.vue，內容的話，我們先維持一個 123 的數字就好了，我們先讓這個版型可以運作就可以了。接下來我們 Dashboard.vue 中間的 &lt;main&gt; 標籤地方，再加上一個 &lt;router-view&gt;&lt;/router-view&gt;，然後存檔。所以現在 &lt;router-view&gt; 是巢狀的，在外一層是在 App.vue 這個地方，有一個 &lt;router-view/&gt;，在內層還有一個 &lt;router-view&gt;&lt;/router-view&gt; 是在 Dashboard.vue 上的。所以現在 &lt;router-view&gt; 有兩層，一個是在 App.vue、另外一個是在 Dashboard.vue 上。</li><li>現在我們再打開 router 的 index.js，我們現在要做的是巢狀的 router，我們在進入 admin 的時候，我們會切到另外一個 router 的路徑。巢狀的 router 在前幾章有介紹到，我們在這裡會加上一個 children，然後使用陣列的方式，陣列的內容跟我們先前這些內容是一模一樣的。我們給它一個路徑是 ‘products’，下方的名稱也叫 ‘Products’。那元件是後來新增的，叫做 Product 的一個元件，import Products from ‘@/components/pages/Products’;，我們把這個元件移過來 ( component: Products )。最後再將 children 上方這個 meta: { requiresAuth: true }, 這一段剪下來，然後貼到 Products 這個地方來，這樣才能確保在進入這個頁面之前它是需要被驗證的，那我們存檔。我們在網址輸入 admin/products 我們現在想要直接進入這個頁面的時候，它會直接被擋回來，所以記得要把 meta requresAuth 加到這一段。那我們現在輸入帳號密碼來登進來看看，登進來之後它會跳到只有登出的這個頁面，那這個頁面目前是顯示登出，但是沒有關係，我們現在在確定登入的情況下，我們就可以進入到這個 Dashboard 的這個頁面，並且畫面上呈現 123。</li><li>那麼這一段試著把 Bootstrap 4 的 Dashboard 版型套用到這個頁面，然後並且把一些相關的檔案都把它建立起來。</li></ol>



<pre class="wp-block-code"><code>// 2. all.scss

// 載入 _dashboard
@import "./_dashboard";</code></pre>



<pre class="wp-block-code"><code>// 4. index.js
// 把 Dashboard給載進來
import Dashboard from '@/components/Dashboard'</code></pre>



<pre class="wp-block-code"><code>// 5. index.js
// Dashboard的路徑
{
  path: '/admin',
  name: 'Dashboard',
  component: Dashboard,
  meta: { requiresAuth: true },
},</code></pre>



<pre class="wp-block-code"><code>// 7. Dashboard.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;Navbar/&gt;
    &lt;div class="container-fluid"&gt;
      &lt;div class="row"&gt;
        &lt;Sidebar&gt;&lt;/Sidebar&gt;
        &lt;main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4"&gt;

        &lt;/main&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import Sidebar from './Sidebar';
import Navbar from './Navbar';

export default {
  components: {
    Sidebar,
    Navbar
  },
};
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// 8. Pages/Products.vue
&lt;template&gt;
  &lt;div&gt;
    123
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>



<pre class="wp-block-code"><code>// 9. index.js
// 把 Product給載進來
import Products from '@/components/pages/Products'

// Dashboard的路徑
{
  path: '/admin',
  name: 'Dashboard',
  component: Dashboard,
  children: &#91;
    {
      path: 'products',
      name: 'Products',
      component: Products,
      meta: { requiresAuth: true },
    },
  ],
},</code></pre>



<h3>製作產品列表</h3>



<p>製作 Dashboard 的內容。</p>



<h5>問題修正</h5>



<p>不過在做產品列表之前要稍微講一下，我們現在登入的路徑有點不正確。我們現在如果輸入帳號密碼之後，登進來它會到首頁的地方，那這個是不正確的路徑。所以在這個地方要稍作調整，我們現在 HelloWorld 這個路徑之後都不會用到，所以直接可以把它移除，移除的話上方的 import HelloWorld 也要把它移除。都移除掉之後，我們先前所做的 Login.vue 也要稍微做一下調整，我們等一下會把它導到 ‘/admin/products’ 這個頁面。那這個 Products.vue 先前有建好一個簡單的 123 內容的頁面，所以我們現在登入看看是不是會直接到達那個頁面。現在直接到 /admin/products 這個路徑下，然後現在的內容只有 123。</p>



<pre class="wp-block-code"><code>// index.js
// 之後都不會用到，可以直接移除
// import HelloWorld from '@/components/HelloWorld'

// 之後都不會用到，可以直接移除
// // 首頁的路徑
// {
//   path: '/',
//   name: 'HelloWorld',
//   component: HelloWorld,
//   meta: { requiresAuth: true }
// },</code></pre>



<pre class="wp-block-code"><code>// Login.vue
methods: {
  signin() {
  const api = `${process.env.APIPATH}/admin/signin`;
  const vm = this;
  this.$http.post(api, vm.user).then((response) =&gt; {
    console.log(response.data);
    if (response.data.success) {
      vm.$router.push('/admin/products');
    }
  });
  },
},</code></pre>



<p>操作與講解</p>



<ol><li>接下來我們要取得遠端的資料，我們先前在開這個<a rel="noreferrer noopener" href="https://vue-course-api.hexschool.io/" target="_blank">&nbsp;Vue 課程練習 API</a>&nbsp;的時候，有先建立一份假的資料，我們現在先把這個資料取得回來，像範例頁面一樣，先把資料取回來。接下來在來做新增、修改、編輯還有刪除的部分。</li><li>回到 Products.vue 的頁面，我們會在這裡新增一個 &lt;script&gt;，用 export default 讓它可以匯出給其他元件使用，我們先把資料結構先給定起來，data 會使用 function 的形式，然後 return 一個物件，這個物件我們會新增一個 products，它會是個陣列，我們等下所新增的資料都會存到這個 products 裡面。</li><li>接下來，我們新增一個 methods 然後它是個物件，用途是 getProducts，會發現我們在寫 Vue 的時候很多的行為都是不斷的重複，所以在這裡我們就是要去取得遠端的資料，我們取得遠端的資料先前也有寫過一個類似。在 App.vue 裡面這裡就有取得遠端資料的一個方法，我們就可以直接先把這一段先把它複製過來，把它複製到 Products.vue 的 getProducts 裡面，然後整理一下，確定一下它是取得 products，前面的註解我們就可以把它移除掉。在這個地方因為我們要把 products 的內容存到我們所宣告的一個變數裡面，所以在這外層我們還必須用 const 宣告 vm 等於 this，確保在這個 http 結束之後，我們可以把取回來的資料，再存回 vm 裡面。</li><li>這裡就先來看一下這個 response 是什麼樣子的內容，(先把 const vm = this 註解起來)，在寫到這個地方的時候要記得補上一個 created 才會觸發 getProducts 的事件。那我們在這裡加上 created 的 hook，然後把 getProducts 貼過來，this.getProducts();。那我們重新整理看一下有沒有正確取得資料，打開 Console 之後，這裡怎麼有兩份資料內容，我們可以看到 App.vue 它有執行一次、Products.vue 也有執行一次。</li><li>現在這 App.vue 它已經不需要執行這一段，在 App.vue 這個部分我們就可以把它移掉。現在 getProducts 也只會執行一次，那麼我們把它打開看一下有什麼樣子的內容，這個部分會看到說有成功的取得資料，並且它會回傳分頁內容( pagination) 還有 products，這個 products 就是我們要呈現在畫面上的資料。所以在這個時候我們就回到 Products.vue 這個頁面 const vm = this; 把註解打開，然後 vm.products = response.data.prodcuts;，(下面有注意的修正與解決方式)。</li><li>這裡要特別注意在存這個變數的時候要去看到底有沒有儲存正確。如果不確定存的對不對，請用 Vue 的開發者工具看一下所存的變數到底正不正確，在 &lt;Products&gt; 這個元件下就可以看到 products 這個變數，裡面就是產品的資料，要特別確定所存的變數跟要的是否一致。</li><li>接下來就可以把相關的內容呈現在畫面上，這個部分跟先前練習都大同小異，所以這裡就先加快流程。前面上面這個地方會先準備一個按鈕，下面這個地方就是放置表格的地方，這表格部分上面有標題、下面是內容的部分，通常在做的時候會先把 thead 打開，但不會把所有的內容填進去，因為還不確定可以用的資料內容有哪些，會把下面完成之後在將上面的 thead，就是標題的部分一一的補上，所以在這個地方就先留下一個 &lt;thead&gt; 的標籤，下方先打上 &lt;tbody&gt; 標籤、然後 &lt;tr&gt;，&lt;tr&gt; 就是我們要做 for 迴圈的部分，v-for=”(item, key) in products”&gt;&lt;/tr&gt;。</li><li>如果你有使用 ESLint 的情況下，這裡會跳出錯誤，原因是因為當你有使用 v-for 的時候要加上 :key 才會正確，這裡的 :key 你可以使用參數裡面的 key 也可以使用 item.id 都是可以的，因為 item.id 是唯一的，那這個時候它也就不會跳錯，還有當你有使用 ESLint 的時候，這個 item 後面的 key 如果沒有用到的時候，它也會跳出提示，如果還沒有用到的情況下可以先把它移掉。</li><li>接下來我們就把欄位一一的補上，這裡我們就先加速流程一下 (此段為剪接，後方有欄位新增的過程說明)，你要確定有哪些欄位可以使用的話，可以先從&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0-%5B%E9%9C%80%E9%A9%97%E8%AD%89%5D" target="_blank">API 文件</a>裡去參考，像是 “is_enabled” 這是已經啟用的狀態，但我們一開始沒有寫入這個欄位，它就沒有回傳，所以你要確認有哪些欄位可以使用，可以先來這邊觀看，(欄位新增中…)，記得有金額的部分都靠右，( 產品如果為啟用：is_enabled == 1 )，我們把這些基本的資訊都補上去之後，我們就可以看一下畫面到底正不正確。項目這個地方有分類、產品名稱、價格以及它實際的售價還有它有沒有啟用、後面先補上一個編輯，在稍後的課程會介紹到。</li><li>接下來我們就可以把 &lt;thead&gt; 給補上，&lt;thead&gt; 的內容就會跟著 &lt;tbody&gt; 來走，那麼 &lt;thead&gt; 的部分是使用 &lt;th&gt;，我們就可以把相關的字眼補一補，像這裡是分類、產品名稱、原價、售價、是否啟用、編輯，在這個部分如果覺得寬度並不合適的時候，如果需要調整可以只調整要限制寬度的部分，剩下的部分讓它自由調整，像是在這裡原價、售價、是否啟用、編輯以及分類這幾個欄位就不需要太大的空間，那麼我們可以把多餘的空間都保留給產品名稱，所以在這個部分我們可以這樣寫，分類的地方給它 120 的寬度，先都補上去試試看，是否啟用可以小一點點，編輯的部分也可以小一點點，存檔來試一次看看。現在就可以看到說，我們把所有的空間幾乎都分給產品名稱使用，所以我們在把畫面拉寬或拉小的時候，其他幾個欄位寬度是固定的，多餘的空間都會給產品名稱，看起來是否啟用偏小，就可以給它大一點的空間(width=”100″)。要特別注意有錢的部分都是靠右，那之後我們在補上千分號。上面還有建立新的產品的按鈕，我們可以把它的樣式補一補，class=”btn btn-primary，當我們要與上方的空間有些間隔的話，我們一樣可以用 mt-4 把空間隔開來。</li><li>這個部分就是產品列表，先做到這個地方，我們稍後在介紹新增、修改、刪除的部分。</li></ol>



<pre class="wp-block-code"><code>// 2~5. Products.vue
&lt;template&gt;
  &lt;div&gt;123&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
    };
  },
  methods: {
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`; // 'https://vue-course-api.hexschool.io/api/geehsu/products';
      const vm = this;
      console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http.get(api).then((response) =&gt; {
        console.log(response.data);
        vm.products = response.data.products;
      });
    },
  },
  created() {
    this.getProducts();
  }
};
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// 5. App.vue
&lt;template&gt;
  &lt;div id="app"&gt;
    &lt;router-view/&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'App',
  // 現在 App.vue 已經不需要執行這一段
  // created() {
  //   const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/products`; // 'https://vue-course-api.hexschool.io/api/geehsu/products';
  //   // API 伺服器路徑
  //   // 所申請的 API Path
  //   console.log(process.env.APIPATH, process.env.CUSTOMPATH);
  //   this.$http.get(api).then((response) =&gt; {
  //     console.log(response.data)
  //   });
  // },
}
&lt;/script&gt;

&lt;style lang="scss"&gt;
@import "./assets/all";
&lt;/style&gt;
</code></pre>



<pre class="wp-block-code"><code>// 7.~10. Products.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;div class="text-right"&gt;
      &lt;button class="btn btn-primary mt-4"&gt;建立新的產品&lt;/button&gt;
    &lt;/div&gt;
    &lt;table class="table mt-4"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th width="120"&gt;分類&lt;/th&gt;
          &lt;th&gt;產品名稱&lt;/th&gt;
          &lt;th width="120"&gt;原價&lt;/th&gt;
          &lt;th width="120"&gt;售價&lt;/th&gt;
          &lt;th width="100"&gt;是否啟用&lt;/th&gt;
          &lt;th width="80"&gt;編輯&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr v-for="(item) in products" :key="item.id"&gt;
          &lt;td&gt;{{ item.category }}&lt;/td&gt;
          &lt;td&gt;{{ item.title }}&lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.origin_price }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price }}
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span v-if="item.is_enabled" class="text-success"&gt;啟用&lt;/span&gt;
            &lt;span v-else&gt;未啟用&lt;/span&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;button class="btn btn-outline-primary btn-sm"&gt;編輯&lt;/button&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
    };
  },
  methods: {
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products`;
      const vm = this;
      console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http.get(api).then((response) =&gt; {
        console.log(response.data);
        vm.products = response.data.products;
      });
    },
  },
  created() {
    this.getProducts();
  }
};
&lt;/script&gt;</code></pre>



<p><strong>注意：管理者取得產品列表應為<br>/api/:api_path/admin/products<br><br>如缺少 admin 這段為用戶使用的</strong><br><br>指的是因為目前網頁為後台的產品列表網頁，與前台是不一樣的所以要加上 admin，修改後如下</p>



<pre class="wp-block-code"><code>// 5. Products.vue
${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products</code></pre>



<p>加上 admin 之後產生的錯誤，需要在 main.js 加上以下語法</p>



<pre class="wp-block-code"><code>// main.js
// 前端跨域設定
axios.defaults.withCredentials = true;</code></pre>



<p><a href="https://paper.dropbox.com/doc/Vue-API-28OrjdvBouPMjspZUM7h7" target="_blank" rel="noreferrer noopener">Vue API 課程補充說明</a></p>



<h3>Vue 中運用 Bootstrap&nbsp;及 jQuery</h3>



<p>操作與講解</p>



<ol><li>這個範例我們打開之後，按下新增或者編輯都會跳出一個 Modal，這個 Modal 是 Bootstrap 所提供的，所以現在我們必須載入 Bootstrap 的套件，我們先回到我們的專案裡面來，要載入 Bootstrap 套件的方式，我們可以在 main.js 就是我們進入點的地方 import Bootstrap。那這裡也可以跟大家介紹一下，一般來說我們在載入套件的時候，上面這裡會載入 npm 套件內容，下面的話就是自定義的內容，這個時候我們來存檔。存檔之後畫面跳出錯誤，因為他沒有 jQuery，終端機的地方跳出你可以安裝 jquery、popper.js，這個原因是因為 Bootstrap 它必需仰賴 jquery 以及 popper 才能正確的運行。現在我們可以把這兩個套件給裝進來，安裝需要一點時間，這裡就先加速跳過，安裝完成之後，我們在 npm run dev 的方式將它啟用，啟用之後，我們回到這個畫面上 (這裡可能會需要重新登入取得資料)，重新整理它就不會再跳錯了。</li><li>接下來我們就可以加入 Bootstrap JavaScript 元件，我們先切換到 Bootstrap 官網的頁面，我們在 Bootstrap 的文件 Documentation 下方我們可以找到 Modal 的頁面，Modal 在這個部分，打開之後它這裡就有提供範例，如果我們要使用 Modal 的話，一般來說我們會使用一個按鈕，按鈕的部分加上 data-toggle=”modal”，後面再加上 data-target 然後指定一個 id，id 指向的是 Modal 所開啟的那個模板，所以這裡有個 exampleModal 對應的就是上面 data-target 的 id，這個樣子就可以把 Modal 打開，所以我們現在就可以試著把這個 Modal 把它加到我們頁面上試試看。把 data-toggle=”modal” 跟後面的 id 先把它複製起來，然後回到我們 Products.vue 的頁面，我們在建立新產品的部分，把這段貼上來，然後修改成 #productModal。接下來我們可以把下面的模板內容把它複製下來，下面的 Modal 把它複製下來，一樣回到我們的 Products.vue 頁面上，貼在 &lt;table&gt; 的後方，那這個是我們的模板，id 我們把它換成 productModal ，然後儲存。儲存之後來試試看能不能正確的打開，這樣是可以打開沒有錯誤，其他操作也是一模一樣。</li><li>但是這裡要跟大家介紹的是另外一種開啟的模式，現在我們再回到 Bootstrap 官網文件的頁面，我們在開啟 Modal 的時候，我們按下去它是立即的打開，但有些時候我們會稍做處理，比如說我們可以從遠端取到資料，確定有取到之後，才將這個 Modal 打開，那這個時候我們所有的開啟 Modal 的行為是由我們 Vue.js 的 Methods 去做決定的。所以在這個地方我們就可以試著把它改成用 Vue.js 的方式去開啟 Bootstrap 的 Modal。我們接下來在 Bootstrap 的文件下方 Usage 裡面有一個 Methods，然後有一個 .modal(‘show’)，用這個方式我們就可以將 Bootstrap 的 Modal 打開。現在我們試著在 methods 的下方加上一個 openModal 的一個行為，這個行為我們會將剛剛所定義的 #productModal 把它打開，然後這個時候它會出現另外一個錯誤，我們存檔試試看，它會說這裡有一個未定義的變數，當你有使用 ESLint 的時候會跳出這樣的錯誤，這裡它會跳出一個錯誤、一個紅字，就是說這個 $ 是未定義的，因為現在在這個元件裡面它並不認得這個 $ 字號，比較偷懶的方式，如果你有使用 ESLint 的話，可以在 &lt;script&gt; 的 export default 上方加上一個註解，然後寫上 global $ ( /* global $ */ )，回到這裡這個 $ 就不會出現錯誤。</li><li>現在就算它沒有跳錯，它可能還是無法進行，那我們在把 openModal 加到上面這裡，就是我們原本是使用 data-toggle、data-target 的方式，把它替換成 Vue 的方式 @click=”openModal”，我們來試試看這一段能不能正確的運行，重新整理一下，然後按下建立新的產品這個按鈕，它沒有打開。我們按一下檢查，看一下 Console ，它一樣跳出 jquery 就是這個 $ is not defined，原因是這個元件內它並認得 jquery 這個元件，我們只有把它載入到這個進入點，但是這個進入點所載入的是 Bootstrap，jquery 只是它的相依套件而已。</li><li>如果實際上我們要運行 jquery 的話，我們必需在這個元件裡面注入，把剛剛的 global $ 註解拿掉，使用 import $ from ‘jquery’;，然後存檔，這個時候重新整理，按下建立新的產品，它就可以正確的打開，這種透過 Methods 的方式來開啟，我們就可以決定這個 Modal 是在何種情況下才打開，它可以在按下按鈕之後，等 AJAX 完成然後再跳出這個 Modal，或者是在任何的情形下決定它開啟的時間。</li><li>試著把 jquery 以及 Bootstrap 的 Modal 加進來。</li></ol>



<pre class="wp-block-code"><code>// 1. main.js
import 'bootstrap'</code></pre>



<pre class="wp-block-code"><code>// 1. terminal
To install them, you can run: npm install --save jquery popper.js</code></pre>



<pre class="wp-block-code"><code>// 5. Products.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;div class="text-right mt-4"&gt;
      &lt;button class="btn btn-primary" @click="openModal"&gt;建立新的產品&lt;/button&gt;
    &lt;/div&gt;
    &lt;table class="table mt-4"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th width="120"&gt;分類&lt;/th&gt;
          &lt;th&gt;產品名稱&lt;/th&gt;
          &lt;th width="120"&gt;原價&lt;/th&gt;
          &lt;th width="120"&gt;售價&lt;/th&gt;
          &lt;th width="100"&gt;是否啟用&lt;/th&gt;
          &lt;th width="80"&gt;編輯&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr v-for="(item) in products" :key="item.id"&gt;
          &lt;td&gt;{{ item.category }}&lt;/td&gt;
          &lt;td&gt;{{ item.title }}&lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.origin_price }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price }}
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span v-if="item.is_enabled" class="text-success"&gt;啟用&lt;/span&gt;
            &lt;span v-else&gt;未啟用&lt;/span&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;button class="btn btn-outline-primary btn-sm"&gt;編輯&lt;/button&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;!-- Modal --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;Modal title&lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            ...
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-secondary" data-dismiss="modal"&gt;Close&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary"&gt;Save changes&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery'

// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
    };
  },
  methods: {
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products`;
      const vm = this;
      // console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http.get(api).then((response) =&gt; {
        // console.log(response.data);
        vm.products = response.data.products;
      });
    },
    openModal() {
      $('#productModal').modal('show');
    },
  },
  created() {
    this.getProducts();
  }
};
&lt;/script&gt;</code></pre>



<h3>產品的新增修改</h3>



<p>操作與講解</p>



<ol><li>接下來我們要新增產品，我們先看一下範例頁面，這裡我們按下建立新的產品，建立新的產品的時候我們會發現這個欄位還蠻多的，所以等下會提供現成的模板給大家，這邊就不需要重新製作，不過這邊欄位很多，你就會想說那這些欄位該怎麼樣去做對應，我們一般來說在製作時，這欄位其實都已經決定好，像這裡有標題、分類、原價、售價、單位名稱、圖片名稱、描述、內容、是否啟用還有圖片的網址，那這個圖片的網址可以使用現成的網址或者稍後介紹怎麼上傳圖片，上傳圖片後就會取得新的網址，一樣可以把它取代進來，現在我們就開始來製作。</li><li>我們回到我們的頁面裡面來，現在畫面上打開這個建立新的產品的時候，這裡就會跳出一個 Modal，那這個 Modal 是 Bootstrap 預設的，那我們把它換成產品的 Modal，現在這裡有一個產品的 Modal，到時候一樣會提供給大家，所以不需要自己去打，然後把這個預設的 Modal 把它替換掉，稍微做一下排版，存檔之後來試一下，接下來我們要新增產品，我們先看一下範例頁面，這裡我們按下建立新的產品，建立新的產品的時候我們會發現這個欄位還蠻多的，所以等下會提供現成的模板給大家，這邊就不需要重新製作，不過這邊欄位很多，你就會想說那這些欄位該怎麼樣去做對應，我們一般來說在製作時，這欄位其實都已經決定好，像這裡有標題、分類、原價、售價、單位名稱、圖片名稱、描述、內容、是否啟用還有圖片的網址，那這個圖片的網址可以使用現成的網址或者稍後介紹怎麼上傳圖片，上傳圖片後就會取得新的網址，一樣可以把它取代進來，現在我們就開始來製作。</li><li>我們回到我們的頁面裡面來，現在畫面上打開這個建立新的產品的時候，這裡就會跳出一個 Modal，那這個 Modal 是 Bootstrap 預設的，那我們把它換成產品的 Modal，現在這裡有一個產品的 Modal，到時候一樣會提供給大家，所以不需要自己去打，然後把這個預設的 Modal 把它替換掉，稍微做一下排版，存檔之後來試一下，按下建立新的產品的時候，這個 Modal 其實就是對應這個，是一模一樣的。然後接下來，我們在下方 data 的部分再新增一個 tempProduct，那麼這個 tempProduct 其實就是我們等下要送出的欄位內容，欄位的名稱其實就是對應我們剛剛 API 的內容，有標題、分類……等等的，在這裡就試著一一的將 tempProduct 先把它加到這個 Modal 上面來，那麼這裡就加速跳過，是否啟用這個地方要特別注意一下，我們的 tempProduct 它一樣是使用 is_enabled，這欄位是這樣子，我們的 v-model 一樣是對應 is_enabled，這個 is_enabled，但是它的值是0 跟 1，如果 0 的話是暫停使用、1 的話是啟用，所以我們要修改它的 true value 和 false value，true value 就是當它是啟用狀態的時候，我們要給它 1，但它如果是 false value 的時候，我們則要給它 0，這裡要特別注意一下。然後最後將確認這個地方，我們再加上 @click=”updateProduct”，然後存檔。所以在下方我們必需在 methods 的地方再新增一個 method 叫做 updateProduct()。</li><li>因此這個部分再稍微講解一下我們的流程。我們剛剛直接將現成的 template 直接貼進來，那我們打開畫面之後，這個就是我們剛剛建立的模板，這個模板已經綁定我們的 tempProduct ，它所有的欄位都已經綁定上來，接下來我們會透過 post 方式將這個 tempProduct 新增到資料庫裡面去，接下來我們會在 updateProduct 的地方再做類似的事情，我們會發現這個 API 基本上都是差不多的，我們會同樣的行為這樣一直做。然後 API 的路徑的商品建立是 admin/product，然後它的行為、這個方法是 post，要特別注意，現在是 post。那我們把它改成 admin/product，接下來我們把這路徑貼進來之後，再把方法 (get) 改成 post， 然後我們的資料結構要特別注意一下，這是我們第一個 post 行為，所以 post 的參數必需把 vm.tempProduct 加進來，但是加進來的時候，你要注意它所送出的參數，它是一個物件，然後包著 data，然後裡面才包著我們欄位的內容，所以我們不能直接將這個 vm.tempProdcut 這樣送出，這樣會出錯。所以我們必需將它用物件包起來，{ data: vm.tempProduct }，然後存檔。存檔之後我們再來看一下回傳的結果是怎麼樣，後面這行記得先拿掉 ( 先把 vm.products = response.data.products; 註解起來 )，不然你會把 response 的資料直接再寫進 vm.products 裡面，先來存檔。</li><li>這個時候我們來新增產品，新增產品之後，我們先打開 Console 來看一下，不過按下確認前，要特別注意按一下就好不要一直按，因為我們現在沒有做很多驗證，現在按下去，按下去之後它會跳出一個訊息叫做已建立商品，現在我們再重新整理一次，這個時候會出現一個新增產品，這是我們剛剛所新增的內容，我們就可以透過剛剛的訊息來做些事情</li><li>如果 response.data.success 新增成功的話，我們就把這個 Modal 給關起來，那麼關閉的方式，我們會使用 Bootstrap 文件的 .modal(‘hide’)，那我們就把它新增進來，並且再重新取得一次遠端的資料，這裡有個 getProducts()，那麼我們再重新取得一次遠端的資料 vm.getProducts()，重新再取得一次。接下來如果是失敗的話，else 那麼我們在這個部分就可以再補一個 console.log 說 ‘新增失敗’。如果現在成功的話，它就會將 Modal 關掉並且重新取得一次遠端的產品內容，那麼如果是失敗的話，它做的事情差不多，但是它會有個錯誤訊息。存檔之後，我們再進行一次相同的流程，新增產品 2、按下確認，按下確認之後過一會就會關掉並且重新整理之後把新增產品 2 給加進來。</li><li>現在我們已經可以新增產品，那我們再看另外一個範例，這是先前做的，先前做的範例我們可以看到新增產品的模板長這樣，那麼編輯的時候模板長這樣，但其實你會發現這兩個模板幾乎一模一樣，所以它其實可以用同一個模板做兩件事情。那我們先回到程式碼這個地方，在這個地方我們就要稍做一點點的調整，調整的地方是說我們的 openModal() 的時候，我們在決定這份資料它是新的還是舊的，所以它可以傳入參數，先傳入 isNew 或者傳入它的 item，那在這裡我們就可以新增 isNew 跟 item，那 item 也可以透過編輯的方式，按下這個編輯的時候就順便傳進來，上面的 data() 我們再新增一個 isNew 的欄位，目前我們先給它一個 false 的值，下面我們再回到 openModal 這個地方，我們就可以使用判斷式 if 如果它是新增的話、時候，this.tempProduct 就是一個空的物件，並且 this.isNew 還會等於 true，它會是新的，如果 isNew 是 false 的情況下，那麼則是相反，它就不是新的，this.isNew 等於 false，然後 tempProduct 會等於 item。不過在這裡有跟大家講一件小事情，如果你直接用 tempProduct 等於 item 的時候，它因為物件傳參考的特性，這兩個值會一模一樣，所以在這裡會使用 Object.assign 的方式，那麼用 Object.assign 是 ES6 的方法，用這種寫法可以將這個 item 的值寫到一個空的物件裡面來，然後並且可以避免這個 tempProduct 與 item 有參考的特性。接下來我們將這個 $(‘#productModal’).modal(‘show’); 往後放。</li><li>Modal 打開之後，我們 updateProduct() 這裡的行為也會做些調整，我們可以再看一下 API 文件的部分，API 的部分我們如果是商品建立會使用 post，然後 API 路徑是這個，但如果我們的修改產品的時候，它在 API 路徑的 admin/product/ 後面會再加上一個 id，並且它所使用的方法是 put，所以在這裡也要稍微做一下下調整。加的方式我們可以在這裡加入一個判斷式 if (vm.isNew)，我們剛有把 isNew 存到 Vue 的 data 裡面，所以這個 vm.isNew 就是從上面所傳來的，它到底是不是新的。假設它不是新的時候，我們就來改它的 api，把 const api 改成 let api，然後 api 會等於另外一個路徑，我們先把這一段複製過來，然後並且把 admin/product 把它傳過來，然後後面必需帶上 id，那這個 id 是 tempProduct 的 id，是 vm.tempProduct.id。那麼除了 api 不同之外，這個 $http 的行為也不一樣，剛有講到我們如果是新增的話，我們的行為是 post，但是如果是修改的話，我們會改用 put，所以在這裡我們會再新宣告一個變數，就是 httpMethod，我們預設是給它 post，httpMethod 我們可以把它放在這裡，我們用中括號的方式來選取它，並且如果它不是新的時候，把它修改為 put。</li><li>現在行為已經寫好了，我們在把這個行為綁定回去我們的畫面上，openModal 的地方我們把它移上來，建立新的產品的時候它必需傳入它是 true 的值。那如果是舊的話，這裡有一個編輯，我們再補上 @click=”openModal()”，但是它傳入的是 false (的值)，並且會把 item 也傳進去，我們再修整一下，然後存檔。</li><li>接下來我們來測試一下新增跟修改能不能正確的執行，現在這裡有新增產品 2，然後我們按一下編輯，把新增產品的 2 改成 3 、按下確認，現在新增產品可以變成 3，所以編輯是可以。那我們再新增一個新的產品，叫做如何使用 Vue Cli，然後一樣按下確認，這個時候它會跳出如何使用 Vue Cli，那麼在這個部分新增以及編輯都已經完成了。</li><li>那麼還缺少刪除商品的行為，有提供刪除的模板，在這個部分就自己練習。</li></ol>



<pre class="wp-block-code"><code>// Products.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;div class="text-right mt-4"&gt;
      &lt;button class="btn btn-primary" @click="openModal(true)"&gt;建立新的產品&lt;/button&gt;
    &lt;/div&gt;
    &lt;table class="table mt-4"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th width="120"&gt;分類&lt;/th&gt;
          &lt;th&gt;產品名稱&lt;/th&gt;
          &lt;th width="120"&gt;原價&lt;/th&gt;
          &lt;th width="120"&gt;售價&lt;/th&gt;
          &lt;th width="100"&gt;是否啟用&lt;/th&gt;
          &lt;th width="80"&gt;編輯&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr v-for="(item) in products" :key="item.id"&gt;
          &lt;td&gt;{{ item.category }}&lt;/td&gt;
          &lt;td&gt;{{ item.title }}&lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.origin_price }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price }}
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span v-if="item.is_enabled" class="text-success"&gt;啟用&lt;/span&gt;
            &lt;span v-else&gt;未啟用&lt;/span&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;button class="btn btn-outline-primary btn-sm" @click="openModal(false, item)"&gt;編輯&lt;/button&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;!-- Modal --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog modal-lg" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-dark text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;新增產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;div class="row"&gt;
              &lt;div class="col-sm-4"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="image"&gt;輸入圖片網址&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="image"
                    v-model="tempProduct.imageUrl"
                    placeholder="請輸入圖片連結"&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="customFile"&gt;或 上傳圖片
                    &lt;i class="fas fa-spinner fa-spin"&gt;&lt;/i&gt;
                  &lt;/label&gt;
                  &lt;input type="file" id="customFile" class="form-control"
                    ref="files"&gt;
                &lt;/div&gt;
                &lt;img img="https://images.unsplash.com/photo-1483985988355-763728e1935b?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=828346ed697837ce808cae68d3ddc3cf&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80"
                  class="img-fluid" :src="tempProduct.imageUrl" alt=""&gt;
              &lt;/div&gt;
              &lt;div class="col-sm-8"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="title"&gt;標題&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="title"
                    v-model="tempProduct.title"
                    placeholder="請輸入標題"&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="category"&gt;分類&lt;/label&gt;
                    &lt;input type="text" class="form-control" id="category"
                      v-model="tempProduct.category"
                      placeholder="請輸入分類"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;單位&lt;/label&gt;
                    &lt;input type="unit" class="form-control" id="unit"
                      v-model="tempProduct.unit"
                      placeholder="請輸入單位"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                  &lt;label for="origin_price"&gt;原價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="origin_price"
                      v-model="tempProduct.origin_price"
                      placeholder="請輸入原價"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;售價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="price"
                      v-model="tempProduct.price"
                      placeholder="請輸入售價"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;hr&gt;

                &lt;div class="form-group"&gt;
                  &lt;label for="description"&gt;產品描述&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="description"
                    v-model="tempProduct.description"
                    placeholder="請輸入產品描述"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="content"&gt;說明內容&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="content"
                    v-model="tempProduct.content"
                    placeholder="請輸入產品說明內容"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;div class="form-check"&gt;
                    &lt;input class="form-check-input" type="checkbox"
                      v-model="tempProduct.is_enabled"
                      :true-value="1"
                      :false-value="0"
                      id="is_enabled"&gt;
                    &lt;label class="form-check-label" for="is_enabled"&gt;
                      是否啟用
                    &lt;/label&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary" @click="updateProduct"&gt;確認&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery'

// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
      tempProduct: {},
      isNew: false,
    };
  },
  methods: {
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products`;
      const vm = this;
      // console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http.get(api).then((response) =&gt; {
        // console.log(response.data);
        vm.products = response.data.products;
      });
    },
    openModal(isNew, item) {
      if (isNew) {
        this.tempProduct = {};
        this.isNew = true;
      } else {
        this.tempProduct = Object.assign({}, item);
        this.isNew = false;
      }
      $('#productModal').modal('show');
    },
    updateProduct() {
      let api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product`;
      let httpMethod = 'post';
      const vm = this;
      if (!vm.isNew) {
        api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
        httpMethod = 'put';
      }
      console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http&#91;httpMethod](api, { data: vm.tempProduct }).then((response) =&gt; {
        console.log(response.data);
        // vm.products = response.data.products;
        if (response.data.success) {
          $('#productModal').modal('hide');
          vm.getProducts();
          console.log('新增失敗');
        }
      });
    },
  },
  created() {
    this.getProducts();
  }
};
&lt;/script&gt;</code></pre>



<h5>刪除產品的部分</h5>



<pre class="wp-block-code"><code>&lt;template&gt;
  &lt;div&gt;
    &lt;div class="text-right mt-4"&gt;
      &lt;button class="btn btn-primary" @click="openModal(true)"&gt;建立新的產品&lt;/button&gt;
    &lt;/div&gt;
    &lt;table class="table mt-4"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th width="120"&gt;分類&lt;/th&gt;
          &lt;th&gt;產品名稱&lt;/th&gt;
          &lt;th width="120"&gt;原價&lt;/th&gt;
          &lt;th width="120"&gt;售價&lt;/th&gt;
          &lt;th width="100"&gt;是否啟用&lt;/th&gt;
          &lt;th width="120"&gt;編輯&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr v-for="(item) in products" :key="item.id"&gt;
          &lt;td&gt;{{ item.category }}&lt;/td&gt;
          &lt;td&gt;{{ item.title }}&lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.origin_price }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price }}
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span v-if="item.is_enabled" class="text-success"&gt;啟用&lt;/span&gt;
            &lt;span v-else&gt;未啟用&lt;/span&gt;
          &lt;/td&gt;
          &lt;td&gt;
              &lt;button class="btn btn-outline-primary btn-sm" @click="openModal(false, item)"&gt;編輯&lt;/button&gt;
              &lt;button class="btn btn-outline-danger btn-sm" @click="openDelProductModal(item)"&gt;刪除&lt;/button&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;!-- Modal --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog modal-lg" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-dark text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;新增產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;div class="row"&gt;
              &lt;div class="col-sm-4"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="image"&gt;輸入圖片網址&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="image"
                    v-model="tempProduct.imageUrl"
                    placeholder="請輸入圖片連結"&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="customFile"&gt;或 上傳圖片
                    &lt;i class="fas fa-spinner fa-spin"&gt;&lt;/i&gt;
                  &lt;/label&gt;
                  &lt;input type="file" id="customFile" class="form-control"
                    ref="files"&gt;
                &lt;/div&gt;
                &lt;img img="https://images.unsplash.com/photo-1483985988355-763728e1935b?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=828346ed697837ce808cae68d3ddc3cf&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80"
                  class="img-fluid" :src="tempProduct.imageUrl" alt=""&gt;
              &lt;/div&gt;
              &lt;div class="col-sm-8"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="title"&gt;標題&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="title"
                    v-model="tempProduct.title"
                    placeholder="請輸入標題"&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="category"&gt;分類&lt;/label&gt;
                    &lt;input type="text" class="form-control" id="category"
                      v-model="tempProduct.category"
                      placeholder="請輸入分類"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;單位&lt;/label&gt;
                    &lt;input type="unit" class="form-control" id="unit"
                      v-model="tempProduct.unit"
                      placeholder="請輸入單位"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                  &lt;label for="origin_price"&gt;原價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="origin_price"
                      v-model="tempProduct.origin_price"
                      placeholder="請輸入原價"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;售價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="price"
                      v-model="tempProduct.price"
                      placeholder="請輸入售價"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;hr&gt;

                &lt;div class="form-group"&gt;
                  &lt;label for="description"&gt;產品描述&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="description"
                    v-model="tempProduct.description"
                    placeholder="請輸入產品描述"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="content"&gt;說明內容&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="content"
                    v-model="tempProduct.content"
                    placeholder="請輸入產品說明內容"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;div class="form-check"&gt;
                    &lt;input class="form-check-input" type="checkbox"
                      v-model="tempProduct.is_enabled"
                      :true-value="1"
                      :false-value="0"
                      id="is_enabled"&gt;
                    &lt;label class="form-check-label" for="is_enabled"&gt;
                      是否啟用
                    &lt;/label&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary" @click="updateProduct"&gt;確認&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="modal fade" id="delProductModal" tabindex="-1" role="dialog"
  aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-danger text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;刪除產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            是否刪除 &lt;strong class="text-danger"&gt;{{ tempProduct.title }}&lt;/strong&gt; 商品(刪除後將無法恢復)。
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-danger" @click="delProduct"&gt;確認刪除&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery'

// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
      tempProduct: {},
      isNew: false,
    };
  },
  methods: {
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products`;
      const vm = this;
      // console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http.get(api).then((response) =&gt; {
        // console.log(response.data);
        vm.products = response.data.products;
      });
    },
    openModal(isNew, item) {
      if (isNew) {
        this.tempProduct = {};
        this.isNew = true;
      } else {
        this.tempProduct = Object.assign({}, item);
        this.isNew = false;
      }
      $('#productModal').modal('show');
    },
    updateProduct() {
      let api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product`;
      let httpMethod = 'post';
      const vm = this;
      if (!vm.isNew) {
        api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
        httpMethod = 'put';
      }
      console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http&#91;httpMethod](api, { data: vm.tempProduct }).then((response) =&gt; {
        console.log(response.data);
        // vm.products = response.data.products;
        if (response.data.success) {
          $('#productModal').modal('hide');
          vm.getProducts();
          console.log('新增失敗');
        }
      });
    },
    openDelProductModal(item) {
      const vm = this;
      $('#delProductModal').modal('show');
      vm.tempProduct = Object.assign({}, item);
    },
    delProduct() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
      this.$http.delete(url).then((response) =&gt; {
        console.log(response, vm.tempProduct);
        $('#delProductModal').modal('hide');
        this.getProducts();
      });
    },
  },
  created() {
    this.getProducts();
  }
};
&lt;/script&gt;</code></pre>



<h3>串接上傳檔案&nbsp;API</h3>



<p>資源：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/FormData" target="_blank" rel="noreferrer noopener">Form Data 說明</a></p>



<p>操作與講解</p>



<ol><li>這裡要來介紹上傳圖片，不過上傳圖片跟先前幾個章節有點不一樣。這個 api 裡面還多了一個上傳表單的一個範例，原因是因為上傳這個行為跟其他的 api 不太一樣，上傳這個行為是必需使用 FormData() 來做傳送的。所以在這裡面它有特別標示我們是需要使用 FormData() 的，然後如果上傳成功的話，它就會回傳圖片的連結，它並沒有要求送出的格式，因為送出的格式就是 FormData()，那當然回傳的格式錯誤，這裡會描述說你是檔案格式錯誤還是檔案太大。</li><li>我們現在按下新增新產品的時候，這裡有一個欄位就是上傳圖片，在上傳圖片的這個欄位這個地方，我們對應的是這裡，有個 &lt;input&gt; ，現在我們要增加一個上傳圖片的一個行為。所以我們這裡就可以使用 @change 當這個欄位有變更的時候就上傳圖片，這裡我們就新增 uploadFile 的行為，然後存檔。</li><li>我們到下面的 methods，那 methods 的地方我們就新增一個上傳的(方法)，我們把它加在後面，那麼檔案在哪裡，我們可以先使用 console.log 來看一下，我們直接使用 console.log(this);，然後存檔、重新整理。現在上傳圖片沒有任何東西，我們這個時候可以直接拖曳一張圖片到選擇檔案這個地方，選擇之後我們再把 Console 打開，Console 打開之後下面有個 VueComponent，這個是我們剛剛透過 uploadFile 所找到的，那這個 uploadFile 下面我們就可以找到有一個叫做 $refs，那這個所指向的就是目前所看到的這個元素，裡面就可以找到我們所夾帶的檔案，在 $refs 然後 files 下面還可以再找到一個 files，在這裡有一個 files，那基本上它是一個陣列，所以要特別注意，我們現在要上傳的是它的第 0 個物件，所以我們現在就可以把這個檔案試著上傳看看。</li><li>接下來我們就定義要上傳的檔案，const uploadFile 我們加個 ed (uploadedFile) 已經上傳的檔案在 this.$refs.files.files，記得這個 files 有兩層，第一層是外面的這個 files、第二層才是裡面的這個 files 這個陣列，那我們要取的基本上是第 0 個這一個。接下來我們在 const vm = this;，這已經是很常見的行為了，然後在這一個部分，我們會再宣告一個叫做 formData 的一個新的物件，這個是 Web Api，new FormData();。這個 formData 要做什麼，我們先把 Web Api 打開一下，我們可以先宣告一個 FormData() 的一個物件，那這個物件跟我們傳統用 AJAX 不太一樣，因為我們目前這個任務必需使用 FormData() 的方式去送，所以在這裡我們就可以使用 FormData() 來模擬傳統表單送出的形式，那麼我們在這裡宣告一個新的 FormData 之後，我們可以使用 append 的方式，將欄位新增進去，所以在這裡我們就可以把欄位新增進去。formData.append() 將欄位新增進來，那我們目前要用的欄位是 “file-to-upload” 這個欄位，然後我們要把這個檔案給上傳上去，接下來我們要定義路徑 const url ，路徑都對應好之後，我們在上傳前所做的行為也跟先前不一樣，這裡我們直接寫 this.$http.post()，那 post 之後，前面是路徑 url，後面是要傳送的內容，那麼就是 formData 的本身，最後我們這裡會再帶上一個物件，這個物件是因為我們要將格式改成 formData 的格式，所以在這裡我們要做一些調整，我們會調整 headers，然後 ‘Content-type’，我們要將表單的形式改成 formData，那後面這段就照樣複製過來 (‘multipart/form-data’)，所以<strong>這段流程跟先前都不太一樣，所以要特別記得</strong>。我們會先把檔案取出來，然後並且建立一個 formData 的物件，將這個 formData 加進去之後再把它送出，所以跟先前不太一樣，</li><li>接下來我們看一下有沒有成功的上傳。存檔之後，我們來試一次看看、重新整理，按下編輯，我們一樣把一個檔案丟上來試試看，丟一會之後，這裡回傳 success，所以我們現在有成功上傳了，那麼 success 之後它有回傳一個路徑，這張就是我們剛上傳的圖片路徑，我們現在把這張圖片打開看一下，這個路徑非常的長，這個路徑是有包含授權的，所以它的路徑比較長，要有完整的路徑才能把這張圖打開，那現在我們圖片上傳已經完成了。</li><li>接下來我們必需把這張圖片的路徑存下來，這張圖片路徑我們會對應到 tempProduct 的 imageUrl 裡面，那現在我們來做一下對應，如果 response.data.success 等於 true 的話，我們就把這張圖存起來。接下來我們來上傳測試一下，我們把一張圖片丟進來，丟進來之後這裡的圖片跟連結好像沒有帶上去，我們用 Vue 的開發者工具來看一下，看一下之後發現這個連結都有顯示，為什麼好像沒有出現。那麼我們一樣可以用 console.log 來看一下它到底有沒有正確的寫入，我把它貼進來 ( console.log(vm.tempProduct); )、(把 const vm = this; 註解移除)、存檔、重新整理。重新整理之後，目前看起來是很正常，我們再把這個圖片丟進來，那麼這個物件你會看到它的 id、num 還有 title 都是正常的，但是這個 imageUrl 它其實並不正常，它並沒有包含 getter 以及 setter，所以它現在的 imageUrl 並沒有雙向綁定，這個時候我們可以使用 Vue 的 vm.$set 的方式將這個欄位強制寫進去，那這個欄位在 vm.tempProduct 裡面，然後它的欄位是 ‘imageUrl’，並且將這個路徑強制寫入 ( response.data.imageUrl )，前面這兩行就不需要了 (註解起來)。那強制寫入之後，就可以確保它具有雙向綁定的功能，現在我們再把這張圖片新增一次試試看，新增上來之後，上面的網址就會自動帶上，那下面也會自動帶上我們剛剛所上傳的圖片，接下來我們按下確認，按下確認之後這張圖片的路徑就會被存下來。我們下次打開的時候，這張圖片就還會在。重新整理再來檢查一次，這張圖片並沒有被替換。這裡就介紹上傳圖片的方法。</li></ol>



<pre class="wp-block-code"><code>// 2. Products.vue
// 上傳圖片欄位的 &lt;input&gt;
&lt;input type="file" id="customFile" class="form-control" rel="files" @change="uploadFile"&gt;</code></pre>



<pre class="wp-block-code"><code>// 4. Products.vue
    uploadFile() {
      console.log(this);
      const uploadedFile = this.$refs.files.files&#91;0];
      // const vm = this;
      const formData = new formData();
      formData.append('file-to-upload', uploadedFile);
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/upload`;
      this.$http.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
      }).then((response) =&gt; {
        console.log(response.data);
      });
    },</code></pre>



<pre class="wp-block-code"><code>// 6. Products.vue
    uploadFile() {
      console.log(this);
      const uploadedFile = this.$refs.files.files&#91;0];
      const vm = this;
      const formData = new FormData();
      formData.append('file-to-upload', uploadedFile);
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/upload`;
      this.$http.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }).then((response) =&gt; {
        console.log(response.data);
        if (response.data.success) {
          // vm.tempProduct.imageUrl = response.data.imageUrl;
          // console.log(vm.tempProduct);
          vm.$set(vm.tempProduct, 'imageUrl', response.data.imageUrl);
        }
      });
    },</code></pre>



<pre class="wp-block-code"><code>// Products.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;div class="text-right mt-4"&gt;
      &lt;button class="btn btn-primary" @click="openModal(true)"&gt;建立新的產品&lt;/button&gt;
    &lt;/div&gt;
    &lt;table class="table mt-4"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th width="120"&gt;分類&lt;/th&gt;
          &lt;th&gt;產品名稱&lt;/th&gt;
          &lt;th width="120"&gt;原價&lt;/th&gt;
          &lt;th width="120"&gt;售價&lt;/th&gt;
          &lt;th width="100"&gt;是否啟用&lt;/th&gt;
          &lt;th width="120"&gt;編輯&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr v-for="(item) in products" :key="item.id"&gt;
          &lt;td&gt;{{ item.category }}&lt;/td&gt;
          &lt;td&gt;{{ item.title }}&lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.origin_price }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price }}
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span v-if="item.is_enabled" class="text-success"&gt;啟用&lt;/span&gt;
            &lt;span v-else&gt;未啟用&lt;/span&gt;
          &lt;/td&gt;
          &lt;td&gt;
              &lt;button class="btn btn-outline-primary btn-sm" @click="openModal(false, item)"&gt;編輯&lt;/button&gt;
              &lt;button class="btn btn-outline-danger btn-sm" @click="openDelProductModal(item)"&gt;刪除&lt;/button&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;!-- Modal --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog modal-lg" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-dark text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;新增產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;div class="row"&gt;
              &lt;div class="col-sm-4"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="image"&gt;輸入圖片網址&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="image"
                    v-model="tempProduct.imageUrl"
                    placeholder="請輸入圖片連結"&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="customFile"&gt;或 上傳圖片
                    &lt;i class="fas fa-spinner fa-spin"&gt;&lt;/i&gt;
                  &lt;/label&gt;
                  &lt;input type="file" id="customFile" class="form-control"
                    ref="files" @change="uploadFile"&gt;
                &lt;/div&gt;
                &lt;img img="https://images.unsplash.com/photo-1483985988355-763728e1935b?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=828346ed697837ce808cae68d3ddc3cf&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80"
                  class="img-fluid" :src="tempProduct.imageUrl" alt=""&gt;
              &lt;/div&gt;
              &lt;div class="col-sm-8"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="title"&gt;標題&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="title"
                    v-model="tempProduct.title"
                    placeholder="請輸入標題"&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="category"&gt;分類&lt;/label&gt;
                    &lt;input type="text" class="form-control" id="category"
                      v-model="tempProduct.category"
                      placeholder="請輸入分類"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;單位&lt;/label&gt;
                    &lt;input type="unit" class="form-control" id="unit"
                      v-model="tempProduct.unit"
                      placeholder="請輸入單位"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                  &lt;label for="origin_price"&gt;原價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="origin_price"
                      v-model="tempProduct.origin_price"
                      placeholder="請輸入原價"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;售價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="price"
                      v-model="tempProduct.price"
                      placeholder="請輸入售價"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;hr&gt;

                &lt;div class="form-group"&gt;
                  &lt;label for="description"&gt;產品描述&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="description"
                    v-model="tempProduct.description"
                    placeholder="請輸入產品描述"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="content"&gt;說明內容&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="content"
                    v-model="tempProduct.content"
                    placeholder="請輸入產品說明內容"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;div class="form-check"&gt;
                    &lt;input class="form-check-input" type="checkbox"
                      v-model="tempProduct.is_enabled"
                      :true-value="1"
                      :false-value="0"
                      id="is_enabled"&gt;
                    &lt;label class="form-check-label" for="is_enabled"&gt;
                      是否啟用
                    &lt;/label&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary" @click="updateProduct"&gt;確認&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="modal fade" id="delProductModal" tabindex="-1" role="dialog"
  aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-danger text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;刪除產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            是否刪除 &lt;strong class="text-danger"&gt;{{ tempProduct.title }}&lt;/strong&gt; 商品(刪除後將無法恢復)。
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-danger" @click="delProduct"&gt;確認刪除&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery'

// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
      tempProduct: {},
      isNew: false,
    };
  },
  methods: {
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products`;
      const vm = this;
      // console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http.get(api).then((response) =&gt; {
        // console.log(response.data);
        vm.products = response.data.products;
      });
    },
    openModal(isNew, item) {
      if (isNew) {
        this.tempProduct = {};
        this.isNew = true;
      } else {
        this.tempProduct = Object.assign({}, item);
        this.isNew = false;
      }
      $('#productModal').modal('show');
    },
    updateProduct() {
      let api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product`;
      let httpMethod = 'post';
      const vm = this;
      if (!vm.isNew) {
        api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
        httpMethod = 'put';
      }
      console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http&#91;httpMethod](api, { data: vm.tempProduct }).then((response) =&gt; {
        console.log(response.data);
        // vm.products = response.data.products;
        if (response.data.success) {
          $('#productModal').modal('hide');
          vm.getProducts();
          console.log('新增失敗');
        }
      });
    },
    openDelProductModal(item) {
      const vm = this;
      $('#delProductModal').modal('show');
      vm.tempProduct = Object.assign({}, item);
    },
    delProduct() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
      this.$http.delete(url).then((response) =&gt; {
        console.log(response, vm.tempProduct);
        $('#delProductModal').modal('hide');
        this.getProducts();
      });
    },
    uploadFile() {
      console.log(this);
      const uploadedFile = this.$refs.files.files&#91;0];
      const vm = this;
      const formData = new FormData();
      formData.append('file-to-upload', uploadedFile);
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/upload`;
      this.$http.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }).then((response) =&gt; {
        console.log(response.data);
        if (response.data.success) {
          // vm.tempProduct.imageUrl = response.data.imageUrl;
          // console.log(vm.tempProduct);
          vm.$set(vm.tempProduct, 'imageUrl', response.data.imageUrl);
        }
      });
    },
  },
  created() {
    this.getProducts();
  }
};
&lt;/script&gt;</code></pre>



<h3>增加使用者體驗&nbsp;–&nbsp;讀取中效果製作</h3>



<p>資源：<a rel="noreferrer noopener" href="https://github.com/ankurk91/vue-loading-overlay" target="_blank">Vue loading Overlay</a></p>



<p>操作與講解</p>



<ol><li>到目前為止我們製作蠻多 AJAX 行為，但是都沒有做讀取中的效果，我們先來看範例的網頁，像這個範例中的網頁，我們如果重新整理這個頁面的時候，它會有個讀取中的效果，並且如果我們編輯檔案、然後上傳圖片的時候。我們來上傳一張圖片，我們把它放到選擇檔案的地方，上方會有一個讀取的 loading 效果，並且按下確認的時候，它背景也會再重新出現讀取的效果，所以這個章節就要跟大家講，我們怎麼製作讀取的效果，有局部或者是全部的讀取效果，該怎麼分開的執行。</li><li>回到我們的頁面上，在這個地方我們要做讀取效果會使用到兩個方式，一個是全畫面，全畫面的話我們會用這個套件 vue-loading-overlay 的一個套件，那這個套件非常的簡單，我們先來看一下它的範例 (&nbsp;<a rel="noreferrer noopener" href="https://jsfiddle.net/ankurk91/w8y8k5wo/" target="_blank">JSFiddle</a>&nbsp;)，如果按下這一個按鈕，它就會出現一個全螢幕的讀取效果。</li><li>現在我們就把這個讀取效果裝到我們的專案上面來，一樣把 Vue Cli 先把它停掉，然後我們來安裝，並且把相關的內容載入到 main.js 裡面來，這裡有安裝套件的方式，我們可以使用 import 然後 loading 然後 vue-loading-overlay 的方式，我們把它放在 VueAxios 的下面，另外它還有一支檔案要載入，是它的 CSS，那我們一樣把它給載進來，那這邊它有出現一個下底線，原因是因為它是一個元件，它是元件的話，它必需被啟用。那我們用全域的方式來啟用它，我們把它寫在這裡，Vue.component 如果我們這種方式的話，啟用元件它是全域的 方式，我們在每個個別元件就不需要重新的一個一個載進來，’Loading’，然後它就叫做 Loading 的元件，然後存檔。</li><li>回到 Products.vue 的頁面來，它的文件有寫到如果要啟用它的話，可以直接複製這一段，然後把它貼到我們的文件上方，記得我們不要貼在最外層，我們要貼在 &lt;div&gt; 的裡面一層，它裡面有很多設定，在這些設定可以不用，我們只要留下 :active-sync 這一段就可以了，然後這裡面會有一個 isLoading 的變數，那這個變數當它是 false 的時候，它就會停用，那如果是 true 的時候，它就會啟用，所以這個時候我們把 isLoading 這個變數先把它複製下來，到我們宣告變數的方式把它加進來，isLoading 然後給它 false 的值，所以它預設會是停下來的狀態，我們回到我們畫面，它是不會有任何變化的。接下來我們在 AJAX 行為上面來增加，加到 getProducts() 上面，然後我們把它加進來，vm.isLoading 等於 true，我們當啟用這個 getProducts() 都會先執行一次 isLoading，然後並且在 getProducts() 完成之後再把它改為 false，vm.isLoading 等於 false。那我們來重新啟動看看，像剛剛它就有一個讀取的效果。接下來我們按下編輯的頁面，按下確認的時候，它一樣會出現讀取的效果，那這是第一種加入讀取方式。</li><li>接下來我們來製作第二種讀取的效果，我們打開 FontAwesome 的頁面，然後我們到 How to Use 裡面來，這裡可以直接取用它的 CSS，當然它也有提供 npm 的安裝方式，不過使用 npm 的方式來安裝的話，它的字體檔也要安裝進來，手續會稍微複雜一些，所以在這裡示範的話就直接使用 cdn，先把這個網址複製起來之後，到 index.html 直接貼在我們的標題下方就可以了，然後儲存，那我們可以稍微把它排整齊一下、然後存檔。現在我們的專案裡面就可以使用 FontAwesome，接下來回到 Products.vue，我們在 Products.vue 裡面這個資料狀態再新增一個 status，然後它是一個物件，接下來我們就可以宣告一些變數是決定要使用 loading 的，像上傳的話就可以使用局部 loading 的方式來製作，fileUploading 它現在的讀取效果是 false，是不存在的。我們現在先把這個資料定義好之後，我們再到 FontAwesome 的頁面上面來，它的右下方有一個 Animating Icons，這邊有個選項我們把它按下去，按下去這邊就有讀取效果的一些 icon，像是我們用的話可以選擇第一個，那我們就把它複製下來，像是我們可以把它加在這個上傳圖片的旁邊，那提供的 template 裡面已經加上去，所以這個旁邊會有一個讀取的效果。</li><li>接下來我們把這個狀態，這個 fileUploading 的效果把它綁定到這個樣式上面來，現在它是會顯示的，那我們把它改成動態的方式 ( v-if=”status.fileUploading” )，fileUploading 它是 true 的話，它才會顯示，那相反如果它是 false 的話，它就不會顯示，所以我們加上這段之後它就不會顯示。那我們再到下面上傳的地方，這邊 uploadedFile 這個地方，我們再把剛剛這個變數加上去 ( vm.status.fileUploading = true )，按下去的時候它會是 true，當它 AJAX 結束之後，它會把它改成 false，把它改回來。那我們再回到畫面上，回到畫面上之後，我們按下這個編輯，它預設不會出現這個讀取的效果，但如果說我們上傳一張圖片的時候，它這個讀取的效果就會出現，一直到它讀取完之後，它才會停止。我們換一張圖試試看，像我們換一張圖它就會出現讀取效果，它上傳完之後，它才會把 loading 的效果給停掉。那這邊的話就介紹兩種 loading 的方式，兩種方式都可以試試看。</li></ol>



<pre class="wp-block-code"><code>// 3. vue-loading-overlay
npm install vue-loading-overlay --save</code></pre>



<pre class="wp-block-code"><code>// 3. main.js
import Loading from 'vue-loading-overlay';
import 'vue-loading-overlay/dist/vue-loading.min.css';

Vue.component('Loading', Loading)</code></pre>



<pre class="wp-block-code"><code>// 4. Products.vue
&lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;</code></pre>



<h5>出現載入 vue-loading-overlay 載入 CSS 錯誤</h5>



<pre class="wp-block-code"><code>// main.js
// 修正 import stylesheet
import 'vue-loading-overlay/dist/vue-loading.css'</code></pre>



<pre class="wp-block-code"><code>// 新增一個 postcss.config.js
module.exports = {
  plugins: {
    'autoprefixer': { browers: 'last 5 version' }
}</code></pre>



<pre class="wp-block-code"><code>// 5. index.html
    &lt;link rel="stylesheet" 
      href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" 
      integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" 
      crossorigin="anonymous"&gt;</code></pre>



<pre class="wp-block-code"><code>// Products.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="text-right mt-4"&gt;
      &lt;button class="btn btn-primary" @click="openModal(true)"&gt;建立新的產品&lt;/button&gt;
    &lt;/div&gt;
    &lt;table class="table mt-4"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th width="120"&gt;分類&lt;/th&gt;
          &lt;th&gt;產品名稱&lt;/th&gt;
          &lt;th width="120"&gt;原價&lt;/th&gt;
          &lt;th width="120"&gt;售價&lt;/th&gt;
          &lt;th width="100"&gt;是否啟用&lt;/th&gt;
          &lt;th width="120"&gt;編輯&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr v-for="(item) in products" :key="item.id"&gt;
          &lt;td&gt;{{ item.category }}&lt;/td&gt;
          &lt;td&gt;{{ item.title }}&lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.origin_price }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price }}
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span v-if="item.is_enabled" class="text-success"&gt;啟用&lt;/span&gt;
            &lt;span v-else&gt;未啟用&lt;/span&gt;
          &lt;/td&gt;
          &lt;td&gt;
              &lt;button class="btn btn-outline-primary btn-sm" @click="openModal(false, item)"&gt;編輯&lt;/button&gt;
              &lt;button class="btn btn-outline-danger btn-sm" @click="openDelProductModal(item)"&gt;刪除&lt;/button&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;!-- Modal --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog modal-lg" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-dark text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;新增產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;div class="row"&gt;
              &lt;div class="col-sm-4"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="image"&gt;輸入圖片網址&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="image"
                    v-model="tempProduct.imageUrl"
                    placeholder="請輸入圖片連結"&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="customFile"&gt;或 上傳圖片
                    &lt;i class="fas fa-spinner fa-spin" v-if="status.fileUploading"&gt;&lt;/i&gt;
                  &lt;/label&gt;
                  &lt;input type="file" id="customFile" class="form-control"
                    ref="files" @change="uploadFile"&gt;
                &lt;/div&gt;
                &lt;img img="https://images.unsplash.com/photo-1483985988355-763728e1935b?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=828346ed697837ce808cae68d3ddc3cf&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80"
                  class="img-fluid" :src="tempProduct.imageUrl" alt=""&gt;
              &lt;/div&gt;
              &lt;div class="col-sm-8"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="title"&gt;標題&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="title"
                    v-model="tempProduct.title"
                    placeholder="請輸入標題"&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="category"&gt;分類&lt;/label&gt;
                    &lt;input type="text" class="form-control" id="category"
                      v-model="tempProduct.category"
                      placeholder="請輸入分類"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;單位&lt;/label&gt;
                    &lt;input type="unit" class="form-control" id="unit"
                      v-model="tempProduct.unit"
                      placeholder="請輸入單位"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                  &lt;label for="origin_price"&gt;原價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="origin_price"
                      v-model="tempProduct.origin_price"
                      placeholder="請輸入原價"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;售價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="price"
                      v-model="tempProduct.price"
                      placeholder="請輸入售價"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;hr&gt;

                &lt;div class="form-group"&gt;
                  &lt;label for="description"&gt;產品描述&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="description"
                    v-model="tempProduct.description"
                    placeholder="請輸入產品描述"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="content"&gt;說明內容&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="content"
                    v-model="tempProduct.content"
                    placeholder="請輸入產品說明內容"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;div class="form-check"&gt;
                    &lt;input class="form-check-input" type="checkbox"
                      v-model="tempProduct.is_enabled"
                      :true-value="1"
                      :false-value="0"
                      id="is_enabled"&gt;
                    &lt;label class="form-check-label" for="is_enabled"&gt;
                      是否啟用
                    &lt;/label&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary" @click="updateProduct"&gt;確認&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="modal fade" id="delProductModal" tabindex="-1" role="dialog"
  aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-danger text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;刪除產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            是否刪除 &lt;strong class="text-danger"&gt;{{ tempProduct.title }}&lt;/strong&gt; 商品(刪除後將無法恢復)。
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-danger" @click="delProduct"&gt;確認刪除&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery'

// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
      tempProduct: {},
      isNew: false,
      isLoading: false,
      status: {
        fileUploading: false,
      },
    };
  },
  methods: {
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products`;
      const vm = this;
      // console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      vm.isLoading = true;
      this.$http.get(api).then((response) =&gt; {
        // console.log(response.data);
        vm.isLoading = false;
        vm.products = response.data.products;
      });
    },
    openModal(isNew, item) {
      if (isNew) {
        this.tempProduct = {};
        this.isNew = true;
      } else {
        this.tempProduct = Object.assign({}, item);
        this.isNew = false;
      }
      $('#productModal').modal('show');
    },
    updateProduct() {
      let api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product`;
      let httpMethod = 'post';
      const vm = this;
      if (!vm.isNew) {
        api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
        httpMethod = 'put';
      }
      console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http&#91;httpMethod](api, { data: vm.tempProduct }).then((response) =&gt; {
        console.log(response.data);
        // vm.products = response.data.products;
        if (response.data.success) {
          $('#productModal').modal('hide');
          vm.getProducts();
          console.log('新增失敗');
        }
      });
    },
    openDelProductModal(item) {
      const vm = this;
      $('#delProductModal').modal('show');
      vm.tempProduct = Object.assign({}, item);
    },
    delProduct() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
      this.$http.delete(url).then((response) =&gt; {
        console.log(response, vm.tempProduct);
        $('#delProductModal').modal('hide');
        this.getProducts();
      });
    },
    uploadFile() {
      console.log(this);
      const uploadedFile = this.$refs.files.files&#91;0];
      const vm = this;
      const formData = new FormData();
      formData.append('file-to-upload', uploadedFile);
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/upload`;
      vm.status.fileUploading = true;
      this.$http.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }).then((response) =&gt; {
        console.log(response.data);
        vm.status.fileUploading = false;
        if (response.data.success) {
          // vm.tempProduct.imageUrl = response.data.imageUrl;
          // console.log(vm.tempProduct);
          vm.$set(vm.tempProduct, 'imageUrl', response.data.imageUrl);
        }
      });
    },
  },
  created() {
    this.getProducts();
  }
};
&lt;/script&gt;</code></pre>



<h3>Font-awesome&nbsp;連結說明</h3>



<p>由於新版 Fontawesome 需要註冊或使用 npm 方式才能安裝<br>如果想跳過註冊流程可以直接使用以下連結：</p>



<pre class="wp-block-code"><code>&lt;link rel="stylesheet"
      href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt"
      crossorigin="anonymous"&gt;</code></pre>



<h3>增加使用者體驗&nbsp;–&nbsp;錯誤的訊息回饋</h3>



<p>操作與講解</p>



<ol><li>除了讀取效果之外，還有一個很常用的就是錯誤訊息的回饋，那麼錯誤訊息的回饋我們來看一下這邊有一個範例，像是我們上傳圖片的時候，它是有一些限制的，像是說你的圖片如果格式不對、或是圖片太大，都是沒有辦法上傳的。像我們在這裡如果說我們上傳一張比較大的圖片，它這個時候就會跳錯，然後它會給一些錯誤的回饋，或者是說我們傳入錯誤的格式，這裡也會出現檔案格式錯誤的訊息。接下來我們就來介紹怎麼樣做出這樣的錯誤訊息的回饋。</li><li>錯誤訊息的回饋在這個地方要介紹一個非常不同的技巧，在介紹元件的時候，元件都是一層一層向下的，像是 Root 下面就可以有 Header、side，那 side 往下就可以有 component，那麼假設說我們要談出一個向上最頂層的一個訊息的話，那麼我們基本上就是要一層一層的往上呼叫，在底層的 component 就不容易呼叫這個 Alert 的訊息。那我們可以怎麼做，我們可以使用一個 Event Bus 的一個概念，我們直接把這個 Alert 掛載 Vue 的原型下，然後直接去操作 Vue 的原型來控制這個 Alert。</li><li>那接下來我們來看一下實際上會怎麼樣去運作它，那在這個章節會直接提供一個現成的原始碼，然後讓同學不需要去撰寫 Alert 的部分，因為 Alert 的概念與我們先前所練習的 Todo 非常的像。那我們新增一個檔案，然後並且另存新檔，把這個檔案放到 src/components 下，名稱叫做 AlertMessage.vue。</li><li>接下來我們在把這個 AlertMessage.vue 先掛載進來，我們把它掛載在 Dashboard.vue 下，然後使用 import AlertMessage from ‘./AlertMessage’;，我們把它簡稱叫 Alert 就好了 (import Alert from ‘./AlertMessage’;。那這個元件也把它放在 components 下，並且把它放到 &lt;Navbar /> 下面 ( &lt;Alert>&lt;/Alert>，然後存檔。存檔之後不會有任何的變化，預設是不會顯示的。</li><li>接下來我們回到 AlertMessage.vue 裡面來，這裡面會做的事情，就是將這個 messages 一個一個陳列出來，那它是一個陣列會塞入物件，到時候會傳入物件。那它會傳入的參數有這三個，分別有 message, status, timestamp，那 message 就是文字的內容、status 是它的樣式、timestamp 是它的 id，message 我們就可以打 ‘訊息內容’，status 就是它的樣式，樣式的話是追隨 Bootstrap 的樣式，如果我們使用 danger 的話就是紅色，那 timestamp 我們就先給它 123，然後存檔。存檔之後這邊就會跳出一個訊息內容，然後可以關掉。它的運行方式跟我們先前所介紹的 Todo 非常像的，只不過這個與先前比較不一樣的地方，我們來看一下。當我們每當送一個訊息到 messages 裡面的時候，它有會觸發把自己移除的函式，那它把自己移除的函式就寫在它的下方，每當 5 秒一到的時候，它就把自己這個訊息給移除。那這裡還有一個 removeMessage 的一個方法，那就是我們剛剛按 X 的地方，所以我們再重新整理一次，它關掉的方式就有兩種，一種是按這邊的 X 、那另外一種就是 5 秒一到它也會把自己的訊息移除，但是這個只有從外面傳進來訊息它才會被自動移除，像我們這個手動寫入的訊息它就不會被移除。</li><li>現在我們已經把這個頂層的 Alert 的行為已經建立起來，現在我們把 Event Bus 加進去，加入 Event Bus 的方式，我們再新增一個檔案，另存新檔在 src 的資料夾下，叫做 bus.js 的檔案。那麼它只需要 import Vue from ‘vue’;，並且在 Vue.prototype 它直接掛載在它的原型下，叫做一個 $bus 的一個變數，然後等於 new Vue，那這邊就完成了。完成之後我們把這個 Event Bus 注入到 main.js 裡面來，import 然後直接輸入路徑 ‘./bus’;、存檔。那現在我們剛剛做的這件事情就是將 Event Bus 直接掛在 Vue 的下面，我們直接掛在它的原型下，所以可以直接對這個 Event Bus 做呼叫。</li><li>那現在 bus 沒有任何的事情，那我們可以在 AlertMessage.vue 裡面做一些事情，已經先把方法寫出來了，那我們直接把這一段註解打解 (const vm、vm.$bus.$on)，再來講解一下，這段的意思是我們直接去呼叫 Vue 的實體下面的 $bus，那這個 $bus 就是我們剛剛掛在 Vue 的原型下的一個變數，並且在上面用 on 的方式註冊了一個 message:push 的一個方法，那這裡是它的參數以及它的狀態值，message 是一個字串，就是對應我們這裡的 message，然後 status 是對應剛剛講的 Bootstrap 的樣式，我們給它定義一個預設樣式是 ‘warning’，最後再觸發 vm.updateMessage，就是上面這個 updateMessage 的方法，到目前為止其實 Event Bus 已經完成了。那麼外層是使用 on 去註冊，那麼內層要使用的話則用 $emit 去觸發它，好、那我們先存檔一次。</li><li>接下來我們到 Products.vue 的頁面來，我們直接在 created() 這個地方試著送出一個 Event Bus 來試試看，直接使用 this.$bus.$emit(”)，接下來我們直接把 AlertMessage.vue 裡面的 $on 下面的 ‘message:push’ 直接貼過來，現在我們才可以直接透過這個方法來觸發外層的 Alert，然後我們在給它訊息內容 ‘這裡是一段訊息’，後面在加上狀態，那這個狀態是跟隨 Bootstrap 的樣式，我們給它 ‘success’ 的樣式，存檔。存檔之後你會發現這裡就直接把這個訊息跳出來，如果我們不管它的話，5 秒鐘它就會自動移除。那這裡就是 Event Bus 的使用方法。</li><li>最後我們在把這個行為寫到我們需要提示用戶的地方，像是我們在上傳檔案的時候，成功的話它就直接會把檔案網址寫到 tempProduct 裡面，那麼如果失敗的話我們就可以透過 Event Bus 來提醒用戶說它的錯誤在哪裡，Event Bus、emit、message:push，然後接下來我們在把 response.data 貼過來、加上.message，後面給它 ‘danger’。當然先前的這個訊息內容我們要記得把它刪掉，這是我們剛先填入的部分，接下來我們重新整理一下，然後我們再上傳一次圖片試試看，我們給它一個錯誤的格式，這裡就會跳出檔案格式錯的訊息，這樣子的話用戶也比較了解他犯錯是什麼樣的錯誤。</li><li>在這裡再提醒一下由於 Event Bus 是可以跨元件通訊的，也就是說你可能會忘記你在哪一個元件設定哪些方法，那依照習慣會把 Event Bus 所可以使用的方法直接寫在 bus.js 檔案，包含使用的方法、傳遞的參數……等等，那就試著把錯誤的訊息也補上。(意思是將方法註解在 bus.js 方便自己記得設定過哪些傳遞方法)。</li></ol>



<figure class="wp-block-image size-full"><img loading="lazy" width="1536" height="762" src="/wordpress_blog/wp-content/uploads/2022/04/Vue-Event-Bus.png" alt="" class="wp-image-691"/><figcaption>Vue Event Bus</figcaption></figure>



<pre class="wp-block-code"><code>// 3. AlertMessage.vue
&lt;template&gt;
  &lt;div class="message-alert"&gt;
    &lt;div class="alert alert-dismissible"
      :class="'alert-' + item.status"
      v-for="(item, i) in messages" :key="i"&gt;
      {{ item.message }}
      &lt;button type="button" class="close" @click="removeMessage(i)" aria-label="Close"&gt;
        &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
      &lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'Navbar',
  data() {
    return {
      messages: &#91;],
    };
  },
  methods: {
    updateMessage(message, status) {
      const timestamp = Math.floor(new Date() / 1000);
      this.messages.push({
        message,
        status,
        timestamp,
      });
      this.removeMessageWithTiming(timestamp);
    },
    removeMessage(num) {
      this.messages.splice(num, 1);
    },
    removeMessageWithTiming(timestamp) {
      const vm = this;
      setTimeout(() =&gt; {
        vm.messages.forEach((item, i) =&gt; {
          if (item.timestamp === timestamp) {
            vm.messages.splice(i, 1);
          }
        });
      }, 5000);
    },
  },
  created() {
    // const vm = this;

    // 自定義名稱 'messsage:push'
    // message: 傳入參數
    // status: 樣式，預設值為 warning
    // vm.$bus.$on('message:push', (message, status = 'warning') =&gt; {
    //   vm.updateMessage(message, status);
    // });
    // vm.$bus.$emit('message:push');
  },
};
&lt;/script&gt;

&lt;style scope&gt;
.message-alert {
  position: fixed;
  max-width: 50%;
  top: 56px;
  right: 20px;
  z-index: 1100;
}
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 4. Dashboard.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;Navbar/&gt;
    &lt;Alert&gt;&lt;/Alert&gt;
    &lt;div class="container-fluid"&gt;
      &lt;div class="row"&gt;
        &lt;Sidebar&gt;&lt;/Sidebar&gt;
        &lt;main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4"&gt;
          &lt;router-view&gt;&lt;/router-view&gt;
        &lt;/main&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import Sidebar from './Sidebar';
import Navbar from './Navbar';
import Alert from './AlertMessage';

export default {
  components: {
    Sidebar,
    Navbar,
    Alert,
  },
  created() {
    const myCookie = document.cookie.replace(/(?:(?:^|.*;\s*)hexToken\s*=\s*(&#91;^;]*).*$)|^.*$/, '$1');
    // console.log('myCookie', myCookie);
    this.$http.defaults.headers.common.Authorization = myCookie;
  }
};
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// 5. AlertMessage.vue
      messages: &#91;{
        message: '訊息內容',
        status: 'danger',
        timestamp: 123,
      }],
    };</code></pre>



<pre class="wp-block-code"><code>// 6. bus.js
import Vue from 'vue';

Vue.prototype.$bus = new Vue();</code></pre>



<pre class="wp-block-code"><code>// 6. main.js
// 自己撰寫
import './bus';</code></pre>



<pre class="wp-block-code"><code>// 7. AlertMessage.vue
  created() {
    const vm = this;

    // 自定義名稱 'messsage:push'
    // message: 傳入參數
    // status: 樣式，預設值為 warning
    vm.$bus.$on('message:push', (message, status = 'warning') =&gt; {
      vm.updateMessage(message, status);
    });
    // vm.$bus.$emit('message:push');
  },</code></pre>



<pre class="wp-block-code"><code>// 8. Products.vue
  created() {
    this.getProducts();
    this.$bus.$emit('message:push', '這裡是一段訊息', 'success');
  }</code></pre>



<pre class="wp-block-code"><code>// 9. Products.vue
    uploadFile() {
      console.log(this);
      const uploadedFile = this.$refs.files.files&#91;0];
      const vm = this;
      const formData = new FormData();
      formData.append('file-to-upload', uploadedFile);
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/upload`;
      vm.status.fileUploading = true;
      this.$http.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }).then((response) =&gt; {
        console.log(response.data);
        vm.status.fileUploading = false;
        if (response.data.success) {
          // vm.tempProduct.imageUrl = response.data.imageUrl;
          // console.log(vm.tempProduct);
          vm.$set(vm.tempProduct, 'imageUrl', response.data.imageUrl);
        } else {
              this.$bus.$emit('message:push', response.data.message, 'danger');
        }
      });
    },
  },
  created() {
    this.getProducts();
    // this.$bus.$emit('message:push', '這裡是一段訊息', 'success');
  }</code></pre>



<pre class="wp-block-code"><code>// 10. bus.js
import Vue from 'vue';

Vue.prototype.$bus = new Vue();

// Message
// vm.$bus.$emit('message:push', message, status);
// message(String): 訊息內容
// status(String): Alert 的樣式</code></pre>



<h3>產品列表的分頁邏輯</h3>



<p>操作與講解</p>



<ol><li>這個章節要來介紹分頁，因為我們這邊取得資料的時候，這裡一次取得是 10 筆，但是我們的資料內容其實是超過 10 筆，我們把抓下來的 json 打開看一下，除了 products 之外，這裡還有一個 pagination，pagination 就是我們分頁的設定，這個分頁設計做得很好，後端直接傳來我們這裡不需要做很多的判斷，包含說有沒有下一頁、有沒有前一頁、目前頁面還有總共的頁數是多少，都已經先寫好了。</li><li>現在我們來做分頁的效果。我們在 Products.vue 的頁面下面，我們再新增一個 pagination，它是一個物件。接下來我們在 getProducts() 之後，我們把這個 vm.pagination 把它存起來 response.data.pagination;，確定有沒有拼錯。存檔，我們現在就把 pagination 這個變數直接存進來，存進來之後我們該怎麼去使用它。</li><li>我們到 Bootstrap 4 的網頁這裡搜尋 pagination，那麼它已經有提供一個完整的範例，我們使用下面這一組好了，我們直接把它完整的複製起來，然後回到我們的 Products.vue 的頁面，接下來我們到表格的下方，新增剛剛從 Bootstrap 複製過來的 pagination。這個 pagination 包含了往前一頁以及往下一頁，還有各個頁碼的設計，那麼現在各個頁碼有1、2、3頁，但是我們先留下第一頁就可以了。然後對應一下畫面，前一頁、下一頁以及當前的頁碼。</li><li>那麼在這裡就會使用 v-for=”page in pagination.”，我們來看一下它有哪些參數可以使用，Console 然後 pagination 下面有一個 total_pages 它的總頁數 (v-for=”page in pagination.total_pages”)，然後整理一下頁面，然後使用 v-for 的時候後面一定要一個 :key=”page”，然後頁碼呈現直接使用 {{ page }}，儲存看一下。現在畫面上已經正確的呈現頁數有第1頁以及第2頁，但是我們還不知道當前的頁碼是多少，所以它裡面還有一個變數叫做 current_page，就是當前是在哪一頁，除此之外它還有有沒有上一頁以及下一頁，那我們在這裡也稍微處理一下。</li><li>current_page 的部分我們就可以把它套用在 &lt;li&gt; 的部分，然後加上 :class 等於使用一個物件 ‘active’ 假設 pagination 的 current_page === page 的話，它就會顯示 active。現在它就會顯示我們正在第一頁，那麼前一頁以及下一頁也是差不多的概念，那麼我們會使用它變數裡面的 has_next 以及 has_pre 來做判斷，在這裡我們就補上 :class 等於，但是我們會使用 ‘disabled’ 這個 classname，假設 pagination 的 has_pre 是 false 的時候，它就會套上 disabled 這個 classname，那下一頁的部分會用相同的方式 has_next。接下來回到畫面上這個 has_pre 它現在就是呈現灰色，next 目前還是可以點的狀態，那我們現在點的時候都是沒有任何效果的。</li><li>我們最後在補上切換頁的一個方法，切換頁我們先看一下這個&nbsp;<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-course-api-wiki/wiki/%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0-%5B%E9%9C%80%E9%A9%97%E8%AD%89%5D#%E5%8F%96%E5%BE%97%E8%A8%82%E5%96%AE%E5%88%97%E8%A1%A8" target="_blank">API 的文件</a>，文件的話在後面有寫到，假設如果你要切換頁的話在我們取得訂單列表後面在補上一個?page 等於你的頁碼，那這個是帶入參數的一個方法，那我們回到我們 Products.vue 的畫面上，接下來我們到 getProducts() 這個地方，我們現在把後面這段參數給補上 (?page=:page)，最後這個 page 我們用變數的方式叫做 page，那麼變數會從 getProducts() 的時候就把它傳進來 (getProducts(page)，不過我們先前已經在很多地方都已經寫 getProducts()，我們是不是要在其他地方也把數字都加上。這裡要介紹一個小方法，我們可以使用 ES6 的參數預設值來處理，現在這個 getProducts() 我們這裡的 page 我們可以給它一個預設值叫做 1，也就是說我們先前的部分我們可以不用做，它預設值就會帶第1頁進來。假設它沒有帶數值的話，它就會使用第1頁，那它如果有帶數值的話，它就會用後來傳入的數值來替代。接下來我們回到上方，剛剛 pagination 那個地方，我們試著把切換頁給加上來，在這裡補上 @click.prevent 等於 “getProducts()” 然後帶上頁數 page、然後存檔。我們來試試看能不能正確的換頁，這裡按第2頁、再按一次它就切換到第1頁。其他地方我們可以用相同的方式，把它貼過來、然後這裡就不是用 page，我們用 pagination.current_page 然後 -1 來切換頁面，那麼下一頁也是相同的概念，我們把這一行複製下來貼到下一頁(改成 +1 )、然後存檔，那我們來試一次看看。現在我們可以按這個數字切換頁，另外一種就是按左右的切換頁也可以來換頁，</li><li>到這個地方分頁效果就已經完成了，這裡再出一個小作業，可以試著把 pagination 做成元件的方式來呈現，那這段就自己思考一下，我們怎麼把這個 pagination 修改成元件。</li></ol>



<pre class="wp-block-code"><code>// 2. Products.vue
  data() {
    return {
      products: &#91;],
      pagination: {},
      tempProduct: {},
      isNew: false,
      isLoading: false,
      status: {
        fileUploading: false,
      },
    };
  },</code></pre>



<pre class="wp-block-code"><code>// 2. Products.vue
    getProducts() {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products`;
      const vm = this;
      // console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      vm.isLoading = true;
      this.$http.get(api).then((response) =&gt; {
        // console.log(response.data);
        vm.isLoading = false;
        vm.products = response.data.products;
        vm.pagination = response.data.pagination;
      });
    },</code></pre>



<pre class="wp-block-code"><code>// 3~6. Products.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;
    &lt;div class="text-right mt-4"&gt;
      &lt;button class="btn btn-primary" @click="openModal(true)"&gt;建立新的產品&lt;/button&gt;
    &lt;/div&gt;
    &lt;table class="table mt-4"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th width="120"&gt;分類&lt;/th&gt;
          &lt;th&gt;產品名稱&lt;/th&gt;
          &lt;th width="120"&gt;原價&lt;/th&gt;
          &lt;th width="120"&gt;售價&lt;/th&gt;
          &lt;th width="100"&gt;是否啟用&lt;/th&gt;
          &lt;th width="120"&gt;編輯&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr v-for="(item) in products" :key="item.id"&gt;
          &lt;td&gt;{{ item.category }}&lt;/td&gt;
          &lt;td&gt;{{ item.title }}&lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.origin_price }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price }}
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span v-if="item.is_enabled" class="text-success"&gt;啟用&lt;/span&gt;
            &lt;span v-else&gt;未啟用&lt;/span&gt;
          &lt;/td&gt;
          &lt;td&gt;
              &lt;button class="btn btn-outline-primary btn-sm" @click="openModal(false, item)"&gt;編輯&lt;/button&gt;
              &lt;button class="btn btn-outline-danger btn-sm" @click="openDelProductModal(item)"&gt;刪除&lt;/button&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;!-- Pagination --&gt;
    &lt;nav aria-label="Page navigation example"&gt;
      &lt;ul class="pagination"&gt;
        &lt;li class="page-item" :class="{'disabled': !pagination.has_pre}"&gt;
          &lt;a class="page-link" href="#" aria-label="Previous"
            @click.prevent="getProducts(pagination.current_page - 1)"&gt;
            &lt;span aria-hidden="true"&gt;&amp;laquo;&lt;/span&gt;
          &lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="page-item" v-for="page in pagination.total_pages" :key="page"
          :class="{'active': pagination.current_page === page}"&gt;
          &lt;a class="page-link" href="#" @click.prevent="getProducts(page)"&gt;{{ page }}&lt;/a&gt;&lt;/li&gt;
        &lt;li class="page-item" :class="{'disabled': !pagination.has_next}"&gt;
          &lt;a class="page-link" href="#" aria-label="Next"
            @click.prevent="getProducts(pagination.current_page + 1)"&gt;
            &lt;span aria-hidden="true"&gt;&amp;raquo;&lt;/span&gt;
          &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
    &lt;!-- Modal --&gt;
    &lt;div class="modal fade" id="productModal" tabindex="-1" role="dialog"
      aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog modal-lg" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-dark text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;新增產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;div class="row"&gt;
              &lt;div class="col-sm-4"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="image"&gt;輸入圖片網址&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="image"
                    v-model="tempProduct.imageUrl"
                    placeholder="請輸入圖片連結"&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="customFile"&gt;或 上傳圖片
                    &lt;i class="fas fa-spinner fa-spin" v-if="status.fileUploading"&gt;&lt;/i&gt;
                  &lt;/label&gt;
                  &lt;input type="file" id="customFile" class="form-control"
                    ref="files" @change="uploadFile"&gt;
                &lt;/div&gt;
                &lt;img img="https://images.unsplash.com/photo-1483985988355-763728e1935b?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=828346ed697837ce808cae68d3ddc3cf&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80"
                  class="img-fluid" :src="tempProduct.imageUrl" alt=""&gt;
              &lt;/div&gt;
              &lt;div class="col-sm-8"&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="title"&gt;標題&lt;/label&gt;
                  &lt;input type="text" class="form-control" id="title"
                    v-model="tempProduct.title"
                    placeholder="請輸入標題"&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="category"&gt;分類&lt;/label&gt;
                    &lt;input type="text" class="form-control" id="category"
                      v-model="tempProduct.category"
                      placeholder="請輸入分類"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;單位&lt;/label&gt;
                    &lt;input type="unit" class="form-control" id="unit"
                      v-model="tempProduct.unit"
                      placeholder="請輸入單位"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class="form-row"&gt;
                  &lt;div class="form-group col-md-6"&gt;
                  &lt;label for="origin_price"&gt;原價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="origin_price"
                      v-model="tempProduct.origin_price"
                      placeholder="請輸入原價"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group col-md-6"&gt;
                    &lt;label for="price"&gt;售價&lt;/label&gt;
                    &lt;input type="number" class="form-control" id="price"
                      v-model="tempProduct.price"
                      placeholder="請輸入售價"&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;hr&gt;

                &lt;div class="form-group"&gt;
                  &lt;label for="description"&gt;產品描述&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="description"
                    v-model="tempProduct.description"
                    placeholder="請輸入產品描述"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;label for="content"&gt;說明內容&lt;/label&gt;
                  &lt;textarea type="text" class="form-control" id="content"
                    v-model="tempProduct.content"
                    placeholder="請輸入產品說明內容"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                  &lt;div class="form-check"&gt;
                    &lt;input class="form-check-input" type="checkbox"
                      v-model="tempProduct.is_enabled"
                      :true-value="1"
                      :false-value="0"
                      id="is_enabled"&gt;
                    &lt;label class="form-check-label" for="is_enabled"&gt;
                      是否啟用
                    &lt;/label&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary" @click="updateProduct"&gt;確認&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="modal fade" id="delProductModal" tabindex="-1" role="dialog"
  aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content border-0"&gt;
          &lt;div class="modal-header bg-danger text-white"&gt;
            &lt;h5 class="modal-title" id="exampleModalLabel"&gt;
              &lt;span&gt;刪除產品&lt;/span&gt;
            &lt;/h5&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
              &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            是否刪除 &lt;strong class="text-danger"&gt;{{ tempProduct.title }}&lt;/strong&gt; 商品(刪除後將無法恢復)。
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-outline-secondary" data-dismiss="modal"&gt;取消&lt;/button&gt;
            &lt;button type="button" class="btn btn-danger" @click="delProduct"&gt;確認刪除&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import $ from 'jquery'

// 匯出給其他元件使用
export default {
  data() {
    return {
      products: &#91;],
      pagination: {},
      tempProduct: {},
      isNew: false,
      isLoading: false,
      status: {
        fileUploading: false,
      },
    };
  },
  methods: {
    getProducts(page = 1) {
      const api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/products?page=${page}`;
      const vm = this;
      // console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      vm.isLoading = true;
      this.$http.get(api).then((response) =&gt; {
        // console.log(response.data);
        vm.isLoading = false;
        vm.products = response.data.products;
        vm.pagination = response.data.pagination;
      });
    },
    openModal(isNew, item) {
      if (isNew) {
        this.tempProduct = {};
        this.isNew = true;
      } else {
        this.tempProduct = Object.assign({}, item);
        this.isNew = false;
      }
      $('#productModal').modal('show');
    },
    updateProduct() {
      let api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product`;
      let httpMethod = 'post';
      const vm = this;
      if (!vm.isNew) {
        api = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
        httpMethod = 'put';
      }
      console.log(process.env.APIPATH, process.env.CUSTOMPATH);
      this.$http&#91;httpMethod](api, { data: vm.tempProduct }).then((response) =&gt; {
        console.log(response.data);
        // vm.products = response.data.products;
        if (response.data.success) {
          $('#productModal').modal('hide');
          vm.getProducts();
          console.log('新增失敗');
        }
      });
    },
    openDelProductModal(item) {
      const vm = this;
      $('#delProductModal').modal('show');
      vm.tempProduct = Object.assign({}, item);
    },
    delProduct() {
      const vm = this;
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;
      this.$http.delete(url).then((response) =&gt; {
        console.log(response, vm.tempProduct);
        $('#delProductModal').modal('hide');
        this.getProducts();
      });
    },
    uploadFile() {
      console.log(this);
      const uploadedFile = this.$refs.files.files&#91;0];
      const vm = this;
      const formData = new FormData();
      formData.append('file-to-upload', uploadedFile);
      const url = `${process.env.APIPATH}/api/${process.env.CUSTOMPATH}/admin/upload`;
      vm.status.fileUploading = true;
      this.$http.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }).then((response) =&gt; {
        console.log(response.data);
        vm.status.fileUploading = false;
        if (response.data.success) {
          // vm.tempProduct.imageUrl = response.data.imageUrl;
          // console.log(vm.tempProduct);
          vm.$set(vm.tempProduct, 'imageUrl', response.data.imageUrl);
        } else {
              this.$bus.$emit('message:push', response.data.message, 'danger');
        }
      });
    },
  },
  created() {
    this.getProducts();
    // this.$bus.$emit('message:push', '這裡是一段訊息', 'success');
  }
};
&lt;/script&gt;</code></pre>



<h3>套用價格的 Filter&nbsp;技巧</h3>



<p>操作與講解</p>



<ol><li>這個頁面其實製作的差不多了，剩這個價錢的部分我們還沒有補上千分號。那千分號的部分我們就使用 filter 來製作，那麼這一段會提供一個現成的 filter 讓我們可以直接使用，那我們這裡就新增一個新的檔案，接下來把提供的 filter 把它貼進去、然後存檔，我們把它存在 src 下、然後再新增一個資料夾叫做 filters 、然後檔案名稱叫做 currency.js，這個函式只是將傳進來的數值加上千分號以及前面的$而已。</li><li>接下來我們要怎麼啟用這個千分號的 filter，如果我們要在全域的方式啟用它的話，一樣可以回到 main.js，把 filter 給注入進來，我們就可以把它寫在這裡 import currencyFilter from ‘./filters/currency’;，import 進來之後，我們就可以透過全域的 filter 方式來啟用它，Vue.filter()，前面可以輸入自訂的名稱 ‘currency’，後面輸入的是 import 的 filter 名稱，那把它貼進來，這樣應該就可以正常運作了。</li><li>我們稍微排版一下，然後我們回到 Products.vue 的頁面，我們找到先前有使用金額的地方，這裡有個原價以及售價，那我們就可以把它加上 filter，currency、然後存檔。那畫面上就會將這些金額全部套上千分號，接下來我們做的畫面假設它需要使用千分號，都可以使用這個方式來套用，如果沒有問題就把千分號也把它補上。</li></ol>



<pre class="wp-block-code"><code>// 1. src/filters/currency.js
export default function (num) {
  const n = Number(num);
  return `$${n.toFixed(0).replace(/./g, (c, i, a) =&gt; {
    const currency = (i &amp;&amp; c !== '.' &amp;&amp; ((a.length - i) % 3 === 0) ? `, ${c}`.replace(/\s/g, '') : c);
    return currency;
  })}`;
}</code></pre>



<pre class="wp-block-code"><code>// 2. main.js
// 自行撰寫
import currencyFilter from './filters/currency'

Vue.filter('currency', currencyFilter)</code></pre>



<pre class="wp-block-code"><code>// 3. Products.vue
          &lt;td class="text-right"&gt;
            {{ item.origin_price | currency }}
          &lt;/td&gt;
          &lt;td class="text-right"&gt;
            {{ item.price | currency }}
          &lt;/td&gt;</code></pre>



<h3>中場休息說明，準備進入下半場囉</h3>



<p>操作與講解</p>



<ol><li>到目前為止我們建立商品的頁面已經做得差不多了，但是如果我們看到建立 API 的頁面，建立商品只是其中的一小段，後面還有取得訂單以及優惠券，這些部分當然不會一個一個全部介紹完，因為許多行為跟建立商品其實差異都不大，我們來看一下範例的頁面，像是在訂單列表裡面，它同樣都是把資料列出來、並且做一些排序，優惠券也是差不多的概念，它可以編輯優惠券的內容，只不過它上面還增加了到期日，這兩個部分就交給大家自己來練習。</li><li>那麼我們現在要做的是前台用戶使用的頁面，因為如果沒有用戶使用的頁面的話，我們就沒有辦法建立商品、新增商品到購物車以及付款等等，前台的購物頁面，那個內容也非常的多，到時候這個部分也是要給同學練習的，那麼也是做為最後的作業。</li><li>我們來看一下前台購物頁面大概有哪些功能，在右上方這裡有一個購物車，這個是我們可以加入購物車的內容，接下來往下我們可以點選商品，點選商品之後它就會讀取然後進入商品的頁面，接下來還可以選購商品，現在我在好看的外套這個地方，我加入購物車，那麼上面這個地方好看的外套就會出現5件，我們剛剛在模擬的時候也是點了5件，那接下來在點下結帳去的話，就會到結帳的頁面，結帳的頁面也可以看到我們剛剛所選購的一些商品，接下來我們在下面這個地方也可以填寫一些欄位，然後並且做驗證然後按下確認付款，這個是完整的前台購物的頁面。</li><li>但是我們在這個部分就不會直接拿這個做範例，在這裡會在管理後台的地方做個模擬訂單的一個功能，那麼模擬訂單它的功能其實差不多，如果點擊這個按鈕，它一樣會跳出商品的細節，然後可以選擇說我的商品要選擇多少份量，然後下面一樣有購物車的列表，然後也可以套入優惠碼、下方一樣可以填入一些欄位，然後送出訂單。所以這個地方我們就先把這個列表都列出來，那麼訂單列表以及優惠券就讓大家來練習，接下來我們要做的是模擬訂單的內容。</li><li>接下來左邊選單的部分，我們可以打開 Sidebar.vue 這個檔案，那左邊這裡有一個小標題我們可以繼續拿來使用，叫做 SAVED REPORTS，那我們先搜尋一下那一段，我們只要保留 SAVED REPORTS 跟下面的一個&lt;ul&gt;跟&lt;li&gt;就可以了，我們可以先把其它的內容先把它刪除掉。現在上面這個地方留下一個標題以及一個選單的內容，所以我們就可以像這樣做，上面這個地方就是我們的管理員使用的，下面的就是模擬的功能。我們現在把這些選單內容給補上，接下來我們在複製這個&lt;h6&gt;以及&lt;ul&gt;產品列表，先把它複製一份到下面來，管理員的部分我們會叫做模擬功能、下面的產品列表就改成模擬訂單。我們回到頁面上面選單現在大概有這樣的調整，上方的這個管理員這個產品列表就必需要登入，下方的模擬訂單的功能就不需要登入，那我們就先做這樣的差異。</li><li>接下來回到 Sidebar.vue 原始碼的地方，現在我們是使用 &lt;a&gt; 然後後面是使用 href 對應 # 這個連結，我們接下來這邊也要把它換成 &lt;router-link&gt;&lt;/router-link&gt; 然後 to 我們的 admin/products 的頁面，然後對應的是產品列表，這個部分在我們先前介紹 Vue Router 的時候都有介紹過了，那我們這裡就加入把它帶過，這個 &lt;router-link&gt;&lt;/router-link&gt; 缺少一些 classname，在把它補上。</li><li>現在我們有加上管理員以及產品列表，那下方有模擬功能、模擬訂單。那產品列表在這個地方也可以增加一些圖示，我們在先前載入 font-awesome，在這個時候也可以把一些圖示給載進來，像我們在這裡可以使用一個 box-open 的一個圖示，那我們把 box-open 的圖示把它加到我們的頁面上面來，就一樣把它放在 &lt;router-link&gt;&lt;/router-link&gt; 裡面就可以，像這裡就有一個產品列表的圖示，那麼大家就先做到這個地方，訂單列表以及優惠券這個部分就讓大家自己處理。</li><li>接下來會來介紹用戶端的訂單頁面該怎麼製作。</li></ol>



<pre class="wp-block-code"><code>// 5~7. Sidebar.vue
&lt;template&gt;
  &lt;nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse"&gt;
    &lt;div class="sidebar-sticky pt-3"&gt;
      &lt;h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted"&gt;
        &lt;span&gt;管理員&lt;/span&gt;
        &lt;a class="d-flex align-items-center text-muted" href="#" aria-label="Add a new report"&gt;
          &lt;span data-feather="plus-circle"&gt;&lt;/span&gt;
        &lt;/a&gt;
      &lt;/h6&gt;
      &lt;ul class="nav flex-column mb-2"&gt;
        &lt;li class="nav-item"&gt;
          &lt;router-link class="nav-link" to="/admin/products"&gt;
            &lt;i class="fas fa-box-open"&gt;&lt;/i&gt;
            產品列表
          &lt;/router-link&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted"&gt;
        &lt;span&gt;模擬功能&lt;/span&gt;
        &lt;a class="d-flex align-items-center text-muted" href="#" aria-label="Add a new report"&gt;
          &lt;span data-feather="plus-circle"&gt;&lt;/span&gt;
        &lt;/a&gt;
      &lt;/h6&gt;
      &lt;ul class="nav flex-column mb-2"&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" href="#"&gt;
            &lt;span data-feather="file-text"&gt;&lt;/span&gt;
            模擬訂單
          &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
&lt;/template&gt;</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Vue 出一個電商網站 (2)</title>
		<link>/wordpress_blog/vue-hexschool-2/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Wed, 24 Mar 2021 03:29:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=667</guid>

					<description><![CDATA[第６節：Vue.js 元件 元件概念介紹 VUE 元件概念 元件 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2>第６節：Vue.js 元件</h2>



<h3>元件概念介紹</h3>



<h5>VUE 元件概念</h5>



<figure class="wp-block-image size-full"><img loading="lazy" width="1024" height="515" src="/wordpress_blog/wp-content/uploads/2022/04/vue元件概念.png" alt="" class="wp-image-669"/><figcaption>Vue 元件概念</figcaption></figure>



<h5>元件資料獨立 與 傳遞</h5>



<figure class="wp-block-image size-full"><img loading="lazy" width="1024" height="511" src="/wordpress_blog/wp-content/uploads/2022/04/元件資料獨立與傳遞.png" alt="" class="wp-image-670"/><figcaption>元件資料獨立 與 傳遞</figcaption></figure>



<h5>SPA 也是透過元件來製作的喔</h5>



<p>由前端所模擬的路由。</p>



<pre class="wp-block-code"><code>https:&#47;&#47;www.hexschool.com/#/user
// index - User Page...</code></pre>



<h3>使用 x-template 建立元件</h3>



<h5>基礎元件練習</h5>



<ol><li>使用 x-template 建立表格元件</li><li>使用 is 掛載 template</li><li>使用 prop 傳遞資料</li><li>說明局部註冊及全域註冊</li></ol>



<p>components/basic.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;table class="table"&gt;
    &lt;thead&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;!-- &lt;row-component v-for="(item, key) in data" :person="item" :key="key"&gt;&lt;/row-component&gt; --&gt;
      &lt;tr is="row-component" v-for="(item, key) in data" :person="item" :key="key"&gt;&lt;/tr&gt;
      &lt;!-- &lt;tr v-for="(item, key) in data" :item="item" :key="key"&gt;
        &lt;td&gt;{{ item.name }}&lt;/td&gt;
        &lt;td&gt;{{ item.cash }}&lt;/td&gt;
        &lt;td&gt;{{ item.icash }}&lt;/td&gt;
      &lt;/tr&gt; --&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="rowComponentTemplate"&gt;
  &lt;tr&gt;
    &lt;td&gt;{{ person.name }}&lt;/td&gt;
    &lt;td&gt;{{ person.cash }}&lt;/td&gt;
    &lt;td&gt;{{ person.icash }}&lt;/td&gt;
  &lt;/tr&gt;
&lt;/script&gt;

&lt;script&gt;
// 全域註冊
// Vue.component('row-component', {
//   props: &#91;'person'],
//   template: '#rowComponentTemplate'
// })

// 局部註冊
var child = {
  props: &#91;'person'],
  template: '#rowComponentTemplate'
}

var app = new Vue({
  el: '#app',
  data: {
    data: &#91;
      {
        name: '小明',
        cash: 100,
        icash: 500,
      },
      {
        name: '杰倫',
        cash: 10000,
        icash: 5000,
      },
      {
        name: '漂亮阿姨',
        cash: 500,
        icash: 500,
      },
      {
        name: '老媽',
        cash: 10000,
        icash: 100,
      },
    ]
  },
  components: {
    "row-component": child
  }
});
&lt;/script&gt;</code></pre>



<h3>使用 function return 建構資料格式</h3>



<h5>元件必須使用 function return</h5>



<ol><li>修正計數器所產生的錯誤</li></ol>



<p>components/function_return.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;counter-component&gt;&lt;/counter-component&gt;
  &lt;counter-component&gt;&lt;/counter-component&gt;
  &lt;counter-component&gt;&lt;/counter-component&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="counter-component"&gt;
&lt;div&gt;
  你已經點擊 &lt;button class="btn btn-outline-secondary btn-sm" @click="counter += 1"&gt;{{ counter }}&lt;/button&gt; 下。
&lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.component('counter-component', {
  data: function(){
    return {
    counter: 0
    }
  },
  template: '#counter-component'
})

var app = new Vue({
  el: '#app',
});
&lt;/script&gt;</code></pre>



<h3>props 基本觀念</h3>



<h5>由外到內的資料傳遞</h5>



<p>components/prop_basic.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h2&gt;靜態傳遞&lt;/h2&gt;
  &lt;photo img-url="https://images.unsplash.com/photo-1522204538344-922f76ecc041?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=50e38600a12d623a878983fc5524423f&amp;auto=format&amp;fit=crop&amp;w=1351&amp;q=80"&gt;&lt;/photo&gt;
  &lt;h2&gt;動態傳遞&lt;/h2&gt;
  &lt;photo :img-url="url"&gt;&lt;/photo&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="photo"&gt;
&lt;div&gt;
  &lt;img :src="imgUrl" class="img-fluid" alt="" /&gt;
  &lt;p&gt;風景照&lt;/p&gt;
&lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.component('photo', {
  // 同學請依據課程內容，自行填寫 Props 的寫法
  props: &#91;'imgUrl'],
  template: '#photo'
})

var app = new Vue({
  el: '#app',
  data: {
    url: 'https://images.unsplash.com/photo-1522204538344-922f76ecc041?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=50e38600a12d623a878983fc5524423f&amp;auto=format&amp;fit=crop&amp;w=1351&amp;q=80'
  }
});
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// props: &#91;'imgUrl'] 是用小駝峰的寫法，但是轉到HTML上的時候，這樣是不符合規範的，必須在遇到大寫的時候改成小寫，&lt;photo img-url="網址"&gt;&lt;/photo&gt;，這段資料就會透過props把它傳進來。</code></pre>



<p><strong>props 屬性非常重要。</strong></p>



<h3>props 使用上的注意事項</h3>



<h5>Props 注意事項</h5>



<ol><li>單向數據流</li><li>物件傳參考特性及尚未宣告的變數</li><li>維持狀態與生命週期</li></ol>



<p>處理 props 的時候盡量維持單向數據流的觀念。</p>



<p>如果資料匯入有時間差，就可以用 v-if 讓元件的產生時間往後移，讓他與資料完成一起同步繪製。</p>



<p>JavaScript 的一個特性：物件在傳遞的時候是傳參考</p>



<pre class="wp-block-code"><code>// 用 Google Console 解釋物件傳參考特性
&gt; var a = { user: '小明' }
&lt; undefined
&gt; var b = a;
&lt; undefined
&gt; b.user = "小強";
&lt; "小強"
&gt; console.log(a.user);
  小強
&lt; undefined
&gt;</code></pre>



<p>components/prop_adv.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h2&gt;單向數據流&lt;/h2&gt;
  &lt;photo :img-url="url"&gt;&lt;/photo&gt;
  &lt;p&gt;修正單向數據流所造成的錯誤&lt;/p&gt;

  &lt;h2 class="mt-3"&gt;物件傳參考特性 及 尚未宣告的變數&lt;/h2&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-sm-4"&gt;
      &lt;card :user-data="user" v-if="user.phone"&gt;&lt;/card&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;h2 class="mt-3"&gt;維持狀態與生命週期&lt;/h2&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="isShow" v-model="isShow"&gt;
    &lt;label class="form-check-label" for="isShow"&gt;Check me out&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-sm-4"&gt;
      &lt;keep-alive&gt;
        &lt;keep-card  v-if="isShow"&gt;
        &lt;/keep-card&gt;
      &lt;/keep-alive&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="photo"&gt;
&lt;div&gt;
  &lt;img :src="imgUrl" class="img-fluid" alt="" /&gt;
  &lt;input type="text" class="form-control" v-model="newUrl"&gt;
&lt;/div&gt;
&lt;/script&gt;


&lt;script type="text/x-template" id="card"&gt;
&lt;div class="card"&gt;
  &lt;img class="card-img-top" :src="user.picture.large" v-if="user.picture" alt="Card image cap"&gt;
  &lt;div class="card-body"&gt;
    &lt;h5 class="card-title" v-if="user.name"&gt;{{ user.name.first }} {{ user.name.last }}&lt;/h5&gt;
    &lt;p class="card-text"&gt;{{ user.email }}&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="card-footer"&gt;
    &lt;input type="email" class="form-control" v-model="user.email"&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.component('photo', {
  props: &#91;'imgUrl'],
  template: '#photo',
  data: function() {
    return {
      newUrl: this.imgUrl
    }
  }
})

Vue.component('card', {
  props: &#91;'userData'],
  template: '#card',
  data: function () {
    return {
      user: this.userData
    }
  }
});

Vue.component('keepCard', {
  template: '#card',
  data: function() {
    return {
      user: {}
    }
  },
  created: function() {
    var vm = this;
    $.ajax({
      url: 'https://randomuser.me/api/',
      dataType: 'json',
      success: function(data) {
        vm.user = data.results&#91;0];
      }
    });
  }
});

var app = new Vue({
  el: '#app',
  data: {
    user: {},
    url: 'https://images.unsplash.com/photo-1522204538344-922f76ecc041?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=50e38600a12d623a878983fc5524423f&amp;auto=format&amp;fit=crop&amp;w=1351&amp;q=80',
    isShow: true 
  },
  created: function() {
    var vm = this;
    $.ajax({
      url: 'https://randomuser.me/api/',
      dataType: 'json',
      success: function(data) {
        vm.user = data.results&#91;0];
      }
    });
  }
});
&lt;/script&gt;</code></pre>



<h3>props 型別及預設值</h3>



<p>這個型別的定義有助於開發的時候就找到錯誤。</p>



<h5>靜態與動態傳入數值差異</h5>



<ul><li>靜態：string</li><li>動態：number</li></ul>



<p>components/prop_type.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h2&gt;Props 的型別&lt;/h2&gt;
  &lt;prop-type&gt;&lt;/prop-type&gt;

  &lt;h2 class="mt-3"&gt;靜態與動態傳入數值差異&lt;/h2&gt;
  &lt;prop-type :cash="300"&gt;&lt;/prop-type&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="propType"&gt;
&lt;div&gt;
  &lt;input type="number" class="form-control" v-model="newCash"&gt;
  {{ typeof(cash)}}
&lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.component('prop-type', {
  // props: &#91;'cash'],
  props: {
    cash: {
      type: Number,
      default: 300
    }
  },

  // 解答：
  // props: {
  //   cash: {
  //     type: Number,
  //     default: 100
  //   }
  // },
  template: '#propType',
  data: function() {
    return {
      newCash: this.cash
    }
  }
});

var app = new Vue({
  el: '#app',
  data: {
    cash: 300
  }
});
&lt;/script&gt;</code></pre>



<h3>emit 向外層傳遞事件</h3>



<p>components/emit.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h2&gt;透過 emit 向外傳遞資訊&lt;/h2&gt;
  我透過元件儲值了 {{ cash }} 元
  &lt;button class="btn btn-primary" v-on:click="incrementTotal"&gt;按我&lt;/button&gt;
  &lt;button-counter v-on:increment="incrementTotal"&gt;&lt;/button-counter&gt;
  &lt;hr&gt;
  &lt;button-counter&gt;&lt;/button-counter&gt;
&lt;/div&gt;

&lt;script&gt;
Vue.component('buttonCounter', {
  template: `&lt;div&gt;
    &lt;button @click="incrementCounter" class="btn btn-outline-primary"&gt;增加 {{ counter }} 元&lt;/button&gt;
    &lt;input type="number" class="form-control mt-2" v-model="counter"&gt;
  &lt;/div&gt;`,
  data: function() {
    return {
      counter: 1
    }
  },
  methods: {
    incrementCounter: function() {
      this.$emit('increment', Number(this.counter))
    }
  }
});

var app = new Vue({
  el: '#app',
  data: {
    cash: 300
  },
  methods: {
    incrementTotal: function(newNumber) {
      this.cash = this.cash + newNumber;
    }
  }
});
&lt;/script&gt;</code></pre>



<p>觸發事件名稱可以自訂。</p>



<p>emit 可以用來觸發實體上的事件。</p>



<p>此章節比較複雜，建議自行重頭寫一次，比較容易了解這段的邏輯。</p>



<h3>元件插槽</h3>



<h5>Slot 插槽替換</h5>



<ul><li>沒有插槽可替換的狀態</li><li>單一個插槽的元件</li><li>具名插槽的元件</li></ul>



<p>components/slot.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h2&gt;沒有插槽可替換的狀態&lt;/h2&gt;
  &lt;no-slot-component&gt;
    &lt;p&gt;這是一段另外插入的內容&lt;/p&gt;
  &lt;/no-slot-component&gt;

  &lt;h2&gt;Slot 基礎範例&lt;/h2&gt;
  &lt;single-slot-component&gt;
  &lt;/single-slot-component&gt;
  &lt;single-slot-component&gt;
    &lt;p&gt;使用這段取代原本的 Slot。&lt;/p&gt;
  &lt;/single-slot-component&gt;

  &lt;h2&gt;具名插槽&lt;/h2&gt;
  &lt;named-slot-component&gt;
  &lt;/named-slot-component&gt;

  &lt;named-slot-component&gt;
    &lt;header slot="header"&gt;替換的 Header&lt;/header&gt;
    &lt;template&gt;替換的 Footer&lt;/template&gt;
    &lt;template slot="btn"&gt;按鈕內容&lt;/template&gt;
    &lt;p&gt;其餘的內容&lt;/p&gt;
  &lt;/named-slot-component&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="noSlotComponent"&gt;
&lt;div class="alert alert-warning"&gt;
  &lt;h6&gt;我是一個元件&lt;/h6&gt;
  &lt;p&gt;
    這沒有插槽。
  &lt;/p&gt;
&lt;/div&gt;
&lt;/script&gt;

&lt;script type="text/x-template" id="singleSlotComponent"&gt;
&lt;div class="alert alert-warning"&gt;
  &lt;h6&gt;我是一個元件&lt;/h6&gt;
  &lt;slot&gt;
    如果沒有內容，則會顯示此段落。
  &lt;/slot&gt;
&lt;/div&gt;
&lt;/script&gt;

&lt;script type="text/x-template" id="namedSlotComponent"&gt;
&lt;div class="card my-3"&gt;
  &lt;div class="card-header"&gt;
    &lt;slot name="header"&gt;這段是預設的文字&lt;/slot&gt;
  &lt;/div&gt;
  &lt;div class="card-body"&gt;
    &lt;slot&gt;
      &lt;h5 class="card-title"&gt;Special title treatment&lt;/h5&gt;
      &lt;p class="card-text"&gt;With supporting text below as a natural lead-in to additional content.&lt;/p&gt;
    &lt;/slot&gt;
    &lt;a href="#" class="btn btn-primary"&gt;
      &lt;slot name="btn"&gt;spanGo somewhere&lt;/slot&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="card-footer"&gt;
    &lt;div&gt;這是預設的 Footer&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.component('no-slot-component', {
  template: '#noSlotComponent',
});

Vue.component('single-slot-component', {
  template: '#singleSlotComponent',
});

Vue.component('named-slot-component', {
  template: '#namedSlotComponent',
});

var app = new Vue({
  el: '#app',
  data: {}
});
&lt;/script&gt;</code></pre>



<h3>使用 is 動態切換元件</h3>



<p>components/is.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h2&gt;使用 is 顯示單一組件&lt;/h2&gt;
  &lt;primary-component :data="item"&gt;&lt;/primary-component&gt;
  &lt;div is="primary-component" :data="item"&gt;&lt;/div&gt;

  &lt;h2 class="mt-3"&gt;使用 is 動態切換組件&lt;/h2&gt;
  &lt;ul class="nav nav-pills"&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link" :class="{'active': current == 'primary-component'}" href="#" @click.prevent="current = 'primary-component'"&gt;藍綠色元件&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link" :class="{'active': current == 'danger-component'}" href="#" @click.prevent="current = 'danger-component'"&gt;紅色元件&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;div class="mt-3"&gt;
    &lt;!-- &lt;primary-component :data="item" v-if="current === 'primary-component'"&gt;&lt;/primary-component&gt;
    &lt;danger-component :data="item" v-if="current === 'danger-component'"&gt;&lt;/danger-component&gt; --&gt;
    &lt;div :is="current" :data="item"&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="primaryComponent"&gt;
&lt;div class="card text-white bg-primary mb-3" style="max-width: 18rem;"&gt;
  &lt;div class="card-header"&gt;{{ data.header }}&lt;/div&gt;
  &lt;div class="card-body"&gt;
    &lt;h5 class="card-title"&gt;{{ data.title }}&lt;/h5&gt;
    &lt;p class="card-text"&gt;{{ data.text }}&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;
&lt;script type="text/x-template" id="dangerComponent"&gt;
&lt;div class="card text-white bg-danger mb-3" style="max-width: 18rem;"&gt;
  &lt;div class="card-header"&gt;{{ data.header }}&lt;/div&gt;
  &lt;div class="card-body"&gt;
    &lt;h5 class="card-title"&gt;{{ data.title }}&lt;/h5&gt;
    &lt;p class="card-text"&gt;{{ data.text }}&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.component('primary-component', {
  props: &#91;'data'],
  template: '#primaryComponent',
});
Vue.component('danger-component', {
  props: &#91;'data'],
  template: '#dangerComponent',
});

var app = new Vue({
  el: '#app',
  data: {
    item: {
      header: '這裡是 header',
      title: '這裡是 title',
      text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim perferendis illo reprehenderit ex natus earum explicabo modi voluptas cupiditate aperiam, quasi quisquam mollitia velit ut odio vitae atque incidunt minus?'
    },
    current: 'primary-component'
  }
});
&lt;/script&gt;</code></pre>



<h3>元件 章節作業說明</h3>



<h5>作業練習：元件變換</h5>



<h5>模板練習作業：Ajax 資料內容呈現</h5>



<p>本作業一定要用到元件。</p>



<h5>提示：</h5>



<ol><li>將資料內容透過 “元件” 呈現</li><li>製作城市過濾選項</li><li>將內層資料透過 emit 傳遞到外層 (作為另一個關注城市的呈現)</li><li>依據不同汙染呈現不同色彩</li><li>加分題：透過 localStorage 儲存上次關注的城市</li></ol>



<p>元件作業程式碼參考：<a rel="noreferrer noopener" href="https://codepen.io/alysachan/pen/vYXVBVX?editors=0010" target="_blank">Codepen – Alysa Chan</a>、<a href="https://codepen.io/jasmjazz/pen/RwGxJbe" target="_blank" rel="noreferrer noopener">Codepen – jasmjazz</a><br>元件作業筆記參考：<a rel="noreferrer noopener" href="https://hackmd.io/@cRuVI2UfSzOb4NzLg9sJ7g/SkjKXjFCP" target="_blank">各地空氣質素監察</a></p>



<p>components/homework_component.html</p>



<pre class="wp-block-code"><code>&lt;div id="app" class="container-fluid"&gt;
  &lt;select name="" id="" class="form-control mb-3" v-model="filter"&gt;
    &lt;option value="" disabled&gt;--- 請選擇城市 ---&lt;/option&gt;
    &lt;option v-for="item in countyList" :value="item"&gt;{{ item }}&lt;/option&gt;
  &lt;/select&gt;
  &lt;h4&gt;關注城市&lt;/h4&gt;
  &lt;div class="row"&gt;
    &lt;card-component
    v-for="(item, key) in starCounty"
    :star="starList"
    :place="item"
    :key="item.SiteId"
    @change-icon="clickStar"&gt;
    &lt;/card-component&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;h4&gt;所有測站&lt;/h4&gt;
  &lt;div class="row"&gt;
    &lt;card-component
    v-for="(item, key) in filterCounty"
    :star="starList"
    :place="item"
    :key="item.SiteId"
    @change-icon="clickStar"&gt;
    &lt;/card-component&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="cardComponentTemplate"&gt;
  &lt;div class="col-md-4 mt-3"&gt;
    &lt;div class="card"&gt;
      &lt;div class="card-header"&gt;
        {{ place.County }} - {{ place.SiteName }}
        &lt;a href="#" class="float-right" @click.prevent="clickIcon"&gt;
          &lt;i :class="iconStyle"&gt;&lt;/i&gt;
        &lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="card-body" :class="aqiColor"&gt;
        &lt;ul class="list-unstyled"&gt;
          &lt;li&gt;AQI 指數：{{ place.AQI }}&lt;/li&gt;
          &lt;li&gt;PM2.5：{{ place&#91;'PM2.5'] }}&lt;/li&gt;
          &lt;li&gt;說明：{{ place.Status }}&lt;/li&gt;
        &lt;/ul&gt;
        {{ place.PublishTime }}
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.component('card-component', {
  props: &#91;'place', 'star'],
  template: '#cardComponentTemplate',
  methods: {
    clickIcon: function() {
      this.$emit('change-icon', this.place.SiteName);
    }
  },
  computed: {
    aqiColor() {
      switch(this.place.Status){
        case '良好':
          return 'status-aqi1';
          break;
        case '普通':
          return 'status-aqi2';
          break;
        case '對敏感族群不健康':
          return 'status-aqi3';
          break;
        case '對所有族群不健康':
          return 'status-aqi4';
          break;
        case '非常不健康':
          return 'status-aqi5';
          break;
        case '危害':
          return 'status-aqi6';
          break;
      }
    },
    iconStyle() {
      return (this.star.indexOf(this.place.SiteName) === -1) ? 'far fa-star' : 'fas fa-star';
    }
  }
});
// API 來源
// https://opendata.epa.gov.tw/Data/Contents/AQI/
// http://opendata2.epa.gov.tw/AQI.json
// https://opendata.epa.gov.tw/api/v1/AQI?%24skip=0&amp;%24top=1000&amp;%24format=json

var app = new Vue({
  el: '#app',
  data: {
    aqiData: &#91;],
    filter: '',
    starList: JSON.parse(localStorage.getItem('starList')) || &#91;]
  },
  // 請在此撰寫 JavaScript
  methods: {
    clickStar: function(item) {
      // 判斷是否有重複的site name，如沒有就加入，如有就刪除該筆城市資料
      if(this.starList.indexOf(item) === -1) {
        this.starList.push(item);
      } else {
        this.starList.splice(this.starList.indexOf(item, 1));
      }
      localStorage.setItem('starList', JSON.stringify(this.starList));
    }
  },
  computed: {
    countyList() {
      let county = this.aqiData.map(item =&gt; item.County);
      // Set 物件只會容許儲存單一值
      // 用展開運算子，把Set物件轉為陣列
      // return new Set(&#91;...county]);
      return &#91;...new Set(county)]; // 過濾重複的county
    },
    filterCounty() {
      let vm = this;
      // 剛載入畫面後，預設顯示所有資料
      if(this.filter === '') {
        // 不顯示已被加進關注城市的城市
        return this.aqiData.filter(item =&gt; vm.starList.indexOf(item.SiteName) === -1);
        // 案filter的地區名稱去撈資料
      } else {
        let filterList = this.aqiData.filter(item =&gt; item.County === vm.filter);
        // 不顯示已被加進關注城市的城市
        return filterList.filter(item =&gt; vm.starList.indexOf(item.SiteName) === -1);
      }
    },
    starCounty() {
      let vm = this;
      // 如果該筆資料的SiteName是存在starList裡，就回傳該筆資料
      return vm.aqiData.filter(item =&gt; vm.starList.indexOf(item.SiteName) !== -1);
    }
  },
  mounted: function() {
      const vm = this;
      const api = 'https://opendata.epa.gov.tw/api/v1/AQI?%24skip=0&amp;%24top=1000&amp;%24format=json';

      // 使用 jQuery ajax
      $.get(api).then(function(response) {
        vm.aqiData = response;
        console.log(response);
      }).catch(function(error) {
        // 請求失敗
        alert("請求失敗");
        console.log(error);
      });
  }
});
&lt;/script&gt;
&lt;!-- 
狀態對應表
'status-aqi1' '良好',
'status-aqi2' '普通',
'status-aqi3' '對敏感族群不健康',
'status-aqi4' '對所有族群不健康',
'status-aqi5' '非常不健康',
'status-aqi6' '危害'
--&gt; 
&lt;style&gt;
.status-aqi1 {
  background-color: #97d077;
}
.status-aqi2 {
  background-color: #ffff00;
}
.status-aqi3 {
  background-color: #ff7e00;
}
.status-aqi4 {
  background-color: #ff0000;
}
.status-aqi5 {
  background-color: #8f3f97;
}
.status-aqi6 {
  background-color: #7e0023;
}
&lt;/style&gt;</code></pre>



<h2>第７節：JavaScript ES6</h2>



<h3>使用 let 與 const 宣告變數</h3>



<h5>let, const ES6 基礎教學</h5>



<p>es6/let_const.html</p>



<pre class="wp-block-code"><code>// #1
// 修改 var → let
// console.log(mom);
// var mom = '老媽';
// (function () { // 立即函式
//   console.log(mom);
// })();

// undefined 記憶體準備位置
// not defined 沒有準備空間
// var 有hoisting的特性

// #2
// 修改 var → let
// var 作用域 是 function scope
// let 作用域 是 block
// function varMing () {
//   let ming = '小明';
//   if (true) {
//     let ming = '杰哥';
//     // 這裡的 ming 依然是外層的小明，所以小明即將被取代
//   }
//   console.log(ming); // '杰哥'
//   }
//   varMing();

// #3
// 修改 var → let
// for (let i = 0; i &lt; 10; i++) { // var i = 全域
//   console.log(i);
//   setTimeout(function) () {
//     console.log('這執行第' + i + '次');
//   }, 10);
// }

// #4
// const
// const 是一個宣告常數，這個常數是不能被更換的
// 使用 const 宣告一個變數後，是不能被更改的
// const ming = '鐵錚錚男子漢';
// ming = '不是男子漢';

// #5
// const 與 物件
// const family = {
//   mom: '老媽',
//   me: '小明',
//   sister: '小橙'
// };
// family.father = '爸爸';
// console.log(family);
// family = {};
// 物件，本身是傳參考

// #6
// 額外問題，不使用 let、上述答案如何解答
for (var i = 0; i &lt; 10; i++) {
  console.log(i);
  (function(i) {
    setTimeout(function () {
    console.log('這執行第' + i + '次');
  }, 10);
  })(i);
}</code></pre>



<h3>展開與其餘參數</h3>



<p>es6/spread_operator.html</p>



<pre class="wp-block-code"><code>// #1 使用展開語法，合併以下陣列
// let groupA = &#91;'小明', '杰倫', '阿姨'];
// let groupB = &#91;'老媽', '老爸'];
// 方法一
// let groupAll = groupA.concat(groupB);
//方法二
// let groupAll = &#91;...groupA, ...groupB];
// console.log(groupAll);
// console.log(...groupA);
// console.log(...groupB);

// #2 淺複製觀念說明 (shallow copy)
// 陣列與物件都是傳參考，當兩個的參考是一樣的時候，裡面的值會同時變動
// let groupA = &#91;'小明', '杰倫', '阿姨'];
// let groupB = groupA;
// groupB.push('阿明');
// console.log(groupA); // 請問此時的 groupA 值為何

// 為了A與B明顯不同，可以使用展開的方法
// let groupA = &#91;'小明', '杰倫', '阿姨'];
// let groupB = &#91;...groupA];
// groupB.push('阿明');
// console.log(groupA); // 請問此時的 groupA 值為何

// #3 類陣列觀念說明一
// 很像陣列，但其實不是
// 類陣列 __proto__ 方法很少，陣列方法比較多
// let doms = document.querySelectorAll('li');
// let newDoms = &#91;...doms];
// console.log(newDoms, doms);

// #4 類陣列觀念說明二
// 使用展開的方式來解決類陣列產生的錯誤
// var originCash = 1000;
// function updateEasyCard() {
//   // let arg = arguments;
//   let arg = &#91;...arguments];
//   // console.log(arguments);
//   console.log(arg);
//   let sum = arg.reduce(function (accumulator, currentValue) {
//     return accumulator + currentValue;
//    }, 0);
//    console.log('我有 ' + sum + ' 元');
// }
// updateEasyCard(0); // 我有 1000 元
// updateEasyCard(10, 50, 100, 50, 5, 1, 1, 1, 500); // 我有 718 元

// #5 其餘參數
// function moreMoney(ming, ...money) {
//   console.log(ming, money);
// }
// moreMoney('小明', 100, 200, 300, 400, 500);</code></pre>



<h3>解構</h3>



<h5>解構賦值</h5>



<p>將右方的資料<strong>鏡射</strong>到另一方。<br>(不是完全的鏡射、左右顛倒，排列順序不會因此而改變)</p>



<pre class="wp-block-code"><code>// #1 陣列解構
// 1. 請將 family 的值，一一賦予到變數上
// 2. 請將後面三個名字賦予到另一個陣列上
// let family = &#91;'小明', '杰倫', '阿姨', '老媽', '老爸'];
// let ming = family&#91;0];
// let jay = family&#91;1];
// let auntie = family&#91;2];

// 01
// let &#91;ming, jay, auntie, mom, father] = family;
// console.log(ming, jay, auntie, mom, father);
// 02
// let &#91;ming, jay, auntie] = family;
// console.log(ming, jay, auntie);
// 03
// let &#91;ming, jay, , mom, father] = family;
// console.log(ming, jay, mom, father);

// #2 請交換以下兩個變數
// let Goku = '悟空';
// let Ginyu = '基紐';
// &#91;Goku, Ginyu] = &#91;Ginyu, Goku];
// console.log(Goku, Ginyu);

// #3 請拆解以下字元到單一變數上
// let str = '基紐特攻隊';
// let &#91;q, a, z, w, s] = str;
// console.log(q, a, z, w, s);

// #4 物件解構
// 請取出物件內的兩個值到單一變數上
// let family = {
//   ming: '小明',
//   jay: '杰倫',
// };
// let familyAll = {...family};
// console.log(familyAll);

// #5
// 取出其中一個值，並附在新的變數名稱上
// let GinyuTeam = {
//   Ginyu: '基紐',
//   Jeice: '吉斯',
//   Burter: '巴特',
//   //...
// }
// let { Ginyu: Goku } = GinyuTeam;
// console.log(Goku);

// #6 延伸問題
// let { ming: Goku, family: &#91;, mom] } = { ming: '小明', family: &#91;'阿姨', '老媽', '老爸'] }
// console.log(Goku, mom); // 請問答案是什麼？
// 小明, 老媽

// #7 預設值
// let &#91;ming = '小明', jay = '杰倫'] = &#91;'阿明']
// // 第一個會被賦值，第二個會用預設
// // ming: '阿明'
// // jay: '杰倫'
// console.log(ming, jay);

// let { family: ming = '小明' } = {}
// // ming: '小明'
// console.log(ming);</code></pre>



<h3>縮寫</h3>



<p>es6/shorthand.html</p>



<pre class="wp-block-code"><code>// #1 物件縮寫
// 請將以下兩個合併至一個物件上
// const Frieza = '弗利沙'
// const GinyuTeam = {
//   Ginyu: '基紐',
//   Jeice: '吉斯',
//   burter: '巴特',
//   // ...
// }
// 物件合併至一個物件上
// const newTeam = {
//   GinyuTeam: GinyuTeam,
//   Frieza: Frieza
// }
// console.log(newTeam);
// 縮寫
// const newTeam = {
//   GinyuTeam,
//   Frieza
// }
// console.log(newTeam);

// #2 案例
// 在 Vue.js CLI 常見情境
// import Vue from 'vue'
// import App from './App'
// import router from './router'
// // 將套件由 './App' 路徑載入，並使用 App 這個變數名稱
// new Vue({
//   el: '#app',
//   router,
//   template: '&lt;App/&gt;',
//   components: { App }
// });
// // 縮寫方式載入及使用

// #3 物件函式縮寫
// 縮寫以下 showPosture Function
// const newTeam = {
//   // ...
//   showPosture: function () {
//     console.log('我們是 基紐特戰隊')
//   }
// }
// console.log(newTeam.showPosture());
// 縮寫
// 與箭頭函式結果是不一致
// const newTeam = {
//   // ...
//   showPosture () {
//     console.log('我們是 基紐特戰隊');
//   }
// }
// console.log(newTeam.showPosture());

// #4 搭配解構使用
// 將以下物件指向賦予到另一個物件上，並且避免參考
// const GinyuTeam = {
//   Ginyu: {
//     name: '基紐'
//   },
//   Jeice: {
//     name: '吉斯'
//   },
//   burter: { 
//     name: '巴特'
//   },
//   // ...
// }
// const newTeam = GinyuTeam;
// newTeam.ming = '小明';
// console.log(newTeam, GinyuTeam);
// 縮寫
// const newTeam = {
//   ...GinyuTeam
// };
// newTeam.ming = '小明';
// console.log(newTeam, GinyuTeam);</code></pre>



<h3>箭頭函式與傳統函式</h3>



<p>es6/arrow_function.html</p>



<pre class="wp-block-code"><code>// #1 改寫傳統函式
// 將以下改寫成 Arrow Function，並嘗試縮寫形式
// var callSomeone = function (someone) {
//   return someone + '吃飯了'
// }
// console.log(callSomeone('小明'))
// 最常使用的箭頭函式
// var callSomeone = (someone) =&gt; {
//   return someone + '吃飯了'
// }
// console.log(callSomeone('小明'));
// 只有一行的情況下，可以省略括號，並且也把return拿掉，括號也可以省略
// var callSomeone = someone =&gt; someone + '吃飯了';
// console.log(callSomeone('小明'));
// 沒有傳入參數的情況下，需要括號
// var callSomeone = () =&gt; '小明' + '吃飯了';
// console.log(callSomeone());

// #2 沒有 arguments 參數
// 將以下改寫成 Arrow Function，並觀察差異
// const updateEasyCard = function () {
//   let cash = 0;
//   console.log(arguments); // arguments is not defined
// }
// updateEasyCard(10, 50, 100, 50, 5, 1, 1, 1, 500);
// 箭頭縮寫
// 其餘參數
// const updateEasyCard = (...arg) =&gt; {
//   let cash = 0;
//   console.log(arg); // arguments is not defined
// }
// updateEasyCard(10, 50, 100, 50, 5, 1, 1, 1, 500);

// #3 this 綁定的差異
// var name = '全域阿婆'
// var auntie = {
//   name: '漂亮阿姨',
//   callName: function () { 
//     console.log('1', this.name, this); // 1 漂亮阿姨
//     setTimeout(function () {
//       console.log('2', this.name); // 2 漂亮阿姨
//       console.log('3', this); // 3 auntie 這個物件
//     }, 10);
//   },
//   callName2: () =&gt; { 
//     console.log('1 arrow', this.name, this); // 1 漂亮阿姨
//     setTimeout(() =&gt; {
//       console.log('2 arrow', this.name); // 2 漂亮阿姨
//       console.log('3 arrow', this); // 3 auntie 這個物件
//     }, 10);
//   },
// }
// auntie.callName();
// auntie.callName2();
// setTimeout = window.setTimeout
// 傳統this = 函式的呼叫方式
// 物件內使用arrow function指向的可能是全域
// 並不一定綁定在window上，可能會綁定在其他物件上
// 原因就是因為他是綁定在他定義時的物件上
// 特別注意的是，不是所有的情境都適合arrow function
// 舉例
// 建議在Vue的methods裡面，使用的是傳統函式，並且使用縮寫的方式呈現
// var name = '全域阿婆'
// var auntie = {
//   name: '漂亮阿姨',
//   callName () {
//     console.log('1', this.name, this);
//     window.setTimeout(function () {
//       console.log('2', this.name);
//       console.log('3', this);
//     }, 10);
//   },
// }
// auntie.callName();

// #4 善用的方式
// 請將內層的 console.log 能夠指向 auntie 這個物件
// var auntie = {
//   name: '漂亮阿姨',
//   callName () { 
//     var vm = this;
//     setTimeout(() =&gt; {
//       console.log(vm, vm.name);
//     }, 10);
//   }
// }
// auntie.callName();</code></pre>



<h3>字串模板 Template String</h3>



<p>es6/template_string.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;&lt;/div&gt;
&lt;script&gt;
// #1 樣板字串
// 將以下改寫成 Template String 寫法
const people = &#91;
  {
    name: '小明',
    friends: 2
  },
  {
    name: '阿姨',
    friends: 999
  },
  {
    name: '杰倫',
    friends: 0
  }
]
let originString = '我叫做 ' + people&#91;0].name;
let originUl = '&lt;ul&gt;\
  &lt;li&gt;我叫做 ' + people&#91;0].name + '&lt;/li&gt;\
  &lt;li&gt;我叫做 ' + people&#91;1].name + '&lt;/li&gt;\
  &lt;li&gt;我叫做 ' + people&#91;2].name + '&lt;/li&gt;\
&lt;/ul&gt;';

console.log(originString, originUl);

let newString = `我叫做 ${people&#91;0].name}`
let newUl = `
  &lt;ul&gt;
    &lt;li&gt;我叫做 ${people&#91;0].name}&lt;/li&gt;
    &lt;li&gt;我叫做 ${people&#91;1].name}&lt;/li&gt;
    &lt;li&gt;我叫做 ${people&#91;2].name}&lt;/li&gt;
  &lt;/ul&gt;
`
newUl = `
  &lt;ul&gt;
    ${people.map(person =&gt; `&lt;li&gt;我叫做 ${person.name}&lt;/li&gt;`).join('')}
  &lt;/ul&gt;
`

console.log(newString, newUl);
$('#app').html(newUl);
&lt;/script&gt;</code></pre>



<h3>常用陣列方法 (上)</h3>



<p>es6/array_function.html</p>



<pre class="wp-block-code"><code>// #1 樣板字串
// 將以下改寫成 Template String 寫法
const people = &#91;
  {
    name: '小明',
    money: 500
  },
  {
    name: '漂亮阿姨',
    money: 3000
  },
  {
    name: '杰倫',
    money: 60000
  },
  {
    name: '老媽',
    money: Infinity
  }
];

// forEach 與 map
// 將所有物件增加 icash 有多少金額的欄位
// 使用for迴圈
// for (let i = 0; i &lt; people.length; i++) {
//   console.log(people&#91;i]);
// }
// 使用forEach
// people.forEach(function(item, index, array) {
//   console.log(item, index, array);
// })
// 增加金額500
// people.forEach(function(item, index, array) {
//   item.icash = item.money + 500;
//   console.log(item);
// })
// map
// const newpeople = people.map(function(item, index, array){
//   // item.icash = item.money + 500;
//   // console.log(item);
//   return {
//     ...item,
//     icash: item.money + 500
//   }
// });
// console.log(newpeople);
// 不適合用map來過濾
// const newpeople = people.map(function (item, index, array) {
//   // item.icash = item.money + 500;
//   // console.log(item);
//   if (item.money &gt; 2000) {
//     return {
//       ...item,
//       icash: item.money + 500
//     }
//   }
// });
// console.log(newpeople);

// filter
// 挑出金額少於 5000 的物件
// true
// const filterPeople = people.filter(function(item, index) {
//   return true;
// })
// console.log(filterPeople);
// false
// const filterPeople = people.filter(function(item, index) {
//   return false;
// })
// console.log(filterPeople);
// filter過濾方法
// const filterPeople = people.filter(function(item, index) {
//   if (item.money &lt; 5000) {
//     return true;
//   }
// })
// console.log(filterPeople);

// find
// 1. 找到金額 = 500 的物件
// 2. 找到 &gt; 5000 的物件
// find只會把找到的資料只回傳一次，會回傳本身的值
// filter是把所有的資料都回傳，本身回傳的結果是陣列
// const findPeople = people.find(function(item, index) {
//   if (item.money == 500) {
//     return true;
//   }
// })
// console.log(findPeople);</code></pre>



<h3>常用陣列方法 (下)</h3>



<p>es6/array_function.html</p>



<pre class="wp-block-code"><code>// every
// every、some是用來取得一個true、false的結果
// every - 所有結果都為 true, return 才會是 true
// 1. 所有物件是否都超過 10000 元
// 2. 是否所有物件超過 300 元
// const ans = people.every(function(item, i) {
//   return item.money &gt; 300;
// });
// console.log(ans);

// some
// 1. 是否有物件超過 10000 元
// 2. 是否有物件持有金額少於 300元
// some - 部分為 true, return 是 true
// const ans = people.some(function (item, i) {
//   return item.money &gt; 10000;
// });
// console.log(ans);

// reduce
// 去除掉老媽，請問剩下的人有多少錢？
// 01
// const newNumber = people.reduce(function(prev, item, index){
//   console.log(prev);
//   return prev + 500
// }, 100)
// 02
// const newNumber = people.reduce(function(prev, item, index){
//   console.log(prev);
//   return prev + item.money
// }, 0)
// console.log(newNumber);
// 03 比大小
// 物件順序做調整
const newNumber = people.reduce(function(prev, item, index){
  console.log(prev);
  return Math.max(prev, item.money)
}, 0)
console.log('newNumber', newNumber);</code></pre>



<h2>第８節：Vue 常用 API</h2>



<p><a href="https://cn.vuejs.org/v2/api/index.html#%E5%85%A8%E5%B1%80-API" target="_blank" rel="noreferrer noopener">全局API</a></p>



<h3>使用 Extend 避免重複造輪子</h3>



<p>情境：假設有兩個元件、或是數個元件差異非常小，只有少部分不同的話，該怎麼去處理，我們該怎麼樣把重複的地方先抓取出來，在套用的時候更為快速。</p>



<p>extends，雖然有加s，但我們只能用一個。</p>



<p>api/extend.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;table class="table"&gt;
    &lt;tbody&gt;
      &lt;tr is="row-component-one" v-for="(item, key) in data" 
        v-if="key % 2"
        :item="item" :key="key"&gt;&lt;/tr&gt;
      &lt;tr is="row-component-two" v-for="(item, key) in data" 
        v-if="(key - 1) % 2"
        :item="item" :key="key"&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="row-component"&gt;
  &lt;tr&gt;
    &lt;td&gt;{{ item.name }}&lt;/td&gt;
    &lt;td&gt;{{ item.cash | currency | dollarSign }}&lt;/td&gt;
    &lt;td&gt;{{ item.icash | currency | dollarSign }}&lt;/td&gt;
  &lt;/tr&gt;
&lt;/script&gt;

&lt;script type="text/x-template" id="row-component-two"&gt;
  &lt;tr class="bg-primary text-white"&gt;
    &lt;td&gt;{{ item.name }}&lt;/td&gt;
    &lt;td&gt;{{ item.cash | currency | dollarSign }}&lt;/td&gt;
    &lt;td&gt;{{ item.icash | currency | dollarSign }}&lt;/td&gt;
  &lt;/tr&gt;
&lt;/script&gt;

&lt;script&gt;
// extend 是基礎建構的概念
var newExtend = Vue.extend({
  data: function() {
    return {
      data: {},
      extendData: '這段文字是 extend 得到'
    }
  },
  template: '#row-component',
  filters: {
    dollarSign: function (n) {
      return `$ ${n}`
    },
    currency: function(n) {
      return n.toFixed(2).replace(/./g, function(c, i, a) {
          return i &amp;&amp; c !== "." &amp;&amp; ((a.length - i) % 3 === 0) ? ',' + c : c;
      });
    }
  },
  mounted: function() {
    console.log('Extend:', this)
  }
})

var childOne = {
  props: &#91;'item'],
  extends: newExtend,
  // data: function() {
  //   return {
  //     data: {},
  //     extendData: '這段文字是 extend 得到'
  //   }
  // },
  // template: '#row-component',
  // filters: {
  //   dollarSign: function (n) {
  //     return `$ ${n}`
  //   },
  //   currency: function(n) {
  //     return n.toFixed(2).replace(/./g, function(c, i, a) {
  //         return i &amp;&amp; c !== "." &amp;&amp; ((a.length - i) % 3 === 0) ? ',' + c : c;
  //     });
  //   }
  // },
  // mounted: function() {
  //   console.log('Extend:', this)
  // }
}

var childTwo = {
  props: &#91;'item'],
  data: function() {
    return {childTwo: '元件 2', extendData: '這段文字是 元件 得到'}
  },
  // 刪掉
  // data: function() {
  //   return {
  //     data: {},
  //     extendData: '這段文字是 extend 得到'
  //   }
  // },
  template: '#row-component-two',
  extends: newExtend,
  mounted: function() {
    console.log('childTwo');
  }
  // 刪掉
  // filters: {
  //   dollarSign: function (n) {
  //     return `$ ${n}`
  //   },
  //   currency: function(n) {
  //     return n.toFixed(2).replace(/./g, function(c, i, a) {
  //         return i &amp;&amp; c !== "." &amp;&amp; ((a.length - i) % 3 === 0) ? ',' + c : c;
  //     });
  //   }
  // },
  // mounted: function() {
  //   console.log('Extend:', this)
  // }
}

var app = new Vue({
  el: '#app',
  data: {
    data: &#91;
      {
        name: '小明',
        cash: 100,
        icash: 500,
      },
      {
        name: '杰倫',
        cash: 10000,
        icash: 5000,
      },
      {
        name: '漂亮阿姨',
        cash: 500,
        icash: 500,
      },
      {
        name: '老媽',
        cash: 10000,
        icash: 100,
      },
    ]
  },
  components: {
    "row-component-one": childOne,
    "row-component-two": childTwo,
  },
  mounted: function() {
    console.log('Vue init:', this)
  }
});
&lt;/script&gt;</code></pre>



<h3>Filter 自訂畫面資料呈現格式</h3>



<p>Google 搜尋 javascript currency format 查詢貨幣轉換的格式。</p>



<p>api/filter.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;table class="table"&gt;
    &lt;tbody&gt;
      &lt;tr is="row-component" v-for="(item, key) in data" :item="item" :key="key"&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
  {{ data&#91;1].cash | currency | dollarSign }}
&lt;/div&gt;

&lt;script type="text/x-template" id="row-component"&gt;
  &lt;tr&gt;
    &lt;td&gt;{{ item.name }}&lt;/td&gt;
    &lt;td&gt;{{ item.cash | currency | dollarSign }}&lt;/td&gt;
    &lt;td&gt;{{ item.icash | currency | dollarSign }}&lt;/td&gt;
  &lt;/tr&gt;
&lt;/script&gt;

&lt;script&gt;
Vue.filter('dollarSign' , function(n) {
  return `$ ${n}`
})
Vue.filter('currency' , function(n) {
  return n.toFixed(2).replace(/./g, function(c, i, a) {
    return i &gt; 0 &amp;&amp; c !== "." &amp;&amp; (a.length - i) % 3 === 0 ? "," + c : c;
  });
})


var child = {
  props: &#91;'item'],
  template: '#row-component',
  data: function() {
    return {
      data: {}
    }
  },
  // filters: {
  //   dollarSign: function(n) {
  //     return `$ ${n}`
  //   },
  //   currency: function(n) {
  //     return n.toFixed(2).replace(/./g, function(c, i, a) {
  //       return i &gt; 0 &amp;&amp; c !== "." &amp;&amp; (a.length - i) % 3 === 0 ? "," + c : c;
  //     });
  //   }
  // },
  mounted: function() {
    console.log('Component:', this)
  }
}

var app = new Vue({
  el: '#app',
  data: {
    data: &#91;
      {
        name: '小明',
        cash: 100,
        icash: 500,
      },
      {
        name: '杰倫',
        cash: 10000,
        icash: 5000,
      },
      {
        name: '漂亮阿姨',
        cash: 500,
        icash: 500,
      },
      {
        name: '老媽',
        cash: 10000,
        icash: 100,
      },
    ]
  },
  components: {
    "row-component": child
  },
  mounted: function() {
    console.log('Vue init:', this)
  }
});
&lt;/script&gt;</code></pre>



<h3>無法寫入的資料，用 set 搞定他</h3>



<p>api/vue_set.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;table class="table"&gt;
    &lt;tbody&gt;
      &lt;tr is="row-component" v-for="(item, key) in data" :item="item" :key="key"&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="row-component"&gt;
  &lt;tr&gt;
    &lt;td&gt;{{ item.name }}&lt;/td&gt;
    &lt;td&gt;{{ item.cash }}&lt;/td&gt;
    &lt;td&gt;{{ item.icash }}&lt;/td&gt;
    &lt;td&gt;
      &lt;span v-if="data.item"&gt;{{ data.item.name }}&lt;/span&gt;
      &lt;button class="btn btn-sm btn-primary" @click="addData()"&gt;寫入資料&lt;/button&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/script&gt;

&lt;script&gt;
var child = {
  props: &#91;'item'],
  template: '#row-component',
  data: function() {
    return {
      data: {}
    }
  },
  methods: {
    addData: function() {
    //   this.data.item = {
    //     name: this.item.name
    //   }
    //   console.log(this.data, this);

    this.$set(this.data, 'item', {
      name: this.item.name
    })
    console.log(this.data, this);

      // this.$set(this.data, 'item', {
      //   name: this.item.name
      // });
      // console.log(this.data, this);
    }
  },
  mounted: function() {
    console.log('Component:', this)
  }
}

var app = new Vue({
  el: '#app',
  data: {
    data: &#91;
      {
        name: '小明',
        cash: 100,
        icash: 500,
      },
      {
        name: '杰倫',
        cash: 10000,
        icash: 5000,
      },
      {
        name: '漂亮阿姨',
        cash: 500,
        icash: 500,
      },
      {
        name: '老媽',
        cash: 10000,
        icash: 100,
      },
    ]
  },
  components: {
    "row-component": child
  },
  mounted: function() {
    console.log('Vue init:', this)
  }
});
&lt;/script&gt;</code></pre>



<p><strong>Vue.set 蠻重要的。</strong></p>



<h3>Mixin 混合其他的元件內容</h3>



<p>Extend由單一元件來做延伸，但Mixin可以混合多個元件的行為。</p>



<p>api/mixin.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;table class="table"&gt;
    &lt;tbody&gt;
      &lt;tr is="row-component" v-for="(item, key) in data" 
        :item="item" :key="key"&gt;&lt;/tr&gt;
      &lt;tr is="row-component-two" v-for="(item, key) in data" 
        :item="item"&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="row-component"&gt;
  &lt;tr&gt;
    &lt;td&gt;{{ item.name }}&lt;/td&gt;
    &lt;td&gt;{{ item.cash | currency | dollarSign }}&lt;/td&gt;
    &lt;td&gt;{{ item.icash | currency | dollarSign }}&lt;/td&gt;
  &lt;/tr&gt;
&lt;/script&gt;

&lt;script&gt;
// mixin 是多個混合的概念

var mixinFilter = {
  template: '#row-component',
  filters: {
    dollarSign: function (n) {
      return `$ ${n}`
    },
    currency: function(n) {
      return n.toFixed(2).replace(/./g, function(c, i, a) {
          return i &amp;&amp; c !== "." &amp;&amp; ((a.length - i) % 3 === 0) ? ',' + c : c;
      });
    }
  },
}

var mixinMounted = {
  mounted () {
    console.log('這段是 Mixin 產生')
  }
}

Vue.component('row-component', {
  props: &#91;'item'],
  data: function() {
    return {
      data: {},
    }
  },
  mixins: &#91;mixinFilter, mixinMounted],
  // template: '#row-component',
  // filters: {
  //   dollarSign: function (n) {
  //     return `$ ${n}`
  //   },
  //   currency: function(n) {
  //     return n.toFixed(2).replace(/./g, function(c, i, a) {
  //         return i &amp;&amp; c !== "." &amp;&amp; ((a.length - i) % 3 === 0) ? ',' + c : c;
  //     });
  //   }
  // },
  // mounted () {
  //   console.log('這段是 Mixin 產生')
  // }
});

Vue.component('row-component-two', {
  props: &#91;'item'],
  data: function() {
    return {
      data: {
        data: 'Two'
      },
    }
  },
  mixins: &#91;mixinFilter, mixinMounted],

})


var app = new Vue({
  el: '#app',
  data: {
    data: &#91;
      {
        name: '小明',
        cash: 100,
        icash: 500,
      },
      {
        name: '杰倫',
        cash: 10000,
        icash: 5000,
      },
      {
        name: '漂亮阿姨',
        cash: 500,
        icash: 500,
      },
      {
        name: '老媽',
        cash: 10000,
        icash: 100,
      },
    ]
  },
  mounted: function() {
    console.log('Vue init:', this)
  }
});
&lt;/script&gt;</code></pre>



<h3>使用 Directive 開發自己的互動 UI</h3>



<p><a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank">自定義指令</a></p>



<p>透過 directive 來做 email 的驗證。</p>



<p>api/directive.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="email" v-model="email" v-focus v-validation&gt;
&lt;/div&gt;

&lt;script&gt;
// 官方文件 https://cn.vuejs.org/v2/guide/custom-directive.html

// 註冊一個全局自定義指令 `v-focus`
Vue.directive('focus', {
  // 當被綁定的元素插入到 DOM 中時...
  inserted: function (el) {
    // 聚焦元素
    el.focus()
  }
});

Vue.directive('validation', {
  update: function(el, binding, vnode) {
    console.log('update', el, binding, vnode);
    var value = el.value;
    console.log(value);
    // 驗證email的方式，會使用正規式
    // email結構的正規式
    var re = /^((&#91;^&lt;&gt;()\&#91;\]\.,;:\s@\"]+(\.&#91;^&lt;&gt;()\&#91;\]\.,;:\s@\"]+)*)|(\".+\"))@((&#91;^&lt;&gt;()&#91;\]\.,;:\s@\"]+\.)+&#91;^&lt;&gt;()&#91;\]\.,;:\s@\"]{2,})$/i;
    console.log(value, re.test(value));
    if (!re.test(value)) {
      el.className = 'form-control is-invalid'
    } else {
      el.className = 'form-control is-valid'
    }

  },
  bind: function(el, binding, vnode) {
    console.log('binding', el, binding, vnode);
    el.className = 'form-control';
  }
});

var app = new Vue({
  el: '#app',
  data: {
    email: '',
  },
  mounted: function() {
    console.log('Vue init:', this)
  }
});
&lt;/script&gt;</code></pre>



<h3>Directive 細節說明</h3>



<p>api/directive.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="email" v-model="email" v-focus v-validation="{ className: 'form-control'}"&gt;
&lt;/div&gt;

&lt;script&gt;
// 官方文件 https://cn.vuejs.org/v2/guide/custom-directive.html

// 註冊一個全局自定義指令 `v-focus`
Vue.directive('focus', {
  // 當被綁定的元素插入到 DOM 中時...
  inserted: function (el) {
    // 聚焦元素
    el.focus()
  }
});

Vue.directive('validation', {
  update: function(el, binding, vnode) {
    console.log('update', el, binding, vnode);
    var value = el.value;
    console.log(value);
    // 驗證email的方式，會使用正規式
    // email結構的正規式
    var re = /^((&#91;^&lt;&gt;()\&#91;\]\.,;:\s@\"]+(\.&#91;^&lt;&gt;()\&#91;\]\.,;:\s@\"]+)*)|(\".+\"))@((&#91;^&lt;&gt;()&#91;\]\.,;:\s@\"]+\.)+&#91;^&lt;&gt;()&#91;\]\.,;:\s@\"]{2,})$/i;
    console.log(value, re.test(value));
    if (!re.test(value)) {
      el.className = 'form-control is-invalid'
    } else {
      el.className = 'form-control is-valid'
    }

  },
  bind: function(el, binding, vnode) {
    console.log('binding', el, binding, vnode);
    el.className = binding.value.className;

    // v-model
    // v-model 值

    // 尋找當前的model名稱
    var vModel = vnode.data.directives.find(function(item) {
      return item.name === 'model'
    }).expression;
    // 從當前的model取值
    var value = vnode.context&#91;vModel];
    console.log('vModel', vModel, value);
  }
});

var app = new Vue({
  el: '#app',
  data: {
    email: 'example@gmail.com',
  },
  mounted: function() {
    console.log('Vue init:', this)
  }
});
&lt;/script&gt;</code></pre>



<p>Google關鍵字：<a href="https://bootstrap-vue.org/docs/directives" target="_blank" rel="noreferrer noopener">vue directive bootstrap</a></p>



<h3>使用外部載入的套件</h3>



<h5>Vue 使用外部套件</h5>



<ul><li>請嘗試將 Vue Bootstrap 的 Modal 元件載入</li></ul>



<p>資源：<a rel="noreferrer noopener" href="https://bootstrap-vue.org/" target="_blank">Vue Bootstrap</a></p>



<p>使用額外套件的時候，一定要特別注意他的版本。</p>



<p>api/use.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;!-- Using value --&gt;
  &lt;b-button v-b-modal="'my-modal'"&gt;Show Modal&lt;/b-button&gt;

  &lt;!-- The modal --&gt;
  &lt;b-modal id="my-modal"&gt;Hello From My Modal!&lt;/b-modal&gt;
&lt;/div&gt;

&lt;link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css" /&gt;
&lt;!-- Load Vue followed by BootstrapVue --&gt;
&lt;script src="//unpkg.com/vue@latest/dist/vue.min.js"&gt;&lt;/script&gt;
&lt;script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
// 使用 CDN 與 CLI 載入套件的結果是一樣
// CLI 版本請加入以下套用 BootstrapVue
// import BootstrapVue from 'bootstrap-vue'
// Vue.use(BootstrapVue);

var app = new Vue({
  el: '#app',
  data: {},
});
&lt;/script&gt;</code></pre>



<h2>第９節：Vue Cli 的建置與運作原理</h2>



<h3>為什麼要學 Vue Cli</h3>



<h5>VUE CLI 是什麼？</h5>



<ol><li>基於 Webpack 所建置的開發工具</li><li>便於使用各種<strong>第三方套件</strong>&nbsp;(BS4, Vue Router…)</li><li>可運行&nbsp;<strong>Sass, Babel</strong>&nbsp;等編譯工具</li><li>便於開發&nbsp;<strong>SPA</strong>&nbsp;的網頁工具</li><li>靠簡單設定，就能搭建開發時常用的環境</li></ol>



<h5>WEBPACK</h5>



<ul><li>bundle your assets, scripts, images, styles</li></ul>



<p>連結：<a rel="noreferrer noopener" href="https://webpack.js.org/" target="_blank">WEBPACK</a></p>



<p>Vue Cli 是一個scaffolding (鷹架) 的工具，可以透過 Vue Cli 搭建 Webpack 環境，像是它的資料夾、相關檔案，透過簡單的指令就可以完整的生成。<br>雖然這麼多的資料夾，交付出去的時候只需要交付 dist 資料夾給後端就算完成。</p>



<p>Webpack 是一個打包工具，所以可以載入非常多的內容，像是 Sass、Bootstrap、Vue 都可以輕鬆的載入。<br>使用 npm 做套件的管理。</p>



<p>SPA 是由前端所模擬的路由。</p>



<ul><li>#/user</li><li>#/product</li></ul>



<p>使用 SPA 的概念在製作網頁的時候，同時意謂著前端網頁與後端 Web Server 是分開的。<br>當如果需要取得資料的時候，後端 Web Server 會提供 API 的接口，前端網頁會使用 Ajax 的方法來做串接。<br>當畫面上頁面做切換的時候，前端網頁就會透過 API 再從後端 Web Server 取得所需要的資料內容。</p>



<h5>VUE CLI 的限制</h5>



<ol><li>不便於開發&nbsp;<strong>SPA</strong>&nbsp;的網頁<br>(此需求可用先前教的 CDN 模式)</li></ol>



<h3>Vue Cli 2.x 與 Vue Cli 3.x 課程說明</h3>



<p>注意！！<br>課程中已經加入 Vue Cli 3.0<br>但在主要課程規劃目前還是 Cli 2.0 為主<br>所以課程可先依據規畫學習 2.0，之後再補足 3.0 的觀念</p>



<p>而兩者觀念差異並不大<br>所以在後面都可以銜接回來喔～<br>(目前補充在電商課程後方)</p>



<h3>如何使用 Vue Cli</h3>



<p>Node.js：<a rel="noreferrer noopener" href="https://nodejs.org/en/" target="_blank">英文版</a>、<a rel="noreferrer noopener" href="https://nodejs.org/zh-tw/" target="_blank">中文版</a></p>



<p>請先安裝 NODE.JS<br>可參考本章節後方的附錄內容</p>



<h5>vue-cli</h5>



<p>A simple CLI for scaffolding Vue.js projects.</p>



<h5>Installation</h5>



<p>Prerequisites: Node.js (&gt;=6.x, 8.x preferred), npm version 3+ and Git.</p>



<pre class="wp-block-code"><code>$ npm install -g vue-cli</code></pre>



<h5>Usage</h5>



<pre class="wp-block-code"><code>$ vue init &lt;template-name&gt; &lt;project-name&gt;</code></pre>



<p>Example:</p>



<pre class="wp-block-code"><code>$ vue init webpack my-project</code></pre>



<p>操作步驟</p>



<ol><li>查詢 node 版本：node -v<br>v6.9.4</li><li>安裝 vue-cli ：npm install -g vue-cli<br>-g，安裝在全域上面。</li><li>輸入 vue 顯示有哪些指令可以用：vue</li><li>列出官方樣本：vue list<br>我們主要會使用 webpack 這個樣本</li><li>用法：vue init webpack vuewebpack<ol><li>Project name vuewebpack</li><li>Project description</li><li>Author</li><li>Vue build – 選擇 Runtime + Compiler: recommended for most users</li><li>Install vue-router – n，這個地方先不要裝</li><li>Use ESLint to lint your code? – n，這個地方先不要使用 ESLint<br>JavaScript 沒有符合規範是無法編譯的</li><li>Set up unit tests – n</li><li>Setup e2e tests with Nightwatch – n</li><li>Should we run `npm install` for you after the project has been created? (recommended) – No, I will handle that myself，這個地方先不要，等下再自己手動使用。</li></ol></li></ol>



<p># Project initialization finished!<br>To get started:</p>



<pre class="wp-block-code"><code>cd vuewebpack
npm install (or if using yarn: yarn)
npm run dev</code></pre>



<p>操作步驟：</p>



<ol><li>移動到資料夾：cd vuewebpack</li><li>打開資料夾：open .</li><li>安裝：npm install</li><li>Vue環境執行：npm run dev</li></ol>



<p>使用 VSCode 終端機來執行。</p>



<p>課程後續的範例老師會使用 ESLint 做課程說明<br>屆時再慢慢熟悉 ESLint 的使用方式</p>



<h3>Vue Cli 安裝相關資源</h3>



<h5>安裝 Node.js</h5>



<p><a rel="noreferrer noopener" href="https://www.udemy.com/course/gulp-learning/" target="_blank">參考 Gulp 課程</a><br>Gulp 環境 (Windows 安裝 Nodejs 篇)<br>Gulp 環境 (Mac 安裝 Nodejs 篇)</p>



<p><a rel="noreferrer noopener" href="https://nodejs.org/en/" target="_blank">Nodejs 官方網站</a></p>



<p>Vue Cli 其實是一個指令工具<br>用來讓我們安裝 Vue + Webpack 的環境 (另有其他幾種官方模板)<br>目前依然還有在更新，課程中使用的是 2.x 版本<br>測試中的版本為 3.0 beta<br>安裝時也請注意版本上的差異</p>



<h5>其他相關連結<br>以下為課程中會用到的相關連結</h5>



<ul><li><a rel="noreferrer noopener" href="https://router.vuejs.org/zh/" target="_blank">Vue Router</a></li><li><a rel="noreferrer noopener" href="https://github.com/axios/axios" target="_blank">Axios</a></li><li><a href="https://www.npmjs.com/package/vue-axios" target="_blank" rel="noreferrer noopener">Vue Axios</a></li></ul>



<h5>課程中運用到的指令</h5>



<ul><li>檢視 Vue Cli 可用版型：vue list</li><li>Vue 模板安裝：vue init {{模板名稱}} {{資料夾名稱}}</li><li>安裝所需套件 (在目標資料夾下，每個專案只有第一次需要執行)：npm install</li><li>運行 Vue + Webpack：npm run dev</li><li>編譯 Production 版本：npm run build</li></ul>



<p>解決方法：<a href="http://limitedcode.blogspot.com/2016/03/powershell-ps1.html" target="_blank" rel="noreferrer noopener">系統上已停用指令碼執行</a></p>



<h3>Vue Cli 所產生的資料夾結構說明</h3>



<p>使用 VSCode ，打開終端機 (Ctrl + `)<br>輸入 npm run dev 開發中環境運行起來</p>



<p>README.md</p>



<pre class="wp-block-code"><code># vuewebpack

&gt; A Vue.js project

## Build Setup

``` bash
# install dependencies
npm install

# serve with hot reload at localhost:8080
npm run dev

# build for production with minification
npm run build

# build for production and view the bundle analyzer report
npm run build -- report
```
For a detailed explanation on how things work, check out the &#91;guide](http://vuejs-templates.github.io/webpack/) and &#91;docs for vue-loader](http://vuejs.github.io/vue-loader).</code></pre>



<ul><li>npm install<br>安裝所有套件用到的指令</li><li>npm run dev<br>將開發的環境運行起來</li><li>npm run build<br>將正式版環境運行建立起來</li></ul>



<p>停止終端機指令：停止可同時按下 Ctrl + c<br>(Window 與 Mac OS 相同)</p>



<p>npm run build<br>產生 dist 資料夾，裡面的網頁需要使用 web server 執行才能開啟內容。<br>Tip: built files are meant to be served over an HTTP server.<br>Opening index.html over file:// won’t work.</p>



<p>static 資料夾是放入不會被編譯的檔案。<br>assets 資料夾是放入會被編譯的檔案。</p>



<p>src 是整個 Cli 最重要的資料夾，所有的內容都在這裡。<br>裡面比較重要的檔案叫 main.js，指的是所有Vue.js的進入點。<br>Vue Cli 基本上都是用元件。<br>App.vue有以下內容，xtemplate、javascript、style。<br>node_modules 就是剛透過 npm install 所安裝的一些相依套件。<br>dist 是透過 npm run build 最後生成的檔案，一定要運行在 HTTP server 才能執行，無法直接用 file 執行。<br>config 寫 Vue 的應用程式會使用的設定檔。<br>build 是 webpack 的原始碼。</p>



<h3>Webpack 腳本介紹 及自定義環境變數</h3>



<figure class="wp-block-image size-full"><img loading="lazy" width="1706" height="809" src="/wordpress_blog/wp-content/uploads/2022/04/webpack.png" alt="" class="wp-image-672"/><figcaption>Webpack</figcaption></figure>



<p>build 資料夾下 webpack 腳本介紹</p>



<ul><li>webpack.base.conf.js<br>為最主要的webpack腳本</li><li>webpack.dev.conf.js<br>開發中版本<br>預覽使用</li><li>webpack.prod.conf.js<br>正式版版本<br>比較重視輸出結果</li></ul>



<p>dev、prod 比較不會去修改，整個核心在 webpack base 腳本下。</p>



<p>resolve 是可以省略一些副檔名、路徑使用的。</p>



<p>config 資料夾下</p>



<ul><li>index.js 針對整個運行環境所使用的。</li><li>dev、prod 是我們在寫 Vue 可以用到環境變數，可輸出到 Vue 檔裡面。</li></ul>



<p>dev.env.js</p>



<pre class="wp-block-code"><code>module.exports = merge(prodEnv, {
  NODE_ENV: '"development"',
  HTTP_PATH: '"http://localhost/"'
})
// Ajax</code></pre>



<p>HelloWorld.vue</p>



<pre class="wp-block-code"><code>&lt;script&gt;
export default {
  name: 'HelloWorld',
  data () {
    return {
      msg: process.env.NODE_ENV,
      http: process.env.HTTP_PATH
    }
  }
}
&lt;/script&gt;</code></pre>



<p>prod.env.js</p>



<pre class="wp-block-code"><code>module.exports = {
  NODE_ENV: '"production"',
  HTTP_PATH: '"http://localhost/"'
}</code></pre>



<h3>安裝套件在 Vue Webpack 中</h3>



<h5>透過 Vue Cli 的 webpack 來載入外部的套件</h5>



<ul><li>Bootstrap – 透過 Sass 的方式來載入</li><li>vue-axios – 是一個 Ajax 的工具，透過它使用 Ajax 的行為，就很像我們在使用 jQuery 一樣，是使用非同步的 promise 去製作的</li></ul>



<p>操作步驟</p>



<ol><li>前往&nbsp;<a rel="noreferrer noopener" href="https://getbootstrap.com/docs/4.6/getting-started/download/" target="_blank">Bootstrap 4 download</a></li><li>找到 npm 並使用以下指令<br>Sass 在 Vue Cli 沒有安裝完整的 loader，會再加入 node-sass sass-loader 的套件<br>$ npm install bootstrap node-sass sass-loader –save</li><li>因為以上指令會出錯，需要安裝指定版本<br>$ npm install bootstrap node-sass@4 sass-loader@7 –save</li><li>安裝完後，整個 Vue Cli 是需要重新運行的<br>npm run dev</li><li>重新啟動後，打開 App.vue，測試 Sass 是否可以運行<br>在 &lt;style&gt; 修改成 &lt;style lang=”scss”&gt;<br>把原本的內容註解掉，改成以下</li><li>清除掉之後就可以使用 import 的方式把 Bootstrap 載進來</li><li>可以載入Bootstrap 其中的元件，來了解是否有正確的載入<br>cards</li><li>@import “~bootstrap/scss/bootstrap”; 路徑是哪裡來的<br>可以把 node_modules 打開裡面會有 bootstrap，再裡面會有 scss，在裡面找會有 bootstrap</li></ol>



<pre class="wp-block-code"><code>// 5.
&lt;style lang="scss"&gt;
$color: black;

body {
  background-color: $color;
}
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 6.
&lt;style lang="scss"&gt;
@import "~bootstrap/scss/bootstrap";
&lt;/style&gt;</code></pre>



<pre class="wp-block-code"><code>// 7.
&lt;template&gt;
  &lt;div id="app"&gt;
    &lt;img src="./assets/logo.png" /&gt;
    &lt;HelloWorld /&gt;
    &lt;div class="card" style="width: 18rem"&gt;
      &lt;div class="card-body"&gt;
        &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
        &lt;p class="card-text"&gt;
          Some quick example text to build on the card title and make up the
          bulk of the card's content.
        &lt;/p&gt;
        &lt;a href="#" class="btn btn-primary"&gt;Go somewhere&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import HelloWorld from "./components/HelloWorld";

export default {
  name: "App",
  components: {
    HelloWorld,
  },
};
&lt;/script&gt;

&lt;style lang="scss"&gt;
@import "~bootstrap/scss/bootstrap";
&lt;/style&gt;</code></pre>



<p>小技巧：元件components 裡面有個 HelloWorld.vue，<br>在 HelloWorld.vue 裡面有個 &lt;h1&gt;，<br>然後下方 &lt;style scoped&gt;，scoped 的意思是這邊的樣式是被限制在這個元件內才能運行。<br>在下方 &lt;style scoped&gt; &lt;h1&gt; 新增 color: red 樣式。<br>在 App.vue 新增一個 &lt;h1&gt; 這是 APP 的 H1，<br>就會維持是黑色，並不會受到 HelloWorld.vue 裡面的 style 影響。這是 Vue style 的一個特色。</p>



<p>vue-axios 是 Ajax 的一個套件。</p>



<p>操作步驟</p>



<ol><li>把終端機停下來</li><li>輸入 npm install –save axios vue-axios</li><li><a rel="noreferrer noopener" href="https://www.npmjs.com/package/vue-axios" target="_blank">vue-axios</a></li><li>把以下程式碼加到 entry file ，也就是 main.js 這支檔案</li><li>使用 random user api</li><li>開啟 App.vue 檔案，這支檔案加入 created 的 hook，就是當這個元件創立的時候，同時執行裡面的函式<br>使用方法在 vue-axios 網站上有寫到，並把 random user api 的 URL 貼進來</li></ol>



<pre class="wp-block-code"><code>// 4. 把程式碼加到 main.js
import axios from 'axios' // 主要 AJAX 套件
import VueAxios from 'vue-axios' // 將它轉為 Vue 的套件
// Usage in Vue 2:
Vue.use(VueAxios, axios)</code></pre>



<pre class="wp-block-code"><code>// 6.
  created() {
    this.$http.get('https://randomuser.me/api/')
      .then((response) =&gt; {
        console.log(response.data);
      })
  }</code></pre>



<h2>第１０節：Vue Router</h2>



<h3>本章節以後，提問的注意事項</h3>



<p>由於本章節以後，問題相對會複雜很多<br>很難從單一片段了解問題點<br>如：部分程式碼無法運作<br>實際卻是 main.js @import 的大小寫錯誤<br><br>所以<strong>本章節以後<br>為了加速回復同學們問題的效率<br>請上傳完整程式碼至 Github 或個人雲端空間</strong>&nbsp;( 不需要包含<br>node_modules )<br>好讓我可以運行完整環境來仔細檢視喔<br><br>如果僅上傳部分程式碼或程式碼的截圖<br>還是會請你重新上傳完整程式碼喔</p>



<h3>使用 Vue Router&nbsp;及配置路由文件</h3>



<h5>SPA 也是透過元件來製作的喔</h5>



<p>由前端所模擬的路由</p>



<ul><li>進入點：main.js</li><li>Router 配置檔案 (前端路由)：router/index.js</li><li>分頁內容：Vue Components (**.vue)</li></ul>



<p>操作步驟</p>



<ol><li>前往 Vue Router 查看安裝的方法</li><li>終端機輸入 npm install vue-router –save<br>記得要加上 –save</li><li>在 src 資料夾下建立新資料夾叫 router</li><li>在 router 資料夾下建立 index.js 檔案</li><li>在 index.js 配置檔案下加上</li><li>在 main.js 加上</li><li>執行 npm run dev，路徑會自動加上#，#以後就是虛擬的路由器</li><li>到 router/index.js 下定義路徑</li><li>到 App.vue 把&lt;HelloWorld/&gt;標籤註解掉，會使用 &lt;router-view&gt;&lt;router-view&gt;</li><li>把 routes 陣列底下物件 path 修改成 path: ‘/index’,</li><li>網址必須對應到 /index 網址，畫面才會出現</li></ol>



<pre class="wp-block-code"><code>// 5. index.js
// 官方的元件
import Vue from 'vue';
import VueRouter from 'vue-router';

// 自訂的分頁元件
import Home from '@/components/HelloWorld';

// 啟用的方式
Vue.use(VueRouter);

// 匯出給 Entry 使用
export default new VueRouter({

});</code></pre>



<pre class="wp-block-code"><code>// 6. main.js
import router from './router';

new Vue({
  // 加上
  router,
});</code></pre>



<p>有使用 ESLint 嚴謹度會提高不少，當有出現多於程式碼則會跳錯。</p>



<pre class="wp-block-code"><code>// 8. index.js
export default new VueRouter({
  routes: &#91;
    {
      name: '首頁',  // 元件呈現的名稱
      path: '/',  // 對應的虛擬路徑
      component: Home,  // 對應的元件
    },
  ],
});</code></pre>



<h3>新增路由路徑及連結</h3>



<p>操作步驟</p>



<ol><li>在 index.js 檔案下新增 routes 陣列底下的物件<br>因為還沒啟用，先註解起來</li><li>在 index.html 先偷懶加入使用 Bootstrap Cdn<br>主要是會使用到 Bootstrap 一些元件來加速開發</li><li>在 components 資料夾下方新增 pages 資料夾<br>這是管理分頁使用的</li><li>將 HelloWorld.vue 另存新檔，在 pages 資料夾下叫做 page.vue</li><li>把 page.vue 裡面的 div 的內容全部刪掉，也將 style 部分也都全部刪掉，&lt;script&gt; 裡面的 export default 裡面的 name 也可刪掉、data 留空也沒關係</li><li>到 Bootstrap 4 官網搜尋 cards 複製一個卡片的模組，貼到 page.vue 裡面的 div 做練習就可以了，圖檔部分因為 src會出錯就先把 src 路徑刪除</li><li>到配置的路徑 index.js，用相同的方式將新的頁面載進來</li><li>到 Bootstrap 4 官網搜勳 navbar 複製一個導覽列的模組，並且貼到 App.vue，在圖檔的上方，先刪除多餘的部分，留下一個 &lt;li&gt; 就可以了，下面的表單也移除掉，下方的 CSS 也可以先直接移除</li><li>製作分頁的切換，把 Home 這個的 &lt;li&gt; 複製一份，並把上方 class 的 active 移除掉，裡面多餘的程式碼也先移除，留下一個 Home，另外一個改成 Page</li><li>把 Home 的 &lt;a&gt; 標籤替換成 &lt;router-link&gt; 標籤，Page 的 &lt;a&gt; 標籤替換成 &lt;router-link&gt; 標籤，並且把 href 換成 to，to 是針對 router-view 在切換分頁的一個方法，Home 是 to=”/index”，Page 是 to=”/page”</li><li>分頁的切換的另一個方法，index.js 檔案的 routes 裡面的 name 屬性也可以用在 path 上面，使用的方式是把 to 改成動態連結、把原本的 path 換成一個物件<br>Home 的是 :to=”{ name: ‘首頁’ }”<br>Page 的是 :to=”{ name: ‘分頁’ }”</li></ol>



<pre class="wp-block-code"><code>// 1.
  //  {
  //    name: '首頁', // 元件呈現的名稱
  //    path: '/新路徑', // 對應的虛擬路徑
  //    component: 新元件, // 對應的元件
  //  },</code></pre>



<pre class="wp-block-code"><code>// 7.
import Page from '@/components/pages/page';

    {
      name: '分頁', // 元件呈現的名稱
      path: '/page', // 對應的虛擬路徑
      component: Page, // 對應的元件
    }</code></pre>



<h5>切換頁面的方式有</h5>



<ol><li>直接透過 path</li><li>透過 name</li></ol>



<p>兩種方式可以混合運用。</p>



<p>index.html</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt;
    &lt;title&gt;vuewebpack-router&lt;/title&gt;
    &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;&lt;/div&gt;
    &lt;!-- built files will be auto injected --&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>index.js</p>



<pre class="wp-block-code"><code>// 官方的文件
import Vue from 'vue';
import VueRouter from 'vue-router';

// 自訂的分頁元件
import Home from '@/components/HelloWorld';
import Page from '@/components/pages/page';

// 啟用的方式
Vue.use(VueRouter);

// 匯出給 Entry 使用
export default new VueRouter({
    routes: &#91;
        {
          name: '首頁',  // 元件呈現的名稱
          path: '/index',  // 對應的虛擬路徑
          component: Home,  // 對應的原件
        },
        {
          name: '分頁',  // 元件呈現的名稱
          path: '/page',  // 對應的虛擬路徑
          component: Page,  // 對應的原件
        },
    ],
});</code></pre>



<p>App.vue</p>



<pre class="wp-block-code"><code>&lt;template&gt;
  &lt;div id="app"&gt;
    &lt;nav class="navbar navbar-expand-lg navbar-light bg-light"&gt;
      &lt;a class="navbar-brand" href="#"&gt;Navbar&lt;/a&gt;
      &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
        &lt;ul class="navbar-nav mr-auto"&gt;
          &lt;li class="nav-item"&gt;
            &lt;router-link class="nav-link" :to="{ name: '首頁' }"&gt;Home&lt;/router-link&gt;
          &lt;/li&gt;
          &lt;li class="nav-item"&gt;
            &lt;router-link class="nav-link" to="/page"&gt;Page&lt;/router-link&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/nav&gt;
    &lt;img src="./assets/logo.png" /&gt;
    &lt;!-- &lt;HelloWorld/&gt; --&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import HelloWorld from "./components/HelloWorld";

export default {
  name: "App",
  components: {
    HelloWorld,
  },
};
&lt;/script&gt;</code></pre>



<p>page.vue</p>



<pre class="wp-block-code"><code>&lt;template&gt;
  &lt;div class="hello"&gt;
    &lt;div class="card" style="width: 18rem"&gt;
      &lt;img src="" class="card-img-top" alt="Card img cap" /&gt;
      &lt;div class="card-body"&gt;
        &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
        &lt;p class="card-text"&gt;
          Some quick example text to build on the card title and make up the
          bulk of the card's content.
        &lt;/p&gt;
        &lt;a href="#" class="btn btn-primary"&gt;Go somewhere&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data() {
    return {};
  },
};
&lt;/script&gt;</code></pre>



<h3>製作巢狀路由頁面</h3>



<p>假設切換到 child 頁面下，希望外層維持原本的卡片，裡面的內容會依據 child1、child2、child3 來切換裡面的內容。</p>



<p>操作步驟</p>



<ol><li>另存 child.vue 檔案<br>不需要 class card 的部分，謹記外層要留一層 div</li><li>另存 child2.vue、child3.vue<br>總共會有三個子元件</li><li>三個子元件的三個子元件的內容給予不同的名稱<br>child.vue 標題使用 Card 1<br>child2.vue 標題使用 Card 2<br>child3.vue 標題使用 Card 3</li><li>page.vue card的內容先移除，會透過 router 的方式來切換 card 裡面的內容，card 裡面會加上 &lt;router-view&gt; 標籤，和外層一樣的 &lt;router-view&gt; 標籤， router-veiw 的部分就會切換 child、child2、child3</li><li>router 配置檔 index.js 加上子元件的路徑</li><li>在 page.vue 使用 &lt;router-link&gt; 來切換這三個子分頁</li></ol>



<pre class="wp-block-code"><code>// 5.
// 自訂的分頁元件
// 載入卡片元件
import child from '@/components/pages/child';
import child2 from '@/components/pages/child2;
import child3 from '@/components/pages/child3;

children: &#91;
  {
    name: '卡片 1', // 元件呈現的名稱
    path: '' , //對應的虛擬路徑
    component: Home, // 對應的元件
  },
  {
    name: '卡片 1', // 元件呈現的名稱
    path: 'child2', // 對應的虛擬路徑
    component: child2, // 對應的元件
  },
  {
    name: '卡片 1', // 元件呈現的名稱
    path: 'child3', // 對應的虛擬路徑
    component: child3, // 對應的元件
  },
],</code></pre>



<pre class="wp-block-code"><code>// 6.
&lt;router-link to="/page/"&gt;卡片 1&lt;/router-link&gt;
&lt;router-link to="/page/child2"&gt;卡片 2&lt;/router-link&gt;
&lt;router-link to="/page/child3"&gt;卡片 3&lt;/router-link&gt;</code></pre>



<h3>使用動態路由切換頁面 Ajax 結果</h3>



<p>透過蘋果日報的網頁來介紹。<br><br>動態路由的用處是使用相同的版型，透過 id 來決定這裡面要載入什麼樣的內容。</p>



<p>操作步驟</p>



<ol><li>在 index.js 有三個子元件，這個子元件都是使用相同的版型、內容，調整其中一個版型試看看，使用的是 child3 來做調整，改成 path: ‘child/:id’，回到網頁把url 改成 …/#/page/child/ffff</li><li>取到 id 的方式是在 child3.vue，使用一個 created，這個 created 就是在這個元件生成的時候，同時執行這個方法，這個就是可以存取動態路由的方式</li><li>了解有什麼樣的用處，使用 vue-axios 載進來了解一下</li><li>停止終端機，安裝 vue-axios 套件，把套件內容加到 entry (main.js) 裡面來，就可以去啟用它</li><li>重新執行 npm run dev</li><li>回到 child3.vue 元件，使用 axios 來取得遠端資料<br><a rel="noreferrer noopener" href="https://randomuser.me/" target="_blank">RANDOM USER GENERATOR</a>，試著把它資料讀進來</li><li>動態路由的使用方式就是我們可以固定取到同一筆資料，<br>在 RANDOM USER 文件裡面有個 Seeds 的方法，可以取到同一個人的資料，接下來使用動態路由的方式去存取同一路由的方式去存取同一份資料</li><li>這個就是動態路由的使用方式，我們可以用這個來決定 Ajax 所讀入的資料</li></ol>



<pre class="wp-block-code"><code>// 1. index.js
path: 'child/:id'</code></pre>



<pre class="wp-block-code"><code>// 2. child3.vue
created() {
  console.log(this.$route.params.id);
},</code></pre>



<pre class="wp-block-code"><code>// 4.
npm install --save axios vue-axios

// Import libraries in entry file
import axios from 'axios';
import VueAxios from 'vue-axios';

// Usage in Vue 2
Vue.use(VueAxios, axios);</code></pre>



<pre class="wp-block-code"><code>// 6.
created() {
  console.log(this.$route.params.id);
  this.$http.get('https://randomuser.me/api/').then((response) =&gt; {
    console.log(response);
  });
},</code></pre>



<pre class="wp-block-code"><code>// 7.
created() {
  console.log(this.$route.params.id);
  const id = this.$route.params.id;
  this.$http.get(`https://randomuser.me/api/?seed=${id}`).then((response) =&gt; {
    console.log(response);
  });
},</code></pre>



<h3>命名路由，同一個路徑載入兩個頁面元件</h3>



<h5>調整介紹</h5>



<ol><li>在 App.vue 的 &lt;router-view&gt; 標籤外層加上 .container，限制最大的寬度</li><li>在 child3.vue 的部分，原本是採用 id 的方式直接載入路徑，現在是改載入隨機的圖片，child3.vue id已經被拿掉、router 的 index.js 也沒有呈現 id</li><li>在每個卡片的部分使用一些假圖</li></ol>



<p>主要調整的部分，美化的設計、加上圖片、外層加上 .container，以及卡片3的 id 拿掉。</p>



<h5>同一個畫面下，直接執行兩個 router-view</h5>



<p>操作步驟</p>



<ol><li>在 App.vue 的地方，主要呈現的下方區塊就是在這個 &lt;router-view&gt; 上面，但有些時候在載入時會需要同時載入不同的區塊，在 container 的外層想要另外加入一個選單，就可以新增一個 &lt;router-view&gt; 上來，下面那個 &lt;router-view&gt; 就是預設的 &lt;router-view&gt;，上面這個就是另外設定的 &lt;router-view&gt;，給予名稱 name=”menu”，存檔後畫面並不會有太大的調整。因為當沒有使用 name 的部分，另外一個，另外一個則是使用預設的狀態，所以目前所設定都跑在預設的 &lt;router-view&gt; 上面，上面另外設定的 &lt;router-view&gt; 並沒有使用到</li><li>新增一個 menu.vue，從現有的元件使用 page.vue 另存 menu.vue，把卡片拿掉，留下上面連結的地方</li><li>在 page.vue 上方的連結拿掉，把它移動 menu.vue 裡面來，menu 裡面的連結稍做美化，使用 Bootstrap 4 裡面的 Navs 的元件，複製貼到 menu.vue，並把現有的 &lt;router-link&gt; 替換進去，同時記得 class 也要加回去，多餘的連結就清掉。現在的狀態就是把原本 page.vue 裡面的 nav-link 移動到 menu 上面，然後存檔。現在畫面上就沒有 nav-link，可以在 menu.vue 裡面 div 加上間距 .my-3</li><li>在 Home 這頁就不要加入上方的選單，在 Page 頁面才要加入上方的選單</li><li>到路由的配置文件 (router 裡面的 index.js)，把 menu.vue 載進來</li><li>到 index.js 分頁的地方，原本是使用 component 在渲染下面這個區塊，把 component 改成 components，裡面使用是一個物件，物件裡面第一個是 default、第二個是自定義的 &lt;router-view&gt; 的名稱，使用 menu 名稱，default 的部分就採用、渲染原來的 Page，menu 就渲染剛所載入的 Menu 的元件</li><li>回到畫面上，重新整理，按下 Page 分頁後， 上方就出現自定義的 menu，下方的部分一樣是 Page 的元件，點選的時候一樣可以做畫面的切換</li><li>回到 App.vue 可以看到這兩個 &lt;router-view&gt; 可以渲染在不同的標籤上面</li><li>小問題修正，回到畫面上右鍵打開檢查、點選 Console 有跳出一些錯誤</li><li>到 index.js，這裡的 name 是不能用相同的 name，替換成卡片 1 、卡片 2、卡片 3</li><li>另外一個問題則是在 children 的部分，這裡沒有設定路徑，當沒有設定路徑的時候，就是在上層的部分預設值項目，所以下面的 name 名稱會取代上面的 name 名稱，所以要把上面的 name 註解掉，讓他進入這個連結的時候，直接使用 children 裡面 name 的名稱</li></ol>



<pre class="wp-block-code"><code>// 1. 上面的 &lt;router-view&gt;
&lt;router-view name="menu"&gt;&lt;/router-view&gt;</code></pre>



<pre class="wp-block-code"><code>// 3.
// page.vue
&lt;template&gt;
  &lt;div class="hello"&gt;
    &lt;div class="card" style="width: 18rem"&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

// menu.vue
&lt;template&gt;
  &lt;div class="hello"&gt;
    &lt;ul class="nav"&gt;
      &lt;li class="nav-item"&gt;
        &lt;router-link class="nav-link" to="/page/"&gt;卡片 1&lt;/router-link&gt;
      &lt;/li&gt;
      &lt;li class="nav-item"&gt;
        &lt;router-link class="nav-link" to="/page/child2"&gt;卡片 2&lt;/router-link&gt;
      &lt;/li&gt;
      &lt;li class="nav-item"&gt;
        &lt;router-link class="nav-link" to="/page/child3"&gt;卡片 3&lt;/router-link&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/template&gt;</code></pre>



<pre class="wp-block-code"><code>// 5. 載入選單元件
import Menu from '@/components/pages/menu';</code></pre>



<pre class="wp-block-code"><code>// 6.
components: {
  default: Page,
  menu: Menu,
},

// 講解
// components 可以載入多個元件，依據定義的名稱依序把元件載入
// default 載入預設沒有使用 name 的 &lt;router-view&gt;
// 其他部分則會對應到有自定義名稱的 &lt;router-view&gt;</code></pre>



<h3>Vue Router&nbsp;參數設定</h3>



<p>介紹 Vue Router 的配置文件。</p>



<p><a rel="noreferrer noopener" href="https://router.vuejs.org/zh/api/#router-link" target="_blank">Vue Router API 參考</a></p>



<h5>API 文檔</h5>



<ul><li>Router 構造配置</li><li>Router 實例</li></ul>



<p>主要這個小節會先介紹 Router 構造配置的部分，指的是 Vue router 配置文件，在 router 下的 index.js 這支檔案。</p>



<p>Router 構造配置的文件，就是介紹除了我們介紹這些，還有哪些方法及屬性可以使用。</p>



<p>以 routes 來說針對 routes 下的其中一個物件還有哪些方法可以去做設定，像 router 下的 index.js 有設定的 name、path，以及 component，也就是對應到 Router 構造配置的 routes 的方法可以做一些運用。其他的設置會在實戰課程有更詳盡的介紹，會搭配一些情境來做使用。</p>



<p>mode 這個的地方則是路徑配置的方法，現在的路徑配置方法是#後面帶上連結 (#/連結)，當切換頁面的時候，這個#會不斷的保留，就算切換其他頁面，他都是存在的。</p>



<p>這個 mode 的設定就可以將路徑替換成 HTML5 的模式，也就是說不需要#也可以正確的切換路徑。先把 mode 切換成 history 的模式，存檔之後回到畫面上把路徑都去掉，去掉之後在切換頁面的時候，他的#是不需要的，然後可以正確的切換頁面的內容。</p>



<p>在此特別注意的是當沒有#的時候代表他所使用的是後端伺服器的路由，他不是指使用前端的路由，因此當我們使用 history 這個模式的時候，它必須前後端的搭配，也就是不是 index.js 做調整即可，因為現在是在 webpack 的環境下，webpack 有支援這個模式，當開啟 history 模式，也就是伺服器也要對應此模式，在此比較不推薦直接把它打開，可以用預設的模式即可，也就是有帶上#這個路徑。</p>



<pre class="wp-block-code"><code>// mode 切換成 history 的模式
mode: 'history',</code></pre>



<p>base 則是說你的路徑並不是直接在根目錄下，而你是掛載在其他目錄下的時候，可以加入這個 base 的設定。</p>



<p>linkActiveClass、linkExactActiveClass，這兩個是比較相近的，前者是模糊比對，後者是絕對比對，也就是說，當我們觸發特定路徑的時候，它會在你的標籤上加上 class 的名稱。</p>



<p>回到畫面上，直接透過開發者工具，來看特定的標籤，像我們現在所啟用的是 Home 路徑，這個路徑下它就會加上 router-link-active 這個 class name 在這個標籤上。</p>



<p>接下來點擊另外一個 Page，點擊另外一個 Page 之後，上方這個 Home 的 class name 就被移除了，它會移到下方的標籤上，這個名稱是可以做替換的，預設是 “router-link-active”，當我們要做替換的話，就可把這個屬性加上來，把它換成 ‘active’，存檔之後回到畫面上，接下來它在啟用的狀態下，它就會替換成 “active”，這個就是針對於標籤的 class name 的替換。</p>



<pre class="wp-block-code"><code>// 把這個屬性加上來，把它換成 'active'
linkActiveClass: 'active',</code></pre>



<h3>自定義切換路由方法</h3>



<p>介紹路由的一些方法，在切換頁面的時候常常不能只依靠 &lt;router-link&gt; 去做切換，有些時候必須透過方法去做切換，比如說有些行為必須在 Ajax 結束之後再去切換畫面，那麼這個 &lt;router-link&gt; 就不一定適用。所以在這個章節，我們要自定義一些事件來切換這些 router。</p>



<p>到達 Vue Router 文件下方有個 Router 實例，在這個地方有個 Methods，Methods 的這個地方就有一些方法可以使用，像這裡有 push、replace、go、back、forward、replace、go、back、forward，這幾個都是切換路由的方法，在這個章節我們就來介紹這個部分。</p>



<p>打開 menu.vue打開 menu.vue，這裡已經有一些連結，在這個部分我們新增一個路徑，但是這個路徑的觸發，我們要把它改成使用 a 連結，並且自定義一些事件。我們的事件把它改成先使用 class=”nav-link” 先把樣式加上去，接下來我們使用 @click，在這個地方建議先補上 prevent 避免他被預設的事件給取代掉，然後 .prevent=”updatePath”，我們透過這個自定義的事件來更新路徑，我們把 updatePath 加到下面來，補上 methods。</p>



<pre class="wp-block-code"><code>// menu.vue 新增一個路徑，改成使用 a 連結，並且自定義一些事件
&lt;li class="nav-item"&gt;
  &lt;router-link class="nav-link" to="/page/child3"&gt;卡片 3&lt;/router-link&gt;
  &lt;a href="#" class="nav-link" @click.prevent="updatePath"&gt;&lt;/a&gt;
&lt;/li&gt;

// 把 updatePath 加到下面來，補上 methods
methods: {
  updatePath() {

  },
},</code></pre>



<p>回到文件這個地方，這個文件就有提供這些取代路徑的方式，我們先使用 push，把 router push 加上來，router push 如果你直接放在這個地方是沒有辦法直接使用，如果我們要取用它的話，我們必須要加上 this.$router.push，這個意思就是我們直接來操作這個文件所提到 router 的方法，他會直接透過 main.js 直接把這個掛載進來，所以在這個部分我們就可以使用 push 的方法。接下來我們再加上路徑，先直接切換成卡片 2 /page/child2，a 連結上方的那行先消掉，在 &lt;a&gt; 標籤裡面輸入切換到指定頁面，然後存檔，當我們把 updatePath、push 加上去之後，我們就可以透過這個切換到指定頁面的連結來切換頁面，當我們按下去之後就會切換到卡片 2按下去之後就會切換到卡片 2。</p>



<pre class="wp-block-code"><code>// updatePath
&lt;li class="nav-item"&gt;
  &lt;a href="#" class="nav-link" @click.prevent="updatePath"&gt;切換到指定頁面&lt;/a&gt;
&lt;/li&gt;

// push
methods: {
  updatePath() {
    this.$router.push('/page/child2');
  },
},</code></pre>



<p>除了這個方法之外，還可以回到上一頁，在此先把切換到指定頁面的 &lt;li&gt; 複製起來，在加上 beforePath 的方法，&lt;a&gt; 標籤改成回到前頁，在下面這部分先複製 updatePath 這一段，把 beforePath 替換過來，回到前頁我們可以參考文件裡面它所使用的是 back 這個方法，就可以把 back 加上去，裡面是不需要加入其他參數的，重新整理後，我們先按下卡片 1、2、3，接下來就可以透過回到前頁連結往前切換。</p>



<pre class="wp-block-code"><code>// beforePath
&lt;li class="nav-item"&gt;
  &lt;a href="#" class="nav-link" @click.prevent="beforePath"&gt;回到上頁&lt;/a&gt;
&lt;/li&gt;

// back
beforePath() {
  this.$router.back();
},</code></pre>



<p>另外一個 forward 就是指下一頁，還有一個與它比較相近的是 go，go 的話就是可以基於目前所在的位置往前或往後做切換，在此輸入 -1 的話，跟 back 的行為是一模一樣的。重新整理之後，按下卡片1、2、3，接下來按下回到前頁，它一樣會3、2、1的回去。</p>



<pre class="wp-block-code"><code>// goPath
&lt;li class="nav-item"&gt;
  &lt;a href="#" class="nav-link" @click.prevent="goPath"&gt;使用go回到上頁&lt;/a&gt;
&lt;/li&gt;

// go
goPath() {
  this.$router.go(-1);
},</code></pre>



<p>除此之外還有一個是 replace，replace 是與 push 蠻接近的，像我們剛剛回到前一頁是因為它在瀏覽器有個紀錄，當我們使用 replace 的時候，它則不會把這個紀錄加進去，它是直接取代目前的頁面。</p>



<pre class="wp-block-code"><code>// replacePath
&lt;li class="nav-item"&gt;
  &lt;a href="#" class="nav-link" @click.prevent="replacePath"&gt;使用replace切換到卡片 2&lt;/a&gt;
&lt;/li&gt;

// replace
replacePath() {
  this.$router.replace('/page/child2');
},</code></pre>



<p>重新整理之後，先在卡片 1、按下卡片 3、最後我們按下使用replace切換到卡片 2，現在我們的順序應該是1→3→2，但是我們在這個時候按下回到前頁，會直接跳到卡片 1，因為卡片 3跳到卡片 2的紀錄並不存在，所以它會直接跳到卡片 1，這些就是透過 methods 來操作 router 的方法，讓我們 router 的介紹基本上就到這邊，比較複雜的部份，我們則會到實戰演練的時候，來跟大家介紹其它的使用案例。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Vue 出一個電傷網站 (1)</title>
		<link>/wordpress_blog/vue-hexschool-1/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Wed, 24 Mar 2021 03:24:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=657</guid>

					<description><![CDATA[從基礎開始，完整學習 Vue.js 開發流程。 您會學到 完整了 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>從基礎開始，完整學習 Vue.js 開發流程。</p>



<h5>您會學到</h5>



<ul><li>完整了解 Vue 的運行概念</li><li>學會使用 Vue 串接後端 API</li><li>使用 Vue Cli (或不使用) 都可以完成一個互動網頁作品</li><li>具有獨立完成一個 Vue 應用程式的能力</li></ul>



<h2>第１節：介紹</h2>



<h3>課程最終任務說明</h3>



<h3>本課程特色</h3>



<ul><li>從基礎開始學</li><li>含 Cli, Router, Webpack 各工具</li><li>ES6 常用技巧</li><li>額外 API，開發電商大平台</li></ul>



<h3>課程說明</h3>



<ul><li>ES6</li><li>使用 BABEL 編譯</li><li>WEBPACK</li><li>VUE CLI</li><li>SPA (Single Page Application) – 單頁應用</li></ul>



<h5>課程內容進程</h5>



<p>JS+Vue.js → ES6 → WEBPACK → Vue Cli (SPA)</p>



<h3>六角學院線上社團</h3>



<h2>第２節：基礎 Vue.js 概述</h2>



<h3>課程資源連結</h3>



<ul><li><a rel="noreferrer noopener" href="https://github.com/hexschool/vue-exercise/tree/gh-pages" target="_blank">主要範例資源連結</a></li><li><a rel="noreferrer noopener" href="https://cn.vuejs.org/" target="_blank">Vue 中文文件</a></li><li><a rel="noreferrer noopener" href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank">Vue Devtools</a></li><li><a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets" target="_blank">VSCode Vue 套件參考</a><br>(目前下述套件功能已很全面，且安裝人數最多)<br>延伸套件不影響課程說明，可自行選用習慣的即可</li></ul>



<h5>附註說明</h5>



<p>1. 為什麼要使用 Web Server<br>因為課程範例非常多<br>為了確保連結正確以及範例能夠正常運行<br>所以本範例一定要用 Web Server 運行<br><br>2. 一定要用 VSCode 嗎？<br>並沒有強制，你可以選擇自己喜歡的文字編輯器<br>不過記得，用其它工具時也要記得運行 Web Server 喔<br><br>3. 為什麼 VSCode Web Server 打開的路徑是錯誤的(或者沒有載入 CSS)<br>這部分要請先確認是否以專案形式載入 “範例資料夾”<br>如還有問題，可以重啟 VSCode<br>再不行可截圖放到問答區發問</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="322" height="352" src="/wordpress_blog/wp-content/uploads/2022/04/路徑截圖.png" alt="" class="wp-image-659"/><figcaption>路徑截圖</figcaption></figure>



<p>Q：為什麼會沒辦法顯示樣式呢？<br>這與相對路徑與絕對路徑有關係，範例中都是使用絕對路徑<br>所以一定要使用 Web Server 才能正確顯示喔<br><a href="https://www.youtube.com/watch?v=tbnpDisJ4bs" target="_blank" rel="noreferrer noopener">路徑觀念影片</a></p>



<h3>Vue 開發環境介紹</h3>



<h5>Vue的開發環境</h5>



<ol><li>使用 Vue Dev Tools 查看本章節範例</li></ol>



<p>文字編輯器：VSCode<br>套件：Web Server</p>



<h5>VSCode 左方列表介紹：</h5>



<ol><li>檔案總管</li><li>搜尋以及取代</li><li>Git 的版本控管工具</li><li>Node.js 的除錯功能</li><li>套件的安裝</li></ol>



<h5>套件的安裝：</h5>



<ul><li>Preview on Web Server</li><li>VUE – vscode-vue</li><li>Vue 2 Snippets – Vue 2 Snippets for Visual Studio Code</li></ul>



<p>Preview on Web Server 熱鍵是 Ctrl+Shift+L</p>



<p><a rel="noreferrer noopener" href="https://vuejs.org/v2/guide/" target="_blank">Vue.js 官網文件</a>、<a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/guide/" target="_blank">Vue.js 中文版</a><br><br>兼容性 – Vue<strong>不支持</strong>IE8及以下版本。<br><a rel="noreferrer noopener" href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank">Vue Devtools</a><br><br>開發版本、生產版本，差別在能不能使用開發者工具、錯誤題示完不完整。<br><br>範例上，點擊右鍵檢視原始碼，在課程中這裡面有載入一個 JavaScript vendor 裡面就包含 Vue.js，是開發的版本。</p>



<p>MAC 系統的 VSCode 按下 CMD + P<br>WINDOWS 系統的 VSCode 按下 Ctrl + P<br>輸入路徑：basic/dev.html</p>



<p>主要練習一下 Vue Dev Tools 怎麼去使用<br><br>Vue有一個很大的特色，是用資料來驅動畫面<br><br>Google – Vue.js devtools 基本介面、功能介紹</p>



<h3>VSCode Preview on Web Server 替代套件</h3>



<p>如果使用 Preview on Web Server 尚有任何問題，可以試著使用另一個套件 –&nbsp;<a rel="noreferrer noopener" href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank">LiveServer</a>&nbsp;。</p>



<h5>使用方式：</h5>



<ol><li>安裝後重新啟動 VSCode</li><li>打開任何一個 .html 檔案</li><li>在 VSCode 畫面的右下角可以找到 Go Live 的按鈕</li><li>按下後就能打開該網頁</li></ol>



<h3>應用程式建立</h3>



<ol><li>Ctrl + P</li><li>輸入路徑：basic/instant.html</li><li>所有的範例裡面，往下會有一個 “練習開始”的一個註解</li></ol>



<h5>建立 Vue 的應用程式</h5>



<ol><li>建立一個應用程式使資料呈現於畫面上</li><li>建立兩個應用程式</li><li>試試看巢狀應用程式 (不能建立巢狀應用程式)</li></ol>



<p>basic/instant.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  {{ text }}
&lt;/div&gt;
&lt;div id="app2"&gt;
  {{ text }}
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '這裡是一段話'
  }
});
var app2 = new Vue({
  el: '#app2',
  data: {
    text: '這裡是一段話 2'
  }
});
&lt;/script&gt;</code></pre>



<p>綁定 Vue 的應用程式的時候，不是只能用 ID，也可以用 Class，然後 ID 還是比較常使用到。<br><br>Vue 一次只能綁定一個元素。<br><br>一個網頁上是可以放入兩個 Vue 的應用程式。<br><br>Vue 的應用程式是不可以使用巢狀的方式去建立，裡面這個 Vue 的應用程式是等同於無效。</p>



<p>我們在建立 Vue 的應用程式，其實我們通常只會建立一個，但是你要建立兩個在同一頁面上面是可行的。<br>特別注意的是，它是不能建立巢狀的應用程式。</p>



<ul><li>el：element，要綁定的 DOM element</li><li>data：綁定的資料</li></ul>



<h3>雙向綁定的資料</h3>



<p><a rel="noreferrer noopener" href="https://zh.wikipedia.org/wiki/MVVM" target="_blank">MVVM – 維基百科</a><br>MVVM (Model – View – ViewModel)&nbsp;是一種軟體架構模式。</p>



<h5>MVVM&nbsp;模式的組成部分</h5>



<ul><li>模型：指代表內容的資料存取層 (以資料為中心)</li><li>視圖：是使用者在螢幕上看到的結構、布局和外觀 (UI)。</li><li>視圖模型：是暴露公共屬性和命令的視圖的抽象。有的是一個繫節氣。繫結器在視圖和資料繫節器之間進行通信。</li></ul>



<p>畫面上所看到的就是 View，所操控的內容是 Model，中間自動綁定的部分就是 ViewModel。</p>



<h5>MVVM 是什麼樣的概念</h5>



<ol><li>使用雙花括號與資料串接</li><li>試試看使用 HTML 屬性綁定</li><li>試試看雙向綁定</li></ol>



<h5>使用雙花括號、Vue指令，將資料呈現於畫面。</h5>



<ul><li>{{ message }}</li><li>v-model=”message”</li><li>v-text=”message”</li><li>v-html=”message”</li></ul>



<p>basic/mvvm.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  // mustache語法、花括號或者是大括號
  {{ message }}
  // Vue指令 v-model="message"
  &lt;input type="text" v-model="message"&gt;
  // Vue指令 v-text="message"
  &lt;div v-text="message"&gt;&lt;/div&gt;
  // Vue指令 v-html="message"，可以插入新的 HTML 的標籤
  &lt;div v-html="message"&gt;&lt;/div&gt;
  
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  // 在此建立資料內容

  data: {
    message: '哈囉'
  }
})
&lt;/script&gt;</code></pre>



<h3>MVVM 的概念</h3>



<p>MVC架構，是一個前後端的架構。<br>View，就是我們看到的畫面<br>Controller，就是指控制器<br>Model，就是指模型也是資料介接的地方</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1265" height="780" src="/wordpress_blog/wp-content/uploads/2022/04/MVC-1.png" alt="" class="wp-image-661"/><figcaption>MVC 示意圖</figcaption></figure>



<figure class="wp-block-image size-full"><img loading="lazy" width="1777" height="852" src="/wordpress_blog/wp-content/uploads/2022/04/Vue-MVVM.png" alt="" class="wp-image-662"/><figcaption>MVVM 示意圖</figcaption></figure>



<p>重點說明：VUE JS 是以<strong>資料狀態</strong>操作<strong>畫面</strong>。</p>



<p>傳統的 jQuery，我們是直接操作畫面上的 DOM 元素。<br>在 Vue.js 在操作 DOM 元素的時候，是透過資料的狀態去變動它。</p>



<h3>v-bind 動態屬性指令</h3>



<h5>指令</h5>



<ol><li>透過指令(v-bind)的方式，將圖片加載於畫面之上</li></ol>



<p>Vue.js 學習→API→<a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank">指令</a></p>



<p>v-bind：是用來更新 HTML 上面的屬性。</p>



<p>basic/directive.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;img v-bind:src="imgSrc" v-bind:class="className" alt=""&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    imgSrc: 'https://images.unsplash.com/photo-1479568933336-ea01829af8de?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=d9926ef56492b20aea8508ed32ec6030&amp;auto=format&amp;fit=crop&amp;w=2250&amp;q=80',
    className: 'img-fluid'
  }
})
&lt;/script&gt;</code></pre>



<h3>v-for 動態產生多筆資料於畫面上</h3>



<h5>模板語法的延伸 v-if 及 v-for</h5>



<ol><li>使用 v-for 來呈現資料列表</li><li>使用 v-if 擷取部分資訊</li></ol>



<p>basic/if_for.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;pre&gt;{{ list }}&lt;/pre&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, index) in list" v-if="item.age &lt; 25"&gt;
      {{ index + 1 }} - {{ item.name }} 年齡是 {{ item.age }} 歲
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    list: &#91;
      {
        name: '小明',
        age: 16
      },
      {
        name: '媽媽',
        age: 38,
      },
      {
        name: '漂亮阿姨',
        age: 24
      }
    ]
  }
})
&lt;/script&gt;</code></pre>



<h5>補充：Vue.js 文件</h5>



<p><a rel="noreferrer noopener" href="https://vuejs.org/v2/guide/list.html" target="_blank">List Rendering</a>、<a href="https://v1-cn.vuejs.org/guide/list.html" target="_blank" rel="noreferrer noopener">列表渲染</a></p>



<h5>講解</h5>



<p>使用 v-for 這個指令，這個 v-for&nbsp;就有點像是在 li&nbsp;上面使用 forEach 一樣，那麼我們會先使用一個自定義的變數，這個自訂的變數名稱是可以自己決定的，通常會使用 item，然後 in 一個陣列上，這個陣列就會一一的將值取出來然後將它存到 item&nbsp;這個變數上。<br><br>接下來我們就可以把這裡面的值，呈現在 li&nbsp;上。這裡我們就可以輸入 item，那這&nbsp;item&nbsp;指的就是裡面這一個一個的物件，所以如果我要把這個名稱給取出來的話，我就可以使用 item.name 。<br><br>接下來我們也可以將後面的字串繼續加上去，年齡是幾歲，這裡就可以加上 item.age&nbsp;。<br><br>這個就是 v-for&nbsp;的一個很標準的使用方法。<br><br>如果說我需要了解這個每一個 li&nbsp;它現在在陣列它的索引是第幾個，我們在這個自定義變數，我們就可以這樣寫&nbsp;item index，前面這個就是陣列地值，那後面這個就是陣列的索引，那我們也可以把這個索引加到畫面上面來，index。要記得索引是從 0 開始，如果你要把它從 1 開始，那就是 index + 1。<br><br>v-if&nbsp;就是在這個迴圈上面再加上一個判斷式，加上去的方式，就是可以直接 v-for&nbsp;後面再加上 v-if，這個 v-if 就是直接在這個標籤上面加上一個判斷式，然後依據它所回傳的值是 true&nbsp;或 false，來決定要不要去渲染這個標籤，所以當它如果是 false&nbsp;的時候，這個標籤那就不會渲染，那如果它是&nbsp;true&nbsp;的話，就會把這一段標籤渲染出來。<br><br>接下來我們就可以加入一個判斷式叫做假設它的年齡是小於&nbsp;25&nbsp;歲的話，那麼就把這一個 li&nbsp;給渲染出來。這個 item.age&nbsp;就是指這裡面每一個人的年齡，所以我們定義在小於&nbsp;25&nbsp;歲的話，就把這個 li 給渲染出來。<br><br>試著使用 v-for&nbsp;將這個陣列的值一一的渲染出來，那另外再使用 v-if&nbsp;拿來判斷部分的條件。</p>



<h3>使用 v-on 來操作頁面行為</h3>



<h5>處理互動式行為 v-on 指令</h5>



<ol><li>使用 v-on 指令來製作互動行為</li><li>反轉字串</li></ol>



<p>basic/v_on.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="text" class="form-control" v-model="text"&gt;
  &lt;button class="btn btn-primary mt-1" v-on:click="reverseText"&gt;反轉字串&lt;/button&gt;
  &lt;div class="mt-3"&gt;
    {{ newText }}
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '',
    newText: ''
},
// 請在此撰寫 JavaScript
  methods: {
    reverseText: function(){
      console.log('點我', this.text);
      this.newText = this.text.split('').reverse().join('');
    }
  }  
});
&lt;/script&gt;</code></pre>



<h5>介紹 v-on 以及 methods 的操作方式。</h5>



<ul><li>methods：方法</li></ul>



<h3>預先定義資料狀態的重要性</h3>



<h5>預先定義資料結構</h5>



<ol><li>了解資料結構預先定義與未定義之差異</li></ol>



<pre class="wp-block-code"><code>// 接續上一個章節
// 當我們可以操作資料內容之後，預先定義資料結構變成一件很重要的事情。

// {{ newText }}
// data: {
     newText: ''
}
// 兩個資料互相綁定，在這個時候，我們一定要預先定義資料結構的習慣。

// 在我們 Vue 裡面，如果要操作資料內容，它一定要預先定義好它的資料結構。

// 在後面的課程也會介紹到，如果沒有辦法預先定義的話該怎麼做。</code></pre>



<p>defined_var.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="text" class="form-control" v-model="text"&gt;
  &lt;button class="btn btn-primary mt-1" v-on:click="reverseText"&gt;反轉字串&lt;/button&gt;
  &lt;div class="mt-3"&gt;
    {{ newText }}
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '',
    newText: ''
},
// 請在此撰寫 JavaScript
  methods: {
    reverseText: function(){
      console.log('點我', this.text);
      this.newText = this.text.split('').reverse().join('');
    }
  }  
});
&lt;/script&gt;</code></pre>



<h3>透過修飾符，讓 v-on 操作更簡單</h3>



<h5>處理互動式行為 v-on 指令</h5>



<ol><li>請將 button 改成 a 標籤，並加上 preventDefault()</li><li>使用修飾符取代</li><li>將 input 加上 Enter 事件</li><li>將範例改成使用縮寫表示</li></ol>



<p>jQuery preventDefault() 寫法 – 取消默認行為</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="text" class="form-control" v-model="text"&gt;
  &lt;a href="#" class="btn btn-primary mt-1"&gt;反轉字串&lt;/a&gt;
  &lt;div class="mt-3"&gt;
    {{ newText }}
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
$(document).ready(function(){
  $('a.btn').on('click', function(evt){
    console.log(evt);
    evt.preventDefault();
  })
});
&lt;/script&gt;

br*20</code></pre>



<p>basic/modifiers.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="text" class="form-control" v-model="text"&gt;
  &lt;a href="#" class="btn btn-primary mt-1" v-on:click.prevent="reverseText"&gt;反轉字串&lt;/a&gt;
  &lt;div class="mt-3"&gt;
    {{ newText }}
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '',
    newText: ''
  },
  // 請在此撰寫 JavaScript
  methods: {
    reverseText(event){
    // console.log(event);
    // event.preventDefault();
    this.newText = this.text.split('').reverse().join('');
    }
  }
});
&lt;/script&gt;

br*20</code></pre>



<h5><a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/guide/events.html" target="_blank">Vue.js 官網文件 – 事件處理</a></h5>



<ul><li>事件修飾符</li><li>按鍵修飾符</li></ul>



<p>按鍵修飾符 – enter</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="text" class="form-control" v-on:keyup.enter="reverseText" v-model="text"&gt;
  &lt;a class="btn btn-primary mt-1" v-on:click.prevent="reverseText"&gt;反轉字串&lt;/a&gt;
  &lt;div class="mt-3"&gt;
    {{ newText }}
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '',
    newText: ''
  },
  // 請在此撰寫 JavaScript
  methods: {
    reverseText(event) {
      this.newText = this.text.split('').reverse().join('');
      }
    }
});
&lt;/script&gt;</code></pre>



<p>v-on 寫法</p>



<pre class="wp-block-code"><code>v-on:keyup.enter="reverseText"
v-on:click.prevent="reverseText"</code></pre>



<p>v-on 縮寫寫法</p>



<pre class="wp-block-code"><code>@keyup.enter="reverseText"
@click.prevent="reverseText"</code></pre>



<p>指令 v-bind</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="text" class="form-control" @keyup.enter="reverseText" v-model="text"&gt;
  &lt;a v-bind:href="link" class="btn btn-primary mt-1" @click="reverseText"&gt;反轉字串&lt;/a&gt;
  &lt;div class="mt-3"&gt;
    {{ newText }}
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '',
    newText: '',
    link: 'https://www.google.com.tw/'
},
// 請在此撰寫 JavaScript
  methods: {
    reverseText(event){
      this.newText = this.text.split('').reverse().join('');
    }
  }
});  
&lt;/script&gt;</code></pre>



<p>v-bind 寫法</p>



<pre class="wp-block-code"><code>v-bind:href="link"</code></pre>



<p>v-bind 縮寫寫法</p>



<pre class="wp-block-code"><code>:href="link"</code></pre>



<p>縮寫</p>



<pre class="wp-block-code"><code>v-on == @
v-bind: == :</code></pre>



<h3>v-class 動態切換 className</h3>



<h5>切換 Class</h5>



<ol><li>為 .box 動態加上 className “rotate”</li></ol>



<p>怎麼透過 Vue 來動態的切換 class name。</p>



<p>basic/v_class.html</p>



<pre class="wp-block-code"><code>// :class="{ '要加入的 ClassName': 判斷式 }"</code></pre>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div class="box" :class="{ 'rotate':  isTransform }"&gt;&lt;/div&gt;
  &lt;hr&gt;
  &lt;button class="btn btn-outline-primary" @click="isTransform = !isTransform"&gt;選轉物件&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    isTransform: false
  },
});
&lt;/script&gt;

&lt;style&gt;
.box {
  transition: transform .5s;
}
.box.rotate {
  transform: rotate(45deg)
}
&lt;/style&gt;</code></pre>



<h3>computed 運算功能</h3>



<h5>計算屬性</h5>



<ol><li>使用 computed 取代原有的表達式</li></ol>



<h5>介紹 computed 這個方法。</h5>



<p>computed 直接會將結果存到這個變數裡面，然後這個變數，是可以直接使用。<br>在 computed 裡面，我們所宣告任何屬性它都是 function 並且它都會 return 一個值。<br>類似直接在 data 上面宣告一些值，不同的是 computed 會將結果回傳於這個變數之中，並且可以運用在我們的畫面上。</p>



<p>basic/computed.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;input type="text" class="form-control" v-model="text"&gt;
  &lt;div class="mt-3"&gt;
    {{ text.split('').reverse().join('') }}
  &lt;/div&gt;
  {{ reverseText }}
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '',
    newText: ''
  },
  // 請在此撰寫 JavaScript
  computed: {
    reverseText: function() {
      // return 'aaa';
      return this.text.split('').reverse().join('');
    }
  }
});
&lt;/script&gt;</code></pre>



<p>注意的地方，computed 的觸發條件是透過這個 data 裡面的值，如果受到更動的時候，這個 computed 的結果，才會跟著做更動。如果說你的值並不是在這個 data 內，也就是說它不是在這個 this 下，它的更動無法被觸發的。</p>



<h3>Methods 與 Computed 的使用情境</h3>



<ul><li>computed 是在監控資料更動後，重新運算結果呈現於畫面上。<br>一般來說<strong>不會修改資料</strong>，只會回傳用於<strong>畫面呈現的資料</strong>。</li><li>methods 就是互動的函式，需要觸發才會運作。<br>會用來修改資料內容。</li></ul>



<p>效能<br>如果資料量大，computed 自然會比較慢<br>只要資料變動就會觸發，無形之中執行次數也會增加<br>因此在大量資料時，會建議透過 methods 減少不必要的運算</p>



<ul><li>computed：需要計算後才能使用的屬性</li></ul>



<h3>Vue 表單與資料的綁定</h3>



<h5>表單雙向綁定</h5>



<ol><li>請跟隨課程完成此章節。</li></ol>



<p>介紹表單跟 Vue 的資料綁定。</p>



<p>basic/form.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h4&gt;字串&lt;/h4&gt;
  {{ text }}
  &lt;input type="text" class="form-control" v-model="text"&gt;
  &lt;hr&gt;
  &lt;pre&gt;{{ textarea }}&lt;/pre&gt;
  &lt;textarea cols="30" rows="3" class="form-control" v-model="textarea"&gt;&lt;/textarea&gt;
  &lt;hr&gt;
  &lt;h4&gt;Checkbox 與 Radio&lt;/h4&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="check1" v-model="checkbox1"&gt;
    &lt;label class="form-check-label" for="check1"&gt; 你要不要看電影 &lt;/label&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="check2" v-model="checkboxArray" value="雞"&gt;
    &lt;label class="form-check-label" for="check2"&gt;雞&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="check3" v-model="checkboxArray" value="豬"&gt;
    &lt;label class="form-check-label" for="check3"&gt;豬&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="check4" v-model="checkboxArray" value="牛"&gt;
    &lt;label class="form-check-label" for="check4"&gt;牛&lt;/label&gt;
  &lt;/div&gt;
  &lt;p&gt;晚餐火鍋裡有 &lt;span v-for="item in checkboxArray"&gt;{{ item }} &lt;/span&gt;。&lt;/p&gt;
  &lt;hr&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="radio" class="form-check-input" id="radio2" v-model="singleRadio" value="雞"&gt;
    &lt;label class="form-check-label" for="radio2"&gt;雞&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="radio" class="form-check-input" id="radio3" v-model="singleRadio" value="豬"&gt;
    &lt;label class="form-check-label" for="radio3"&gt;豬&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="radio" class="form-check-input" id="radio4" v-model="singleRadio" value="牛"&gt;
    &lt;label class="form-check-label" for="radio4"&gt;牛&lt;/label&gt;
  &lt;/div&gt;
  &lt;p&gt;晚餐火鍋裡有 {{ singleRadio }}。&lt;/p&gt;
  &lt;hr&gt;
  &lt;h4&gt;Select&lt;/h4&gt;
  &lt;select name="" id="" class="form-control" v-model="selected"&gt;
    &lt;option value="" disabled&gt;-- 請選擇 --&lt;/option&gt;
    &lt;option value="小明"&gt;小明&lt;/option&gt;
    &lt;option value="小美"&gt;漂亮的小美&lt;/option&gt;
  &lt;/select&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '',
    textarea: '',
    checkbox1: false,
    checkboxArray: &#91;],
    singleRadio: '',
    selected: '',
  },
});
&lt;/script&gt;</code></pre>



<h3>元件基礎概念</h3>



<h5>元件化</h5>



<ol><li>將以下元素轉為元件</li></ol>



<p>Vue 的每一個元件，它都可以獨立的儲存自己的狀態。<br><br>建立一個元件，我們可以在前方加入個 Vue 的 component，定義一個它的 component 的名稱，然後後面一樣插入一個物件。<br><br>這裡的 component 名稱是可以自己定義的，也是我們套用在畫面上所使用的標籤，這裡叫做 counter-component。<br><br>在寫 data 的時候會改使用 function，那 function 會 return 一個物件。規定一定要使用 function 來 return 這個資料內容。<br><br>如果我們是新增一個應用程式的話，則不需要使用這個 function，當我們在建立元件的時候就必須使用 function 來 return 這個資料。<br><br>接下來就是要定義，這個元件長什麼樣子，這裡是使用反引號，是 ES6 的新的語法，定義字串內容的。<br>(反引號多行時不需要加入其它符號，比較適合呈現本範例)，</p>



<pre class="wp-block-code"><code>// Vue.component('component 名稱', {
     data: function() {
       return {
         物件
       }
     },
     template: `
       加入 div，並且把元件的內容直接加進來
     `
});</code></pre>



<p>basic/components.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div&gt;
    你已經點擊 &lt;button class="btn btn-outline-secondary btn-sm" @click="counter += 1"&gt;{{ counter }}&lt;/button&gt; 下。
    你已經點擊 &lt;button class="btn btn-outline-secondary btn-sm" @click="counter += 1"&gt;{{ counter }}&lt;/button&gt; 下。
    &lt;counter-component&gt;&lt;/counter-component&gt;
    &lt;counter-component&gt;&lt;/counter-component&gt;
    &lt;counter-component&gt;&lt;/counter-component&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
// 請在此撰寫 JavaScript
Vue.component('counter-component',{
  data: function() {
    return {
      counter: 0
    }
  },
  template: `
    &lt;div&gt;
      &lt;button class="btn btn-outline-secondary btn-sm" @click="counter += 1"&gt;{{ counter }}&lt;/button&gt;
    &lt;/div&gt;
  `
});


var app = new Vue({
  el: '#app',
  data: {
    counter: 0
  },
});
&lt;/script&gt;</code></pre>



<h2>第３節：製作一個 Todo List 來小試身手吧</h2>



<h3>這個範例要練習什麼!?</h3>



<h5>Todo 範例製作</h5>



<ol><li>請跟隨課程完成此章節。</li></ol>



<p>basic/todo.html – 初始程式碼</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div class="input-group mb-3"&gt;
    &lt;div class="input-group-prepend"&gt;
      &lt;span class="input-group-text" id="basic-addon1"&gt;待辦事項&lt;/span&gt;
    &lt;/div&gt;
    &lt;input type="text" class="form-control" placeholder="準備要做的任務"&gt;
    &lt;div class="input-group-append"&gt;
      &lt;button class="btn btn-primary" type="button"&gt;新增&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="card text-center"&gt;
    &lt;div class="card-header"&gt;
      &lt;ul class="nav nav-tabs card-header-tabs"&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link active" href="#"&gt;全部&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link " href="#"&gt;進行中&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" href="#"&gt;已完成&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;ul class="list-group list-group-flush text-left"&gt;
      &lt;li class="list-group-item"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" id="a1"&gt;
            &lt;label class="form-check-label" for="a1"&gt;
              Cras justo odio
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li class="list-group-item"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" id="a1"&gt;
            &lt;label class="form-check-label completed" for="a1"&gt;
              Cras justo odio
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li class="list-group-item"&gt;
        &lt;input type="text" class="form-control"&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="card-footer d-flex justify-content-between"&gt;
      &lt;span&gt;還有 3 筆任務未完成&lt;/span&gt;
      &lt;a href="#"&gt;清除所有任務&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {},
});
&lt;/script&gt;

&lt;style&gt;
.completed {
  text-decoration: line-through
}
&lt;/style&gt;</code></pre>



<h3>套用版型及建立待辦事項列表的資料</h3>



<p>&lt;input&gt; 的內容加到 todo 的列表裡面，todo 的列表基本上會使用 v-for 來製作，會有個陣列來儲存這些資料內容，我們可以先定義它叫 item in todos，這個 todos 會用來儲存所有待辦事項資料內容。<br><br>&lt;input&gt; 用來新增待辦事項內容， v-model=”newTodo”，這個資料內容輸入之後，會透過&lt;button&gt;新增一個辦事項到 todos 裡面，&lt;button&gt;會加入一個方法，叫做 @click=”addTodo”。<br><br>接下來，我們把這些項目加到下面 Vue 的原始碼裡面。<br><br>在 data 裡面，我們會用 newTodo 來新增一個待辦事項，它是一個純文字，另外我們還會用 todos，它是一個陣列，用來呈現目前的待辦事項有哪些內容。<br><br>剛剛也有新增一個方法 (methods)，用來新增一個新的待辦事項，叫做 addTodo，基本上整個比較基礎的架構都建立起來了。<br><br>現在因為 todos 裡面沒有內容，我們可以先試寫一份，等下要呈現的內容，等下再來新增的時候，我們心中會比較有一個概念。<br><br>我們先在 todos 新增一個假的資料，先新增一個物件，基本上它會有個 id，這個 id 的作用是，在這個地方有個 checkbox，當我們要透過這個名稱去選擇這個 checkbox 的時候，它兩邊的名稱是需要對應的，所以這個地方必須要有個 id 去選擇它，這邊會有個 id、title、completed，我們就先用這筆資料來呈現在畫面上試試看。<br><br>另外一份假的資料先註解起來，我們先留下這份要呈現的資料，在 &lt;label&gt; 文字內容方面，就會改成 {{ item.title }}，&lt;input&gt;裡面的 id 會改成 :id=”item.id”，並把 &lt;label&gt; 裡面的 for 改成 :for=”item.id”，這樣 :for 和 :id 就可以對應起來。<br><br>completed 我們會把有沒有完成把它畫掉，它是透過 classname 做切換，現在還不能選擇，因為我們 id 是空的，id 先給它一個隨意的數字，那現在我們點擊 你好 就可以選取到這個框框的內容，它所切換的是這個 completed，在 &lt;input&gt; 加入 v-model=”item.completed”。<br><br>接下來透過 Vue 開發工具，來看資料是否正確。在 Root 裡面有個 todos，todos 有個第０筆資料，這裡有 completed、id、title，那我們去按下 你好 這個字，它會去觸發這個 checkbox，然後它的 completed 會從 false 變成 true，所以這個資料結構就是我們所需要的。<br><br>從上方的 &lt;input&gt; 去新增一個資料到下面的地方，methods 裡面的 addTodo 可以新宣告一個變數，暫時儲存 newTodo 所存下的內容，var value = this.newTodo;，接下來我們需要一個隨機的 id，id 的方式我們可以使用 timestamp 的方式，就是使用時間然後轉為數字的一種格式，我們叫做 timestamp，var timestamp = Math.floor(Date.now());，timestamp 取得可以直接使用 Date.now(); 來取得，並且透過 Math.floor 把它轉為正整數，這樣子就是一個文字以及 id，value 就會包含它的標題以及它的 timestamp。<br>使用 console.log(value, timestamp) 查詢這些內容，會出現標題內容、以及一串數字，數字我們就是要做為 id 使用。<br><br>接下來我們要把這筆資料寫到 todos 裡面，this.todos.push，push 就會把一個新的資料推到這個 todos 陣列裡面，推的方式我們就會新增一個物件，新的物件就會加在 todos 陣列裡面已有資料的後方，現在我們就要推一個新的物件進去，這個物件包含 id: timestamp, title: value, completed: false，然後看程式碼是否有正確運作。<br><br>&lt;input&gt; 新增待辦事項文字後的清除，this.newTodo = ”;，每次輸入的內容點擊新增後會加到下面的地方，並清除 &lt;input&gt; 文字內容。<br><br>除了按下新增按鈕新增內容以外，還有另外一個方式，是透過按鍵的行為把資料內容給新增下來，&lt;input&gt; 加入 @keyup.enter=”addTodo”</p>



<pre class="wp-block-code"><code>// 待辦事項的列表 &lt;li&gt; 用 v-for 製作
&lt;li class="list-group-item" v-for="item in todos"&gt;
// &lt;input&gt; 用來新增待辦內容，加入 v-model="newTodo"
// &lt;button&gt; 透過按鈕新增待辦事項，加入 @click="addTodo"
// 把 v-for、v-model、@click 加入 Vue 原始碼裡面
data: {
  newTodo: '',
  todos: &#91;],
},
methods: {
  addTodo: function() {

}
// 試寫一份資料內容，呈現在畫面看看
todos: &#91;
  {
    id: '',
    title: '你好',
    completed: false
  }
]
// 把另外一份假資料註解起來，留下要呈現的。
&lt;label&gt; 文字內容改成 {{ item.title }}
// &lt;input&gt; checkbox 的 id 的部分改成 :id="item.id"
// &lt;label&gt; for 改成 :for="item.id"
// id 是空的，先隨意給個數字。
// &lt;input&gt; checkbox 加入 v-model="item.completed"
// 使用 Vue 開發者工具查看資料是否正確
// 資料結構是我們需要的
// &lt;input&gt; 新增資料到下方列表
methods: {
  addTodo: function() {
    var value = this.newTodo; // 儲存資料
    var timestamp = Math.floor(Date.now()); // 抓取時間命名 id
    console.log(value, timestamp);
    this.todos.push({
      id: timestamp,
      title: value,
      completed: false
    }); // 將id, title, completed加入陣列
    this.newTodo = '' // 清除輸入欄位
  }
}
// 透過按鍵行為把資料內容新增
// &lt;input&gt; 加入 @keyup.enter="addTodo"</code></pre>



<p>basic/todo.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div class="input-group mb-3"&gt;
    &lt;div class="input-group-prepend"&gt;
      &lt;span class="input-group-text" id="basic-addon1"&gt;待辦事項&lt;/span&gt;
    &lt;/div&gt;
    &lt;input type="text" class="form-control" placeholder="準備要做的任務" v-model="newTodo" @keyup.enter="addTodo"&gt;
    &lt;div class="input-group-append"&gt;
      &lt;button class="btn btn-primary" type="button" @click="addTodo"&gt;新增&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="card text-center"&gt;
    &lt;div class="card-header"&gt;
      &lt;ul class="nav nav-tabs card-header-tabs"&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link active" href="#"&gt;全部&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link " href="#"&gt;進行中&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" href="#"&gt;已完成&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;ul class="list-group list-group-flush text-left"&gt;
      &lt;li class="list-group-item" v-for="item in todos"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" v-model="item.completed" :id="item.id"&gt;
            &lt;label class="form-check-label" :for="item.id"&gt;
              {{ item.title }}
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;!-- &lt;li class="list-group-item"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" id="a1"&gt;
            &lt;label class="form-check-label completed" for="a1"&gt;
              Cras justo odio
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt; --&gt;
      &lt;li class="list-group-item"&gt;
        &lt;input type="text" class="form-control"&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="card-footer d-flex justify-content-between"&gt;
      &lt;span&gt;還有 3 筆任務未完成&lt;/span&gt;
      &lt;a href="#"&gt;清除所有任務&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    newTodo:'',
    todos: &#91;
      {
        id: '345',
        title: '你好',
        completed: false
      }
    ],
  },
  methods: {
    addTodo: function() {
      var value = this.newTodo;
      var timestamp = Math.floor(Date.now());
      console.log(value, timestamp);
      this.todos.push({
        id: timestamp,
        title: value,
        computed: false
      });
      this.newTodo = '';
    }
  }
});
&lt;/script&gt;

&lt;style&gt;
.completed {
  text-decoration: line-through
}
&lt;/style&gt;</code></pre>



<h3>刪除陣列上的特定資料</h3>



<pre class="wp-block-code"><code>// 解決新增空白的列表
// 如果value是空值，return終止
if (!value) {
  return;
}
// 解決使用空白鍵還是可以新增內容的問題
// 並且可以刪除內容前後端的空白
// 加入 .trim()
var value = this.newTodo.trim();
// 製作刪除的功能
&lt;button&gt; 加入 @click="removeTodo"
// methods 下方加入 removeTodo
// &lt;li&gt; v-for 改成 v-for="(item, key) in todos"
// &lt;button&gt; @click="removeTodo" 改成 @click="removeTodo(key)"
// 移除陣列的值可以使用 .splice()
removeTodo: function(key) {
  this.todos.splice(key, 1)
}
</code></pre>



<p>basic/todo.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div class="input-group mb-3"&gt;
    &lt;div class="input-group-prepend"&gt;
      &lt;span class="input-group-text" id="basic-addon1"&gt;待辦事項&lt;/span&gt;
    &lt;/div&gt;
    &lt;input type="text" class="form-control" placeholder="準備要做的任務" v-model="newTodo" @keyup.enter="addTodo"&gt;
    &lt;div class="input-group-append"&gt;
      &lt;button class="btn btn-primary" type="button" @click="addTodo"&gt;新增&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="card text-center"&gt;
    &lt;div class="card-header"&gt;
      &lt;ul class="nav nav-tabs card-header-tabs"&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link active" href="#"&gt;全部&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link " href="#"&gt;進行中&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" href="#"&gt;已完成&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;ul class="list-group list-group-flush text-left"&gt;
      &lt;li class="list-group-item" v-for="(item, key) in todos"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" v-model="item.completed" :id="item.id"&gt;
            &lt;label class="form-check-label" :for="item.id"&gt;
              {{ item.title }}
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" @click="removeTodo(key)" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;!-- &lt;li class="list-group-item"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" id="a1"&gt;
            &lt;label class="form-check-label completed" for="a1"&gt;
              Cras justo odio
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt; --&gt;
      &lt;li class="list-group-item"&gt;
        &lt;input type="text" class="form-control"&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="card-footer d-flex justify-content-between"&gt;
      &lt;span&gt;還有 3 筆任務未完成&lt;/span&gt;
      &lt;a href="#"&gt;清除所有任務&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    newTodo:'',
    todos: &#91;
      {
        id: '345',
        title: '你好',
        completed: false
      }
    ],
  },
  methods: {
    addTodo: function() {
      var value = this.newTodo.trim();
      var timestamp = Math.floor(Date.now());
      // console.log(value, timestamp);
      if (!value) {
        return;
      }
      this.todos.push({
        id: timestamp,
        title: value,
        computed: false
      });
      this.newTodo = '';
    },
    removeTodo: function(key) {
      this.todos.splice(key, 1);
    }
  }
});
&lt;/script&gt;

&lt;style&gt;
.completed {
  text-decoration: line-through
}
&lt;/style&gt;</code></pre>



<h3>製作頁籤分類的功能</h3>



<pre class="wp-block-code"><code>// 製作刪除的效果、上方頁籤過濾的功能
// className 的切換
&lt;label class="form-check-label"
:class="{'completed': item.completed}"
:for="item.id"&gt;
  {{ item.title }}
&lt;/label&gt;
// 頁籤切換的效果
//在 data 新增一個變數 visibility
visibility: 'all'
// 刪除 class的active
// 加上 :class、@click
&lt;ul class="nav nav-tabs card-header-tabs"&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link" :class="{'active': visibility == 'all'}" @click="visibility= 'all'" href="#"&gt;全部&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link " :class="{'active': visibility == 'active'}" @click="visibility= 'active'" href="#"&gt;進行中&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link" :class="{'active': visibility == 'completed'}" @click="visibility= 'completed'" href="#"&gt;已完成&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;
// 過濾的功能會使用 computed
computed: {
  filteredTodos: function() {
    return this.todos;
  }
}
// &lt;li&gt; v-for中的 todos 換成 filteredTodos
&lt;li class="list-group-item" v-for="(item, key) in filteredTodos"&gt;
// 使用判斷式寫一些方法
computed: {
  filteredTodos: function() {
    if (this.visibility == 'all') {
      return this.todos;
    }
    return &#91;];
  }
}
// 加上 else if 判斷進行中、已完成
computed: {
  filteredTodos: function() {
    if (this.visibility == 'all') {
      return this.todos;
    } else if (this.visibility == 'active') {
      var newTodos = &#91;];
      this.todos.forEach(function (item){
        if (!item.completed) {
          newTodos.push(item);
        }
      })
      return newTodos;
    } else if (this.visibility == 'completed') {
      var newTodos = &#91;];
      this.todos.forEach(function (item){
        if (item.completed) {
          newTodos.push(item);
        }
      })
      return newTodos;
    }
    return &#91;];
  }
}</code></pre>



<p>basic/todo.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div class="input-group mb-3"&gt;
    &lt;div class="input-group-prepend"&gt;
      &lt;span class="input-group-text" id="basic-addon1"&gt;待辦事項&lt;/span&gt;
    &lt;/div&gt;
    &lt;input type="text" class="form-control" placeholder="準備要做的任務" v-model="newTodo" @keyup.enter="addTodo"&gt;
    &lt;div class="input-group-append"&gt;
      &lt;button class="btn btn-primary" type="button" @click="addTodo"&gt;新增&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="card text-center"&gt;
    &lt;div class="card-header"&gt;
      &lt;ul class="nav nav-tabs card-header-tabs"&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" :class="{'active': visibility == 'all'}" @click="visibility= 'all'" href="#"&gt;全部&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link " :class="{'active': visibility == 'active'}" @click="visibility= 'active'" href="#"&gt;進行中&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" :class="{'active': visibility == 'completed'}" @click="visibility= 'completed'" href="#"&gt;已完成&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;ul class="list-group list-group-flush text-left"&gt;
      &lt;li class="list-group-item" v-for="(item, key) in filteredTodos"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" v-model="item.completed" :id="item.id"&gt;
            &lt;label class="form-check-label" 
            :class="{'completed': item.completed}" 
            :for="item.id"&gt;
              {{ item.title }}
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" @click="removeTodo(key)" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;!-- &lt;li class="list-group-item"&gt;
        &lt;div class="d-flex"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" id="a1"&gt;
            &lt;label class="form-check-label completed" for="a1"&gt;
              Cras justo odio
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/li&gt; --&gt;
      &lt;li class="list-group-item"&gt;
        &lt;input type="text" class="form-control"&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="card-footer d-flex justify-content-between"&gt;
      &lt;span&gt;還有 3 筆任務未完成&lt;/span&gt;
      &lt;a href="#"&gt;清除所有任務&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    newTodo:'',
    todos: &#91;
      {
        id: '345',
        title: '你好',
        completed: false
      }
    ],
    visibility: 'all'
  },
  methods: {
    addTodo: function() {
      var value = this.newTodo.trim();
      var timestamp = Math.floor(Date.now());
      // console.log(value, timestamp);
      if (!value) {
        return;
      }
      this.todos.push({
        id: timestamp,
        title: value,
        computed: false
      });
      this.newTodo = '';
    },
    removeTodo: function(key) {
      this.todos.splice(key, 1);
    }
  },
  computed: {
    filteredTodos: function() {
      if (this.visibility == 'all') {
        return this.todos;
      } else if (this.visibility == 'active') {
        var newTodos = &#91;];
        this.todos.forEach(function(item) {
          if (!item.completed) {
            newTodos.push(item);
          }
        })
        return newTodos;
      } else if (this.visibility == 'completed') {
        var newTodos = &#91;];
        this.todos.forEach(function(item) {
          if (item.completed) {
            newTodos.push(item);
          }
        })
        return newTodos;
      }
      return &#91;];
    }
  }
});
&lt;/script&gt;

&lt;style&gt;
.completed {
  text-decoration: line-through
}
&lt;/style&gt;</code></pre>



<h3>雙擊修改資料內容</h3>



<pre class="wp-block-code"><code>// 編輯待辦事項
// &lt;li&gt; 加入 @dblclick="editTodo(item)"
// methods的地方加上 editTodo
editTodo: function(item) {
  console.log(item);
}
// data 的地方新增 cacheTodo、cacheTitle
cacheTodo: {},
cacheTitle: '',
// editTodo
editTodo: function(item) {
  console.log(item);
  this.cacheTodo = item;
  this.cacheTitle = item.title;
// 註解程式碼 &lt;li&gt;
// 把 &lt;input&gt; 取出放在 .d-flex 的下方
// 製作判斷
// .d-flex 加入 v-if="item.id !== cacheTodo.id"
// &lt;input&gt; 加上 v-if="item.id === cacheTodo.id"
// 打開 Vue 開發工具查看
// 把事件加到 &lt;input&gt; 上面
&lt;input type="text" class="form-control"
 v-model="cacheTitle"
 @keyup.esc="cancelEdit()"
 v-if="item.id === cacheTodo.id"&gt;
// methods 下方加上 cancelEdit
cancelEdit: function() {
  this.cacheTodo = {}
}
// 將編輯的內容存進去
&lt;input type="text" class="form-control"
 v-model="cacheTitle"
 @keyup.esc="cancelEdit()"
 @keyup.enter="doneEdit(item)"
 v-if="item.id === cacheTodo.id"&gt;
// methods 下方加上 doneEdit
doneEdit: function(item) {
  item.title = this.cacheTitle;
  this.cacheTitle = '';
  this.cacheTodo = {};
}</code></pre>



<p>basic/todo.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div class="input-group mb-3"&gt;
    &lt;div class="input-group-prepend"&gt;
      &lt;span class="input-group-text" id="basic-addon1"&gt;待辦事項&lt;/span&gt;
    &lt;/div&gt;
    &lt;input type="text" class="form-control" placeholder="準備要做的任務" v-model="newTodo" @keyup.enter="addTodo"&gt;
    &lt;div class="input-group-append"&gt;
      &lt;button class="btn btn-primary" type="button" @click="addTodo"&gt;新增&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="card text-center"&gt;
    &lt;div class="card-header"&gt;
      &lt;ul class="nav nav-tabs card-header-tabs"&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" :class="{'active': visibility == 'all'}" @click="visibility= 'all'" href="#"&gt;全部&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link " :class="{'active': visibility == 'active'}" @click="visibility= 'active'" href="#"&gt;進行中&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" :class="{'active': visibility == 'completed'}" @click="visibility= 'completed'" href="#"&gt;已完成&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;ul class="list-group list-group-flush text-left"&gt;
      &lt;li class="list-group-item" v-for="(item, key) in filteredTodos" @dblclick="editTodo(item)"&gt;
        &lt;div class="d-flex" v-if="item.id !== cacheTodo.id"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" v-model="item.completed" :id="item.id"&gt;
            &lt;label class="form-check-label" 
            :class="{'completed': item.completed}" 
            :for="item.id"&gt;
              {{ item.title }}
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" @click="removeTodo(key)" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
        &lt;input type="text" class="form-control"
         v-model="cacheTitle"
         @keyup.esc="cancelEdit()"
         @keyup.enter="doneEdit(item)"
         v-if="item.id === cacheTodo.id"&gt;
      &lt;/li&gt;
      &lt;!-- &lt;li class="list-group-item"&gt;
        &lt;input type="text" class="form-control"&gt;
      &lt;/li&gt; --&gt;
    &lt;/ul&gt;
    &lt;div class="card-footer d-flex justify-content-between"&gt;
      &lt;span&gt;還有 3 筆任務未完成&lt;/span&gt;
      &lt;a href="#"&gt;清除所有任務&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    newTodo:'',
    todos: &#91;
      {
        id: '345',
        title: '你好',
        completed: false
      }
    ],
    visibility: 'all',
    cacheTodo: {},
    cacheTitle: '',
  },
  methods: {
    addTodo: function() {
      var value = this.newTodo.trim();
      var timestamp = Math.floor(Date.now());
      // console.log(value, timestamp);
      if (!value) {
        return;
      }
      this.todos.push({
        id: timestamp,
        title: value,
        computed: false
      });
      this.newTodo = '';
    },
    removeTodo: function(key) {
      this.todos.splice(key, 1);
    },
    editTodo: function(item) {
      console.log(item);
      this.cacheTodo = item;
      this.cacheTitle = item.title;
    },
    cancelEdit: function() {
      this.cacheTodo = {}
    },
    doneEdit: function(item) {
      item.title = this.cacheTitle;
      this.cacheTitle = '';
      this.cacheTodo = {};
    }
  },
  computed: {
    filteredTodos: function() {
      if (this.visibility == 'all') {
        return this.todos;
      } else if (this.visibility == 'active') {
        var newTodos = &#91;];
        this.todos.forEach(function(item) {
          if (!item.completed) {
            newTodos.push(item);
          }
        })
        return newTodos;
      } else if (this.visibility == 'completed') {
        var newTodos = &#91;];
        this.todos.forEach(function(item) {
          if (item.completed) {
            newTodos.push(item);
          }
        })
        return newTodos;
      }
      return &#91;];
    }
  }
});
&lt;/script&gt;

&lt;style&gt;
.completed {
  text-decoration: line-through
}
&lt;/style&gt;</code></pre>



<h3>刪除項目補充說明</h3>



<pre class="wp-block-code"><code>// 索引的位置會有變化。
// 利用之前存好的id，先宣告 newIndex 等於一個空的值，並且透過 forEach 取得的是相同的值。
// 原本傳入的是 key 改成 todo
removeTodo: function (todo) {
  var newIndex: '';

  this.todos.splice(key, 1);
},
// 刪除的部分，原本是 key 改成 item
// @click="removeTodo(item)
/* 方法一
removeTodo: function (todo) {
  var newIndex = '';
  var vm = this;
  vm.todos.forEach(function(item, key) {
    if (todo.id === item.id) {
      newIndex = key
    }
  })
  this.todos.splice(newIndex, 1);
},
*/
// 方法二
/*
removeTodo: functioon (todo) {
  var vm = this;
  var newIndex = vm.todos.findIndex(function (item, key) {
    return todo.id === item.id;
  })
  this.todos.splice(newIndex, 1);
},
*/</code></pre>



<p>basic/todo.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;div class="input-group mb-3"&gt;
    &lt;div class="input-group-prepend"&gt;
      &lt;span class="input-group-text" id="basic-addon1"&gt;待辦事項&lt;/span&gt;
    &lt;/div&gt;
    &lt;input type="text" class="form-control" placeholder="準備要做的任務" v-model="newTodo" @keyup.enter="addTodo"&gt;
    &lt;div class="input-group-append"&gt;
      &lt;button class="btn btn-primary" type="button" @click="addTodo"&gt;新增&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="card text-center"&gt;
    &lt;div class="card-header"&gt;
      &lt;ul class="nav nav-tabs card-header-tabs"&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" :class="{'active': visibility == 'all'}" @click="visibility= 'all'" href="#"&gt;全部&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link " :class="{'active': visibility == 'active'}" @click="visibility= 'active'" href="#"&gt;進行中&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;a class="nav-link" :class="{'active': visibility == 'completed'}" @click="visibility= 'completed'" href="#"&gt;已完成&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;ul class="list-group list-group-flush text-left"&gt;
      &lt;li class="list-group-item" v-for="(item, key) in filteredTodos" @dblclick="editTodo(item)"&gt;
        &lt;div class="d-flex" v-if="item.id !== cacheTodo.id"&gt;
          &lt;div class="form-check"&gt;
            &lt;input type="checkbox" class="form-check-input" v-model="item.completed" :id="item.id"&gt;
            &lt;label class="form-check-label" 
            :class="{'completed': item.completed}" 
            :for="item.id"&gt;
              {{ item.title }}
            &lt;/label&gt;
          &lt;/div&gt;
          &lt;button type="button" class="close ml-auto" @click="removeTodo(item)" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
        &lt;input type="text" class="form-control"
         v-model="cacheTitle"
         @keyup.esc="cancelEdit()"
         @keyup.enter="doneEdit(item)"
         v-if="item.id === cacheTodo.id"&gt;
      &lt;/li&gt;
      &lt;!-- &lt;li class="list-group-item"&gt;
        &lt;input type="text" class="form-control"&gt;
      &lt;/li&gt; --&gt;
    &lt;/ul&gt;
    &lt;div class="card-footer d-flex justify-content-between"&gt;
      &lt;span&gt;還有 3 筆任務未完成&lt;/span&gt;
      &lt;a href="#"&gt;清除所有任務&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    newTodo:'',
    todos: &#91;
      // {
      //   id: '345',
      //   title: '你好',
      //   completed: false
      // }
    ],
    visibility: 'all',
    cacheTodo: {},
    cacheTitle: '',
  },
  methods: {
    addTodo: function() {
      var value = this.newTodo.trim();
      var timestamp = Math.floor(Date.now());
      // console.log(value, timestamp);
      if (!value) {
        return;
      }
      this.todos.push({
        id: timestamp,
        title: value,
        computed: false
      });
      this.newTodo = '';
    },
    // 方法一
    // removeTodo: function(todo) {
    //   var newIndex = '';
    //   var vm = this;
    //   vm.todos.forEach(function(item, key) {
    //     if (todo.id === item.id) {
    //       newIndex = key
    //     }
    //   })
    //   this.todos.splice(newIndex, 1);
    // },
    // 方法二
    removeTodo: function (todo) {
      var vm = this;
      var newIndex = vm.todos.findIndex(function (item, key) {
        return todo.id === item.id;
      })
      this.todos.splice(newIndex, 1);
    },
    editTodo: function(item) {
      console.log(item);
      this.cacheTodo = item;
      this.cacheTitle = item.title;
    },
    cancelEdit: function() {
      this.cacheTodo = {}
    },
    doneEdit: function(item) {
      item.title = this.cacheTitle;
      this.cacheTitle = '';
      this.cacheTodo = {};
    }
  },
  computed: {
    filteredTodos: function() {
      if (this.visibility == 'all') {
        return this.todos;
      } else if (this.visibility == 'active') {
        var newTodos = &#91;];
        this.todos.forEach(function(item) {
          if (!item.completed) {
            newTodos.push(item);
          }
        })
        return newTodos;
      } else if (this.visibility == 'completed') {
        var newTodos = &#91;];
        this.todos.forEach(function(item) {
          if (item.completed) {
            newTodos.push(item);
          }
        })
        return newTodos;
      }
      return &#91;];
    }
  }
});
&lt;/script&gt;

&lt;style&gt;
.completed {
  text-decoration: line-through
}
&lt;/style&gt;</code></pre>



<h3>換你來試試看，完成這份作業吧</h3>



<h5>顯示還剩下多少未完成項目</h5>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="card-footer d-flex justify-content-between"&gt;
  &lt;span&gt;還有 {{ countActiveTodo }} 筆任務未完成&lt;/span&gt;
&lt;/div&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>computed:{
...
  countActiveTodo: function(){
    return this.todos.filter( item =&gt; item.completed === false).length;
  }
}</code></pre>



<h5>刪除所有資料</h5>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="card-footer d-flex justify-content-between"&gt;
  &lt;span&gt;還有 {{ countActiveTodo }} 筆任務未完成&lt;/span&gt;
  &lt;a href="#' @click.prevent="deleteAllTodo"&gt;&lt;/a&gt;
&lt;/div&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>methods:{
...
  deleteAllTodo: function(){
    this.todos = &#91;];
  }
}</code></pre>



<p>參考資源：<a rel="noreferrer noopener" href="https://codepen.io/alysachan/pen/bGevJBV" target="_blank">Alysa Chan</a>、<a rel="noreferrer noopener" href="https://hackmd.io/Alzb0FUMRD6G8_WtQjghuA?both" target="_blank">Alysa Chan筆記</a></p>



<p>作業連結：<a href="https://codepen.io/GeeHsu/pen/eYdWOoZ" target="_blank" rel="noreferrer noopener">Todo Vue.js 作業</a></p>



<h3>實戰體驗 – Todo List 的資源連結</h3>



<p>作業模板：<br><br><a rel="noreferrer noopener" href="https://codepen.io/Wcc723/pen/VXRWyg" target="_blank">Todo Demo Template</a><br>“進入此連結後可 Fork 到自己的帳號下”<br>此模板與課程範例進行的類似<br>同學可以在此練習作業<br>並透過 Udemy 問答區繳交作業<br><br>透過此範例，同學可提早完整了解 Vue.js 的概觀<br>接下來在學習 Vue 的語法細節及生命週期<br>會更容易了解這些的相關性</p>



<h2>第４節：進階模板語法介紹</h2>



<p><a href="https://cn.vuejs.org/v2/guide/syntax.html" target="_blank" rel="noreferrer noopener">Vue.js 模板語法</a></p>



<h3>模板資料細節說明</h3>



<h5>基礎模板語法</h5>



<ul><li>字串</li><li>原始 HTML</li><li>單次綁定</li><li>表達式</li><li>HTML 屬性</li></ul>



<p>v-html –&nbsp;<a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/api/#v-html" target="_blank">額外注意事項</a><br><br>在網站上動態渲染任意HTML是非常危險的，因為容易導致<a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank">XSS攻擊</a>。只在可信內容上使用<code>v-html</code>，<strong>永不</strong>用在用戶提交的內容上。</p>



<p>跨網站指令碼&nbsp;(Cross-site scripting，通常簡稱為：XSS)，是一種網站應用程式的安全漏洞攻擊，是代碼注入的一種。它允許惡意使用者將程式碼注入到網頁上，其他使用者在觀看網頁時就會受到影響。</p>



<p>template/basic.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h4&gt;字串&lt;/h4&gt;
  {{ text }}
  &lt;input type="text" class="form-control" v-model="text"&gt;

  &lt;h4 class="mt-3"&gt;原始 HTML&lt;/h4&gt;
  {{ rawHtml }}
  &lt;p v-html="rawHtml"&gt;請在此加入原始 HTML 結構&lt;/p&gt;
  &lt;p&gt;&lt;a href="https://cn.vuejs.org/v2/api/#v-html"&gt;額外注意事項&lt;/a&gt;&lt;/p&gt;

  &lt;h4 class="mt-3"&gt;單次綁定&lt;/h4&gt;
  &lt;div v-text="text" v-once&gt;請將此欄位改為單次綁定&lt;/div&gt;

  &lt;h4 class="mt-3"&gt;表達式&lt;/h4&gt;
  &lt;p&gt;練習不同的表達式&lt;/p&gt;
  {{ text + rawHtml }}
  {{ text.split('').reverse().join('') }}
  {{ number1 * number2 }}

  &lt;hr&gt;
  &lt;h4 class="mt-3"&gt;HTML 屬性&lt;/h4&gt;
  &lt;p :id="htmlId"&gt;請綁定上 ID&lt;/p&gt;
  
  &lt;input type="text" :disabled="isDisabled" class="form-control" placeholder="請在此加上動態 disabled"&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    text: '這是一段文字',
    rawHtml: `&lt;span class="text-danger"&gt;紅色文字&lt;/span&gt;`,
    number1: 100,
    number2: 300,
    htmlId: 'HTMLID',
    isDisabled: true
  },
});
&lt;/script&gt;</code></pre>



<h3>動態切換 ClassName 及 Style 多種方法</h3>



<h5>切換樣式</h5>



<ul><li>物件寫法</li><li>物件寫法 2</li><li>陣列寫法</li><li>綁定行內樣式</li><li>自動加上 Prefix (每個版本結果不同)</li></ul>



<h5>介紹怎麼切換樣式。</h5>



<p>實際在做的時候，資料狀態建議自己輸入一次，才能比較了解切換狀態的時候，資料邏輯是怎麼去建構的。</p>



<p>不能使用 – 這個符號(Ex：bg-danger)，來做為物件選取的名稱，會在 Console 跳出錯誤，雖然可以操作，但不是正確的寫法，正確寫法是改成用中括號的方式來選取 (Ex：[‘bg-danger’])。</p>



<p>CSS屬性 user-select 控制用戶是否可用文本。</p>



<p>template/v_class.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h4&gt;物件寫法&lt;/h4&gt;
  &lt;div class="box" :class="{'rotate': isTransform, 'bg-danger': boxColor}"&gt;&lt;/div&gt;
  &lt;p&gt;請為此元素加上動態 className&lt;/p&gt;
  &lt;hr&gt;
  &lt;button class="btn btn-outline-primary" v-on:click="isTransform = !isTransform"&gt;選轉物件&lt;/button&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="classToggle1" v-model="boxColor"&gt;
    &lt;label class="form-check-label" for="classToggle1"&gt;切換色彩&lt;/label&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;h5&gt;物件寫法 2&lt;/h5&gt;
  &lt;div class="box" :class="objectClass"&gt;&lt;/div&gt;
  &lt;p&gt;請將此範例改為 "物件" 寫法&lt;/p&gt;
  &lt;hr&gt;
  &lt;button class="btn btn-outline-primary" @click="objectClass.rotate = !objectClass.rotate"&gt;選轉物件&lt;/button&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="classToggle2" v-model="objectClass&#91;'bg-danger']"&gt;
    &lt;label class="form-check-label" for="classToggle2"&gt;切換色彩&lt;/label&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;h4&gt;陣列寫法&lt;/h4&gt;
  &lt;button class="btn" :class="&#91;'btn-outline-primary','active']"&gt;請操作本元件&lt;/button&gt;
  &lt;button class="btn" :class="arrayClass"&gt;請操作本元件&lt;/button&gt;
  &lt;p&gt;請用陣列呈現此元件 className&lt;/p&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="classToggle3" v-model="arrayClass" value="btn-outline-primary"&gt;
    &lt;label class="form-check-label" for="classToggle3"&gt;切換樣式&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="classToggle4" v-model="arrayClass" value="active"&gt;
    &lt;label class="form-check-label" for="classToggle4"&gt;啟用元素狀態&lt;/label&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;h4&gt;綁定行內樣式&lt;/h4&gt;
  &lt;p&gt;請用不同方式綁定以下行內樣式&lt;/p&gt;
  &lt;div class="box" :style="{backgroundColor: 'red'}"&gt;&lt;/div&gt;
  &lt;div class="box" :style="styleObject"&gt;&lt;/div&gt;
  &lt;div class="box" :style="&#91;{backgroundColor: 'red', borderWidth: '5px'}]"&gt;&lt;/div&gt;
  &lt;div class="box" :style="&#91;styleObject, styleObject2]"&gt;&lt;/div&gt;
  &lt;hr&gt;
  &lt;h5&gt;自動加上 Prefix (每個版本結果不同)&lt;/h5&gt;
  &lt;div class="box" :style="styleObject3"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    isTransform: false,
    boxColor: false,
    objectClass: {
      'rotate': false,
      'bg-danger': false,
    },

    // Array 操作
    arrayClass: &#91;],

    // 行內樣式
    // 使用駝峰式命名
    styleObject: {
      backgroundColor: 'red',
      borderWidth: '5px'
    },
    styleObject2: {
      boxShadow: '3px 3px 5px rgba(0, 0, 0, 0.16)'
    },
    styleObject3: {
      userSelect: 'none'
    }
  },
});
&lt;/script&gt;

&lt;style&gt;
.box {
  transition: all .5s;
}
.box.rotate {
  transform: rotate(45deg)
}
&lt;/style&gt;</code></pre>



<h3>v-for 與其使用細節</h3>



<h5>v-for 迴圈</h5>



<ul><li>陣列與物件的迴圈</li><li>Key</li><li>Filter</li><li>不能運作的狀況</li><li>純數字的迴圈</li><li>Template 的運用</li><li>v-for 與 v-if</li><li>v-for 與 元件</li></ul>



<p><a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/api/?#Vue-set" target="_blank">Vue.js Vue.set</a><br><br>注意：現在建議元件使用 v-for 都加上 key。&nbsp;<a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/guide/list.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-for" target="_blank">參考</a></p>



<p>template/v_for.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h4&gt;陣列與物件的迴圈&lt;/h4&gt;
  &lt;p&gt;請使用 v-for 在陣列與物件上，並且加上索引&lt;/p&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, key) in objectData"&gt;
      {{ key }} - {{ item.name }} {{ item.age }} 歲
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, key) in objectData"&gt;
      {{ key }} - {{ item.name }} {{ item.age }} 歲
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;hr&gt;
  &lt;h4&gt;Key&lt;/h4&gt;
  &lt;p&gt;請在範例上補上 key，並觀察其差異&lt;/p&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, key) in arrayData" :key="item.age"&gt;
      {{ key }} - {{ item.name }} {{ item.age }} 歲 &lt;input type="text"&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;button class="btn btn-outline-primary" @click="reverseArray"&gt;反轉陣列&lt;/button&gt;

  &lt;h4&gt;Filter&lt;/h4&gt;
  &lt;p&gt;請製作過濾資料&lt;/p&gt;
  &lt;input type="text" class="form-control" v-model="filterText" @keyup.enter="filterData"&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, key) in filterArray" :key="item.age"&gt;
      {{ key }} - {{ item.name }} {{ item.age }} 歲 &lt;input type="text"&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4&gt;不能運作的狀況&lt;/h4&gt;
  &lt;p&gt;講師說明&lt;/p&gt;
  &lt;button class="btn btn-outline-primary" @click="cantWork"&gt;無法運行&lt;/button&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, key) in arrayData" :key="item.age"&gt;
      {{ key }} - {{ item.name }} {{ item.age }} 歲 &lt;input type="text"&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4&gt;純數字的迴圈&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li v-for="item in 10"&gt;
      {{ item }}
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4&gt;Template 的運用&lt;/h4&gt;
  &lt;p&gt;請將兩個 tr 一組使用 v-for&lt;/p&gt;
  &lt;table class="table"&gt;
    &lt;template v-for="item in arrayData"&gt;
      &lt;tr&gt;
        &lt;td&gt;{{item.age}}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;{{item.name}}&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/template&gt;
  &lt;/table&gt;

  &lt;h4&gt;v-for 與 v-if&lt;/h4&gt;
  &lt;p&gt;請加上 v-if 判斷式&lt;/p&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, key) in arrayData" v-if="item.age &lt;= 19"&gt;
      {{ key }} - {{ item.name }} {{ item.age }} 歲
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4&gt;v-for 與 元件&lt;/h4&gt;
  &lt;p&gt;講師說明&lt;/p&gt;
  &lt;ul&gt;
    &lt;list-item :item="item" v-for="(item, key) in arrayData" :key="item.age"&gt;&lt;/list-item&gt;
  &lt;/ul&gt;
  &lt;p&gt;注意：現在建議元件使用 v-for 都加上 key。&lt;a href="https://cn.vuejs.org/v2/guide/list.html#%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84-v-for"&gt;參考&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
Vue.component('list-item', {
  template: `
    &lt;li&gt;
      {{ item.name }} {{ item.age }} 歲
    &lt;/li&gt;
  `,
  props: &#91;'item']
});

var app = new Vue({
  el: '#app',
  data: {
    arrayData: &#91;
      {
        name: '小明',
        age: 16
      },
      {
        name: '漂亮阿姨',
        age: 24
      },
      {
        name: '杰倫',
        age: 20
      }
    ],
    objectData: {
      ming: {
        name: '小明',
        age: 16
      },
      auntie: {
        name: '漂亮阿姨',
        age: 24
      },
      jay: {
        name: '杰倫',
        age: 20
      }
    },
    filterArray: &#91;],
    filterText: ''
  },
  methods: {
    // 請在此練習 JavaScript
    reverseArray: function () {
      this.arrayData.reverse()
      console.log(this.arrayData)
    },
    filterData: function() {
      var vm = this; // (this)
      vm.filterArray = vm.arrayData.filter(function(item) {
        console.log(vm.filterText, item.name, item.name.match(vm.filterText));
        return item.name.match(vm.filterText);
      });

    },
    cantWork: function() {
      // 無法運行一
      // this.arrayData.length = 0;
      // console.log(this.arrayData);

      // 無法運行二
      // this.arrayData&#91;0] = {
      //   name: '小強',
      //   age: 99,
      // }
      // console.log(this.arrayData);

      // 解法
      Vue.set(this.arrayData, 0, {
        name: '小強',
        age: 99,
      })
    }
  }
});
&lt;/script&gt;
</code></pre>



<p><a href="https://cn.vuejs.org/v2/api/index.html#Vue-set" target="_blank" rel="noreferrer noopener">Vue.set</a></p>



<h3>v-if 與其使用細節</h3>



<h5>v-if 模板判斷</h5>



<ul><li>v-if, v-else</li><li>template 標籤</li><li>v-else-if</li><li>KEY</li><li>v-if 與 v-show</li></ul>



<p><a href="https://vuejs.org/v2/guide/conditional.html" target="_blank" rel="noreferrer noopener">Conditional Rendering</a>、<a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/guide/conditional.html" target="_blank">條件渲染 v-if</a></p>



<p>v-if, v-else – 成功、失敗範例</p>



<pre class="wp-block-code"><code>// 寫法一
// 成功
v-if="isSuccess == true"
// 失敗
v-if="isSuccess == false"
// 寫法二
// 成功
v-if="isSuccess"
// 失敗
v-if="!isSuccess"
// 寫法三
// 成功
v-if="isSuccess"
// 失敗
v-else</code></pre>



<p>template/v_if.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h4&gt;v-if, v-else&lt;/h4&gt;
  &lt;p&gt;使用 v-if, v-else 切換物件呈現&lt;/p&gt;
  &lt;div class="alert alert-success" v-if="isSuccess"&gt;成功!&lt;/div&gt;
  &lt;div class="alert alert-danger" v-else&gt;失敗!&lt;/div&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="isSuccess" v-model="isSuccess"&gt;
    &lt;label class="form-check-label" for="isSuccess"&gt;啟用元素狀態&lt;/label&gt;
  &lt;/div&gt;

  &lt;h4&gt;template 標籤&lt;/h4&gt;
  &lt;p&gt;使用 template 切換多數 DOM 呈現&lt;/p&gt;
  &lt;table class="table"&gt;
    &lt;thead&gt;
      &lt;th&gt;編號&lt;/th&gt;
      &lt;th&gt;姓名&lt;/th&gt;
    &lt;/thead&gt;
    &lt;template v-if="showTemplate"&gt;
      &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;安妮&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;小明&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/template&gt;
  &lt;/table&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="showTemplate" v-model="showTemplate"&gt;
    &lt;label class="form-check-label" for="showTemplate"&gt;啟用元素狀態&lt;/label&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;h4&gt;v-else-if&lt;/h4&gt;
  &lt;p&gt;使用 v-else-if 做出分頁頁籤&lt;/p&gt;
  &lt;ul class="nav nav-tabs"&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link" href="#" :class="{'active': link == 'a'}" @click.prevent="link = 'a'"&gt;標題一&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link" href="#" :class="{'active': link == 'b'}" @click.prevent="link = 'b'"&gt;標題二&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class="nav-item"&gt;
      &lt;a class="nav-link" href="#" :class="{'active': link == 'c'}" @click.prevent="link = 'c'"&gt;標題三&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;div class="content"&gt;
    &lt;div v-if="link == 'a'"&gt;Ａ&lt;/div&gt;
    &lt;div v-else-if="link == 'b'"&gt;Ｂ&lt;/div&gt;
    &lt;div v-else-if="link == 'c'"&gt;Ｃ&lt;/div&gt;
  &lt;/div&gt;
  &lt;hr&gt;
  &lt;h4&gt;KEY&lt;/h4&gt;
  &lt;p&gt;講師說明 Vue 切換狀態可能遇到的問題&lt;/p&gt;
  &lt;template v-if="loginType === 'username'"&gt;
    &lt;label&gt;Username&lt;/label&gt;
    &lt;input class="form-control" placeholder="Enter your username":key="1"&gt;
  &lt;/template&gt;
  &lt;template v-else&gt;
    &lt;label&gt;Email&lt;/label&gt;
    &lt;input class="form-control" placeholder="Enter your email address" :key="2"&gt;
  &lt;/template&gt;
  &lt;button class="btn btn-outline-primary mt-3" @click="toggleLoginType"&gt;切換狀態&lt;/button&gt;
  &lt;hr&gt;
  &lt;h4&gt;v-if 與 v-show&lt;/h4&gt;
  &lt;p&gt;講師說明 v-if 與 v-show 的差異&lt;/p&gt;
  &lt;div class="alert alert-success" v-if="isSuccess"&gt;成功!&lt;/div&gt;
  &lt;div class="alert alert-danger" v-if="!isSuccess"&gt;失敗!&lt;/div&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="isSuccess2" v-model="isSuccess"&gt;
    &lt;label class="form-check-label" for="isSuccess2"&gt;啟用元素狀態&lt;/label&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    isSuccess: true,
    showTemplate: true,

    link: 'a',

    loginType: 'username'
  },
  methods: {
    toggleLoginType: function () {
      return this.loginType = this.loginType === 'username' ? 'email' : 'username'
    }
  }
});
&lt;/script&gt;</code></pre>



<p>特別記得的是 key 這個指令，可能是在使用 Vue 常踩到的地雷。</p>



<h3>Computed 與 Watch</h3>



<h5>計算及監聽</h5>



<ul><li>Computed</li><li>Watch</li></ul>



<p><a href="https://vuejs.org/v2/guide/computed.html" target="_blank" rel="noreferrer noopener">Computed Properties and Watchers</a>、<a rel="noreferrer noopener" href="https://cn.vuejs.org/v2/guide/computed.html" target="_blank">計算屬性和偵聽器</a></p>



<p>template/computed_watch.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h4&gt;Computed&lt;/h4&gt;
  &lt;p&gt;使用 Computed 來過濾資料。&lt;/p&gt;
  &lt;input type="text" class="form-control" v-model="filterText"&gt;
  &lt;ul&gt;
    &lt;li v-for="(item, key) in filterArray" :key="item.age"&gt;
      {{ key }} - {{ item.name }} {{ item.age }} 歲 &lt;input type="text"&gt;
    &lt;/li&gt;
  &lt;/ul&gt; 
  &lt;p&gt;使用 Computed 來呈現時間格式。&lt;/p&gt;
  &lt;p&gt;{{ formatTime }}&lt;/p&gt;
  &lt;h4&gt;Watch&lt;/h4&gt;
  &lt;p&gt;使用 trigger 來觸發旋轉 box、並在三秒後改變回來&lt;/p&gt;
  &lt;div class="box" :class="{'rotate': trigger }"&gt;&lt;/div&gt;
  &lt;hr&gt;
  &lt;button class="btn btn-outline-primary" @click="trigger = true"&gt;Counter&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    arrayData: &#91;
      {
        name: '小明',
        age: 16
      },
      {
        name: '漂亮阿姨',
        age: 24
      },
      {
        name: '杰倫',
        age: 20
      }
    ],
    filterText: '',
    trigger: false,
    newDate: 0
  },
  computed: {
    filterArray: function() {
      var vm = this;
      return vm.arrayData.filter(function(item) {
        return item.name.match(vm.filterText);
      })
    },
    formatTime: function () {
      console.log(this.newDate);
      var dates = new Date(this.newDate * 1000);
      var year = dates.getFullYear();
      var month = dates.getMonth() + 1;
      var date = dates.getDate();
      var hours = dates.getHours();
      var minutes = dates.getMinutes();
      var seconds = dates.getSeconds();
      return `${year}/${month}/${date} ${hours}:${minutes}:${seconds}`
    }
  },
  watch: {
    trigger: function () {
      var vm = this;
      setTimeout(() =&gt; {
        vm.trigger = false
      }, 3000);
    }
  },
  mounted:function () {
    this.newDate = Math.floor(Date.now() / 1000);
  }
});
&lt;/script&gt;

&lt;style&gt;
.box {
  transition: all .5s;
}
.box.rotate {
  transform: rotate(45deg)
}
&lt;/style&gt;</code></pre>



<h3>表單細節操作</h3>



<p>template/form.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;h4&gt;Select&lt;/h4&gt;
  &lt;select name="" id="" class="form-control" v-model="selected"&gt;
    &lt;option disabled value=""&gt;請選擇&lt;/option&gt;
    &lt;option value="小美"&gt;小美&lt;/option&gt;
    &lt;option value="可愛小妞"&gt;可愛小妞&lt;/option&gt;
    &lt;option value="漂亮阿姨"&gt;漂亮阿姨&lt;/option&gt;
  &lt;/select&gt;
  &lt;p&gt;小明喜歡的女生是 {{ selected }}。&lt;/p&gt;
  &lt;hr&gt;
  &lt;select name="" id="" class="form-control" v-model="selected2"&gt;
    &lt;option disabled value=""&gt;請選擇&lt;/option&gt;
    &lt;option :value="item" v-for="item in selectData"&gt;{{ item }}&lt;/option&gt;
  &lt;/select&gt;
  &lt;p&gt;小明喜歡的女生是 {{ selected2 }}。&lt;/p&gt;
  &lt;hr&gt;
  &lt;h4 class="mt-3"&gt;多選&lt;/h4&gt;
  &lt;select name="" id="" class="form-control" multiple v-model="multiSelected"&gt;
    &lt;option value="小美"&gt;小美&lt;/option&gt;
    &lt;option value="可愛小妞"&gt;可愛小妞&lt;/option&gt;
    &lt;option value="漂亮阿姨"&gt;漂亮阿姨&lt;/option&gt;
  &lt;/select&gt;
  &lt;p&gt;小明喜歡的女生是 &lt;span v-for="item in multiSelected"&gt;{{ item }} &lt;/span&gt;。&lt;/p&gt;
  &lt;hr&gt;
  &lt;h4 class="mt-3"&gt;複選框&lt;/h4&gt;
  &lt;div class="form-check"&gt;
    &lt;input type="checkbox" class="form-check-input" id="sex" v-model="sex" true-value="男生" false-value="女生"&gt;
    &lt;label class="form-check-label" for="sex"&gt;{{ sex }}&lt;/label&gt;
  &lt;/div&gt;
  &lt;h4 class="mt-3"&gt;修飾符&lt;/h4&gt;
  {{ lazyMsg }}
  &lt;input type="text" class="form-control" v-model.lazy="lazyMsg"&gt;
  &lt;br&gt;
  &lt;pre&gt;{{ typeof(age) }} {{ age }}&lt;/pre&gt;
  &lt;input type="number" class="form-control" v-model.number="age"&gt;
  &lt;br&gt;
  {{ trimMsg }}緊黏的文字
  &lt;input type="text" class="form-control" v-model.trim="trimMsg"&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    singleRadio: '',
    selected: '',
    selectData: &#91;'小美', '可愛小妞', '漂亮阿姨'],
    selected2: '',
    multiSelected: &#91;],
    sex: '男生',

    // 修飾符
    lazyMsg: '',
    age: '',
    trimMsg: ''
  },
});
&lt;/script&gt;</code></pre>



<p>補充：可透過 shift 或 cmd&nbsp;來多選 Windows&nbsp;則是&nbsp;shift&nbsp;或 ctrl</p>



<h3>v-on 的頁面操作細節</h3>



<h5>事件修飾符</h5>



<ul><li>.stop – 調用 event.stopPropagation()，停止由內而外。</li><li>.prevent – 調用 event.preventDefault()，停止事件的默認動作。</li><li>.capture – 添加事件偵聽器時使用 capture 模式，由內而外改成由外而內。</li><li>.self – 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調，只會觸發自己這個元素。</li><li>.once – 指觸發一次回調，事件只觸發一次。</li></ul>



<h5>按鍵修飾符</h5>



<ul><li>.{keyCode | keyAlias} – 只當事件是從特定鍵觸發時才觸發回調。</li><li>別名修飾 – .enter, .tab, .delete, .esc, .space, .up, .down, .left, .right</li><li>修飾符來實現僅在按下相應按鍵時才觸發鼠標或按鍵事件的監聽器 – .ctrl, .alt, .shift, .meta</li></ul>



<p>template/v_on.html</p>



<pre class="wp-block-code"><code>&lt;div id="app"&gt;
  &lt;p&gt;請切換下方 box 的 className&lt;/p&gt;
  &lt;div class="box" :class="{'rotate': isRotate }"&gt;&lt;/div&gt;
  &lt;hr&gt;
  &lt;button class="btn btn-outline-primary" @click="changeRotate"&gt;切換 box 樣式&lt;/button&gt;
  &lt;hr&gt;
  &lt;h4&gt;帶入參數&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li v-for="item in arrayData" class="my-2"&gt;
      {{ item.name }} 有 {{ item.cash }} 元 
      &lt;button class="btn btn-sm btn-outline-primary" @click="storeMoney(item)"&gt;儲值&lt;/button&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;h4&gt;修飾符&lt;/h4&gt;
  &lt;h5&gt;事件修飾符&lt;/h5&gt;
  &lt;ul&gt;
    &lt;li&gt;.stop - 調用 event.stopPropagation()。&lt;/li&gt;
    &lt;li&gt;.prevent - 調用 event.preventDefault()。&lt;/li&gt;
    &lt;li&gt;.capture - 添加事件偵聽器時使用 capture 模式。&lt;/li&gt;
    &lt;li&gt;.self - 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調。&lt;/li&gt;
    &lt;li&gt;.once - 只觸發一次回調。&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h6&gt;將此範例加上 stopPropagation&lt;/h6&gt;
  &lt;div class="p-3 bg-primary" @click.stop="trigger('div')"&gt;
    &lt;span class="box" @click.stop="trigger('box')"&gt;&lt;/span&gt;
  &lt;/div&gt;

  &lt;h6 class="mt-3"&gt;事件偵聽器時使用 capture 模式&lt;/h6&gt;
  &lt;div class="p-3 bg-primary" @click.capture="trigger('div')"&gt;
    &lt;span class="box d-flex align-items-center justify-content-center" @click.capture="trigger('box')"&gt;
      &lt;button class="btn btn-outline-secondary" @click.capture="trigger('button')"&gt;按我&lt;/button&gt;
    &lt;/span&gt;
  &lt;/div&gt;

  &lt;h6 class="mt-3"&gt;事件偵聽器時使用 self 模式&lt;/h6&gt;
  &lt;div class="p-3 bg-primary" @click.self="trigger('div')"&gt;
    &lt;span class="box d-flex align-items-center justify-content-center" @click.self="trigger('box')"&gt;
      &lt;button class="btn btn-outline-secondary" @click.self="trigger('button')"&gt;按我&lt;/button&gt;
    &lt;/span&gt;
  &lt;/div&gt;

  &lt;h6 class="mt-3"&gt;事件偵聽器只觸發一次&lt;/h6&gt;
  &lt;div class="p-3 bg-primary" @click.once="trigger('div')"&gt;
    &lt;span class="box d-flex align-items-center justify-content-center" @click.once="trigger('box')"&gt;
      &lt;button class="btn btn-outline-secondary" @click.once="trigger('button')"&gt;按我&lt;/button&gt;
    &lt;/span&gt;
  &lt;/div&gt;

  &lt;h5&gt;按鍵修飾符&lt;/h5&gt;
  &lt;ul&gt;
    &lt;li&gt;.{keyCode | keyAlias} - 只當事件是從特定鍵觸發時才觸發回調。&lt;/li&gt;
    &lt;li&gt;別名修飾 - .enter, .tab, .delete, .esc, .space, .up, .down, .left, .right&lt;/li&gt;
    &lt;li&gt;修飾符來實現僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器 - .ctrl, .alt, .shift, .meta&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h6 class="mt-3"&gt;keyCode&lt;/h6&gt;
  &lt;input type="text" class="form-control" v-model="text" @keyup.13="trigger(13)"&gt;

  &lt;h6 class="mt-3"&gt;別名修飾&lt;/h6&gt;
  &lt;input type="text" class="form-control" v-model="text" @keyup.space="trigger('space')"&gt;

  &lt;h6 class="mt-3"&gt;相應按鍵時才觸發的監聽器&lt;/h6&gt;
  &lt;input type="text" class="form-control" v-model="text" @keyup.shift.enter="trigger('shift + Enter')"&gt;
  &lt;h5&gt;滑鼠修飾符&lt;/h5&gt;
  &lt;ul&gt;
    &lt;li&gt;.left - (2.2.0) 只當點擊鼠標左鍵時觸發。&lt;/li&gt;
    &lt;li&gt;.right - (2.2.0) 只當點擊鼠標右鍵時觸發。&lt;/li&gt;
    &lt;li&gt;.middle - (2.2.0) 只當點擊鼠標中鍵時觸發。&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h6 class="mt-3"&gt;滑鼠修飾符&lt;/h6&gt;
  &lt;div class="p-3 bg-primary"&gt;
    &lt;span class="box" @click.right="trigger('Right button')"&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var app = new Vue({
  el: '#app',
  data: {
    arrayData: &#91;
      {
        name: '小明',
        age: 16,
        cash: 500
      },
      {
        name: '漂亮阿姨',
        age: 24,
        cash: 1000
      },
      {
        name: '杰倫',
        age: 20,
        cash: 5000
      }
    ],
    isRotate: false,
    text: ''
  },
  methods: {
    changeRotate: function() {
      this.isRotate = !this.isRotate;
    },
    storeMoney: function(item) {
      item.cash = item.cash + 500;
    },
    trigger: function(name) {
      console.log(name, '此事件被觸發了')
    }
  }
  // 解答
});
&lt;/script&gt;

&lt;style&gt;
.box {
  display: block;
  transition: all .5s;
}
.box.rotate {
  transform: rotate(45deg)
}
&lt;/style&gt;</code></pre>



<h3>Template 章節作業說明</h3>



<h5>作業練習：表格排序</h5>



<p>模板練習作業：透過點擊 th 方式，反轉表格的排序<br><br>僅需要排序價格、到期日。</p>



<h5>提示：</h5>



<ol><li>將資料排序改為使用 computed 輸出</li><li>使用迴圈的方式，重新依據點擊排序內容，並透過 computed 輸出</li><li>反轉時，th 指標需給與正確方向</li><li>加分題：第二次點擊時再次反轉資料</li></ol>



<h3>章節作業模板</h3>



<p>如果課程中沒有看到章節作業模板<br>煩請重新下載<a rel="noreferrer noopener" href="https://github.com/hexschool/vue-exercise/tree/gh-pages" target="_blank">課程範例</a></p>



<p>template/homework_sortby.html</p>



<pre class="wp-block-code"><code>&lt;div id="app" class="app"&gt;
  &lt;table class="table"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;品名&lt;/th&gt;
        &lt;th class="click" :class="{'active': link == 'linkPrice'}"
        @click="sortActive = 'price'; isReverse = !isReverse; link='linkPrice'"&gt;價格 
          &lt;!-- isReverse 為反轉 className --&gt;
          &lt;span class="icon isReverse" :class="{'inverse': isReverse}"
            v-if="sortActive === 'price'"&gt;
            &lt;i class="fas fa-angle-up text-success"&gt;&lt;/i&gt;
          &lt;/span&gt;
        &lt;/th&gt;
        &lt;th class="click" :class="{'active': link == 'linkExpiryDate'}"
        @click="sortActive = 'expiryDate'; isReverse = !isReverse; link='linkExpiryDate'"&gt;到期日 
          &lt;span class="icon isReverse" :class="{'inverse': isReverse}"
            v-if="sortActive === 'expiryDate'"&gt;
            &lt;i class="fas fa-angle-up text-success"&gt;&lt;/i&gt;
          &lt;/span&gt;
        &lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr v-for="(item, key) in sortArray" :key="item.name"  v-if="link == ''"&gt;
        &lt;td&gt;{{ item.name }}&lt;/td&gt;
        &lt;td&gt;{{ item.price }}&lt;/td&gt;
        &lt;td&gt;{{ item.expiryDate }}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr v-for="(item, key) in sortArray" :key="item.name"  v-if="link == 'linkPrice'"&gt;
        &lt;td&gt;{{ item.name }}&lt;/td&gt;
        &lt;td&gt;{{ item.price }}&lt;/td&gt;
        &lt;td&gt;{{ item.expiryDate }}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr v-for="(item, key) in sortArray" :key="item.name"  v-if="link == 'linkExpiryDate'"&gt;
        &lt;td&gt;{{ item.name }}&lt;/td&gt;
        &lt;td&gt;{{ item.price }}&lt;/td&gt;
        &lt;td&gt;{{ item.expiryDate }}&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;script&gt;
// 參考語法
// // 使用 Sort 排序資料
// data = data.sort(function (a, b) {
//   // 抓出排序資料的值
//   a = a&#91;欄位]
//   b = b&#91;欄位]

//   // 回傳 1, 0, -1 來進行排列
//   // 詳細規則可參考 https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
//   return (a === b ? 0 : a &gt; b ? 1 : -1) * 正反排序數值
// })

var app = new Vue({
  el: '#app',
  data: {
    productData: &#91;
      {
        name: '巧呼呼蘇打水',
        price: 30,
        expiryDate: 90
      },
      {
        name: '心驚膽跳羊肉飯',
        price: 65,
        expiryDate: 2
      },
      {
        name: '郭師傅武功麵包',
        price: 32,
        expiryDate: 1
      },
      {
        name: '不太會過期的新鮮牛奶',
        price: 75,
        expiryDate: 600
      },
      {
        name: '金殺 巧粒粒',
        price: 120,
        expiryDate: 200
      }
    ],
    isReverse: true,
    sortActive: '',
    link: ''
  },
  // 請在此撰寫 JavaScript
  computed: {
    sortArray: function() {
      var vm = this;
      // var sortItem = vm.sortActive;
      // 使用 sort 排序資料
      vm.productData = this.productData.sort(function(a, b) {
        // 抓出排序資料的值
        a = a&#91;vm.sortActive];
        b = b&#91;vm.sortActive];
        // 條件(三元)運算式
        // return a &lt; b ? -1 : a &gt; b ? 1 : 0;
        // 相當於
        if(a&lt;b) { return -1; }
        else if (a&gt;b) { return 1; }
        else { return 0; }
      });
      if(vm.isReverse) {
        return vm.productData;
      } else {
        return vm.productData.reverse();
      }
    }
  }
});
&lt;/script&gt;

&lt;style&gt;
.app {
  max-width: 1140px;
  margin: 10px auto;
}

.table th.click {
  cursor: pointer;
}

.table th.click:hover {
  color: #00ffa2;
}

.icon {
  display: inline-block;
}

.icon.inverse {
  transform: rotate(180deg)
}

.active {
  color: #28a745;
}
&lt;/style&gt;</code></pre>



<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noreferrer noopener">Array.prototype.sort()</a>、<a rel="noreferrer noopener" href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank">條件運算子</a></p>



<pre class="wp-block-code"><code>// 比較函式會是以下形式：
function compare(a, b) {
  if (在某排序標準下 a 小於 b) {
    return -1;
  }
  if (在某排序標準下 a 大於 b) {
    return 1;
  }
  // a 必須等於 b
  return 0;
}</code></pre>



<h2>第５節：Vue 的生命週期</h2>



<h3>實際運行範例 (實例生命週期鉤子)</h3>



<p>了解生命週期，對於熟悉 Vue.js 有很大的幫助。</p>



<h5>延伸介紹 – Vue 生命週期</h5>



<ol><li>觀察生命週期</li><li>加上 keep-alive 讓元件資料狀態不被移除</li></ol>



<p>basic/v_lifecycle.html</p>



<pre class="wp-block-code"><code>&lt;div id="app" class="text-center"&gt;
  &lt;h3&gt;Let's check out the lifecycle of this hur' child.&lt;/h3&gt;
  &lt;h4&gt;Check the console!&lt;/h4&gt;
  &lt;button @click="toggleShow" class="btn btn-primary"&gt;
    &lt;span v-if="isShowing"&gt;Hide child&lt;/span&gt;
    &lt;span v-else&gt;Show child&lt;/span&gt;
  &lt;/button&gt;
  &lt;hr&gt;
  &lt;keep-alive&gt;
    &lt;app-child v-if="isShowing"&gt;&lt;/app-child&gt;
  &lt;/keep-alive&gt;
&lt;/div&gt;

&lt;script type="text/x-template" id="childarea"&gt;
  &lt;div&gt;
    &lt;h4&gt;Hello! {{ text }}&lt;/h4&gt;
    &lt;input type="text" class="form-control" v-model="text"&gt;
  &lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;
//*** 重要 ***///
const Child = {
  template: '#childarea',
  data: function () {
    return {
      text: 'Vue data 資料狀態'
    }
  },
  beforeCreate() {
    console.log(`beforeCreate! ${this.text}`);
  }, 
  created() {
    alert(`created! ${this.text}`);
  }, 
  beforeMount() {
    alert(`beforeMount! ${this.text}`);
  }, 
  mounted() {
    alert(`mounted! ${this.text}`);
  },
  updated () {
    console.log(`updated! ${this.text}`);
  },
  activated () {
    alert(`activated! ${this.text}`);
  },
  deactivated () {
    alert(`deactivated! ${this.text}`);
  },
  beforeDestroy() {
    console.log(`beforeDestroy! ${this.text}`);
  }, 
  destroyed() {
    console.log(`destroyed! ${this.text}`);
  }
};

new Vue({
  el: '#app',
  data() {
    return {
      isShowing: false 
    }
  },
  methods: {
    toggleShow() {
      this.isShowing = !this.isShowing;
    }
  },
  components: {
    appChild: Child
  }
});
&lt;/script&gt;</code></pre>



<p><a rel="noreferrer noopener" href="https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks" target="_blank">Instance Lifecycle Hooks</a>、<a href="https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noreferrer noopener">實例生命週期鉤子</a></p>



<h3>Vue 生命週期的簡報說明</h3>



<figure class="wp-block-image size-full"><img loading="lazy" width="1782" height="952" src="/wordpress_blog/wp-content/uploads/2022/04/vuelifecycle.png" alt="" class="wp-image-664"/><figcaption>Vue 生命週期的簡報說明</figcaption></figure>



<h5>章節重點說明</h5>



<ol><li>如果要使用 AJAX 至少要到 CREATED 才能用</li><li>想要維持資料狀態，可以使用 &lt;keep-alive&gt;</li></ol>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>掌握 Git 與 GitHub 版本控制</title>
		<link>/wordpress_blog/git-github-hexschool/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Wed, 13 Jan 2021 03:18:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=648</guid>

					<description><![CDATA[學到 掌握 Git 版本控制工作流程 瞭解使用 Git / Gi [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h4>學到</h4>



<ul><li>掌握 Git 版本控制工作流程</li><li>瞭解使用 Git / Github 管理程式碼</li><li>瞭解如何創建分支，並與多位工程師團隊協作</li></ul>



<h2>第１節：環境安裝篇</h2>



<h3>01.Git 環境安裝</h3>



<p>資源</p>



<ul><li><a rel="noreferrer noopener" href="https://git-scm.com/" target="_blank">Git 官網</a></li><li><a href="https://iterm2.com/" target="_blank" rel="noreferrer noopener">Mac 推薦終端機 iTerm2</a></li></ul>



<h4>安裝 Git、找尋適合的命令提示字元</h4>



<p>Windows 使用 Git Bash 去練習。<br>Mac 使用終端機去練習。</p>



<h4>查詢是否安裝成功</h4>



<pre class="wp-block-code"><code>// Git Bash
// 指令 - git version
$ git version
git version 2.28.0.windows.1</code></pre>



<h3>02.Windows – 命令提示字元教學(上)</h3>



<h4>使用 Git Bash 練習。</h4>



<p>常用語法</p>



<ol><li>移動路徑：cd 路徑</li><li>回上一層：cd ..</li><li>展開列表：ls</li><li>開新資料夾：mkdir 資料夾名稱</li><li>開新檔案：touch 檔案名稱</li></ol>



<p>使用滑鼠拖曳檔案，移動到檔案位置。</p>



<pre class="wp-block-code"><code>$ cd 滑鼠拖曳檔案</code></pre>



<h3>03.Windows – 命令提示字元教學(下)</h3>



<p>承上，常用語法 4、5</p>



<pre class="wp-block-code"><code>// 新增資料夾
$ mkdir css
// 移動到 css 資料夾
$ cd css
// 新增檔案
$ touch style.css</code></pre>



<h3>04.基本 command 指令</h3>



<p>備註：開新檔案與展開列表在 git bash 上都可以執行，但是在 windows 預設的命令提示字元沒辦法使用，所以還是都是使用 git bash 來進行操作。</p>



<p>全部課程只會學五個小指令，內容如下：</p>



<ol><li>移動路徑：cd 路徑</li><li>回上一層：cd ..</li><li>展開列表：ls</li><li>開新資料夾：mkdir 資料夾名稱</li><li>開新檔案：touch 檔案名稱</li></ol>



<p>PS：cd ..，是兩個..，不是一個.。</p>



<h3>05.MAC 終端機高亮</h3>



<p><a rel="noreferrer noopener" href="https://ohmyz.sh/" target="_blank">Oh My Zsh</a>&nbsp;–&nbsp;<a href="https://gist.github.com/kevin-smets/8568070" target="_blank" rel="noreferrer noopener">相關操作教學連結</a></p>



<h3>06.MAC – 命令提示字元教學 (上)</h3>



<ul><li>移動路徑：cd 路徑</li><li>回上一層：cd ..</li><li>展開列表：ls</li></ul>



<h3>07.MAC – 命令提示字元教學 (下)</h3>



<ul><li>開新資料夾：mkdir 資料夾名稱</li><li>開新檔案：touch 檔案名稱</li></ul>



<h3>08.Git 環境設定</h3>



<pre class="wp-block-code"><code>git config --list

git config --global user.email "你的email"
git config --global user.name "你的名字"</code></pre>



<h2>第２節：Git 基礎操作篇</h2>



<h3>09.前言提要</h3>



<p>git 教學大綱圖</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="956" height="594" src="/wordpress_blog/wp-content/uploads/2022/04/git教學大綱圖.png" alt="" class="wp-image-650"/><figcaption>Git 教學大綱圖</figcaption></figure>



<h3>10.git init – 安裝數據庫</h3>



<h4>在本地端開啟數據庫</h4>



<ol><li>新增一個資料夾 project</li><li>移動到資料夾位置 cd project</li><li>輸入指令：git init</li><li>如何判斷已經開啟數據庫<ul><li>Git Bash 命令提示字元檔案位置出現 master</li><li>資料夾內隱藏的項目出現 .git 檔案資料夾</li></ul></li></ol>



<pre class="wp-block-code"><code>// 1.新增一個資料夾 project
// 2.cd project
// 3.輸入指令：git init
// 4.出現master、隱藏的 .git 檔案</code></pre>



<h3>11.工作目錄、加入索引、提交版本流程介紹</h3>



<p>工作目錄 add→ 索引 commit→ 本地數據庫<br>working directory add→ staging area commit→ Local Repository</p>



<h4>Github 講解</h4>



<p>17 commits 可以想像說更新了17次的資料上去。<br><br>commits 可以記錄更新的時間、註解更新內容的標題，變動的檔案有幾個，以及程式碼新增、刪減的地方。<br><br>commit – 提交<br>提交：git commit</p>



<h3>12.基礎指令教學流程</h3>



<ol><li>建立新的資料夾 project</li><li>新增新的數據庫 git init<ul><li>Git Bash 命令提示字元檔案位置出現 master</li></ul></li><li>新增檔案<ul><li>touch index.html</li><li>touch a.txt</li></ul></li><li>新增一個資料夾 mkdir css</li><li>移動到 css 資料夾位置 cd css</li><li>新增一個檔案 touch all.css</li><li>回到上一層 cd ..</li><li>全部檔案加到索引 git add .</li><li>檢查狀態 git status<ul><li>等待提交</li></ul></li><li>再新增檔案 b.txt</li><li>檢查狀態 git status<ul><li>等待提交</li><li>未追蹤</li></ul></li><li>單一檔案加到索引 git add b.txt</li><li>檢查狀態 git status<ul><li>等待提交</li></ul></li><li>提交更新 git commit -m ‘update1’</li><li>檢查狀態 git status<ul><li>無需提交，工作目錄是乾淨的</li></ul></li><li>修改 index.html 檔案內容</li><li>檢查狀態 git status<ul><li>已更改</li></ul></li><li>新增檔案 touch index2.html</li><li>檢查狀態 git status<ul><li>已更改</li><li>未追蹤</li></ul></li><li>全部加到索引 git add .</li><li>檢查狀態 git status<ul><li>等待提交</li></ul></li><li>提交更新 git commit -m ‘update index’</li><li>檢查狀態 git status<ul><li>無需提交，工作目錄是乾淨的</li></ul></li><li>查詢紀錄 git log</li></ol>



<p>PS：Mac iterm2 案 q 回到原本畫面。</p>



<h4>基礎指令</h4>



<ol><li>加到索引：git add .</li><li>檢查狀態：git status</li><li>提交更新：git commit -m ‘修改紀錄’</li><li>查詢紀錄：git log</li></ol>



<h3>13.gitignore – 忽略檔案</h3>



<h4>使用 .gitignore 來忽略檔案</h4>



<ol><li>index.html：忽略單一檔案</li><li>*.html：忽略全部 HTML 檔案</li><li>folder/：忽略 folder</li></ol>



<h5>檔案 .gitignore</h5>



<pre class="wp-block-code"><code>index.html
*.html
css/</code></pre>



<h4>操作流程</h4>



<ol><li>移動到檔案位置 cd 拖曳滑鼠檔案</li><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>新增檔案 touch .gitignore</li><li>檢查狀態 git status</li><li>忽略檔案，在.gitignore 輸入 index.html</li><li>檢查檔案 git status</li><li>新增檔案 touch index2.html</li><li>檢查檔案 git status</li><li>忽略全部檔案，在 .gitignore 輸入 *.html</li><li>檢查檔案 git status</li><li>新增 css 資料夾</li><li>移動到資料夾位置 cd css</li><li>新增檔案 touch all.css</li><li>回上一層 cd ..</li><li>忽略資料夾，在 .gitignore 輸入 css/</li><li>檢查狀態 git status</li></ol>



<p>資源：<a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer noopener">gitignore 大全</a></p>



<h3>14.工作狀態還原技巧分享</h3>



<h4>#取消索引</h4>



<p>全部檔案取消索引<br>git reset HEAD<br><br>單一檔案取消索引<br>git reset HEAD 檔案名稱</p>



<h4>#還原檔案</h4>



<p>恢復單一檔案到最新 commit 狀態<br>git checkout 檔案名稱<br><br>還原工作目錄與索引，會跟最後一次 commit 保持一樣<br>git reset –hard</p>



<h4>操作流程 – 取消索引</h4>



<ol><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>加到索引 git add .</li><li>提交更新 git commit -m ‘update’</li><li>查詢紀錄 git log</li><li>新增檔案 touch all.css</li><li>新增檔案 touch all.js</li><li>檢查狀態 git status</li><li>加到索引 git add .</li><li>檢查狀態 git status</li><li>全部檔案取消索引 git reset HEAD</li><li>檢查狀態 git status</li><li>加到索引 git add .</li><li>單一檔案取消索引 git reset HEAD all.css</li><li>檢查狀態 git status</li></ol>



<h4>操作流程 – 還原檔案</h4>



<ol><li>檔案程式碼修改，寫壞了</li><li>檢查狀態 git status</li><li>恢復單一檔案到最新 commit 狀態 git checkout index.html</li><li>加到索引 git add .</li><li>還原工作目錄與索引，會跟最後一次 commit 保持一樣 git reset –hard</li><li>檢查狀態 git status</li><li>查詢紀錄 git log</li></ol>



<h3>15.指令大全</h3>



<p>這裡條列出本課程裡有教到的指令，都是實務上比較常用的部分。<br>更多指令：<a rel="noreferrer noopener" href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank">一峰</a>、<a rel="noreferrer noopener" href="https://backlog.com/git-tutorial/tw/reference/" target="_blank">猴子git</a>的指令庫。</p>



<h4>基礎設定</h4>



<p>查詢版本<br>git version<br><br>查詢設定列表<br>git config –list<br><br>輸入姓名<br>git config –global user.name “你的名字”<br><br>輸入email<br>git config –global user.email “你的email”</p>



<h4>新增本地/複製遠端數據庫</h4>



<p>在本地資料夾新增數據庫<br>git init<br><br>複製遠端數據庫<br>git clone 遠端數據庫網址</p>



<h4>增加/刪除檔案</h4>



<p>增加檔案進入索引<br>git add 檔案名稱<br><br>增加全部檔案進入索引<br>git add .<br><br>查詢狀態<br>git status<br><br>顯示歷史紀錄<br>git log<br><br>將索引提交到數據庫<br>git commit -m ‘更新訊息’</p>



<h4>還原指令</h4>



<p>還原工作目錄與索引，會跟最後一次 commit 保持一樣<br>git reset –hard<br><br>全部檔案取消索引<br>git reset HEAD<br><br>單一檔案取消索引<br>git reset HEAD 檔案名稱<br><br>恢復單一檔案到最新 commit 狀態<br>git checkout 檔案名稱<br><br>刪除最近一次 commit<br>git reset –hard HEAD^<br><br>上面語法如果刪除錯了可以再用此語法還原<br>git reset –hard ORIG_HEAD<br><br>刪除最近一次 commit，但保留異動內容<br>git reset –soft HEAD^<br><br>commit 後發現有幾個檔案忘了加入進去<br>git commit –amend</p>



<h4>分支</h4>



<p>顯示所有本地分支<br>git branch<br><br>新增分支<br>git branch 分支名稱<br><br>切換分支<br>git checkout 分支名稱<br><br>合併指定分支到目前的分支<br>git merge 分支名稱<br><br>刪除分支<br>git branch -d 分支名稱</p>



<h4>遠端數據庫操作</h4>



<p>複製遠端數據庫<br>git clone 遠端數據庫網址<br><br>查詢遠端數據庫<br>git remote<br><br>將本地分支推送到遠端分支<br>git push 遠端數據庫名稱 遠端分支名稱<br><br>將遠端分支拉下來與本地分支進行合併<br>git pull</p>



<h4>標籤</h4>



<p>查詢標籤<br>git tag<br><br>查詢詳細標籤<br>git tag -n<br><br>刪除標籤<br>git tag -d 標籤名稱<br><br>新增輕量標籤<br>git tag 標籤名稱<br><br>新增標示標籤<br>git tag -am ‘備註內容’ 標籤名稱</p>



<h4>暫存</h4>



<p>暫時儲存當前目錄<br>git stash<br><br>瀏覽 stash 列表<br>git stash list<br><br>還原暫存<br>git stash pop<br><br>清除最新暫存<br>git stash drop<br><br>清除全部暫存<br>git stash clear</p>



<p><a href="https://geehsu.github.io/git-github/" target="_blank" rel="noreferrer noopener">Git &amp; Github 指令</a></p>



<h2>第３節：Github</h2>



<h3>16.Github 註冊流程</h3>



<p><a rel="noreferrer noopener" href="https://github.com/" target="_blank">GitHub 官網</a></p>



<p>Github – 遠端數據庫</p>



<h3>17.git push – 推送數據庫到 Github</h3>



<h4>講解流程</h4>



<ol><li>在 Github 新增一個遠端數據庫</li><li>複製遠端數據庫到自己的電腦上面</li><li>修改完之後</li><li>推送更新遠端數據庫</li></ol>



<p>遠端數據庫 複製→ 本地數據庫，<br>本地數據庫 更新→ 遠端數據庫。<br><br>Remote Repository clone/fetch→ Local Repository,<br>Local Repository push→ Remote Repository.</p>



<h4>操作流程</h4>



<ol><li>在 Github 新增一個遠端數據庫</li><li>複製 HTTPS URL</li><li>新增資料夾 mkdir github</li><li>移動到資料夾位置 cd github</li><li>複製檔案下來 git clone URL</li><li>移動到資料夾位置 cd gittest2</li><li>新增檔案 touch index.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update index’</li><li>推送更新 git push</li><li>新增檔案 touch index2.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update index2’</li><li>推送更新 git push</li></ol>



<h3>18.從 Github 找出實用插件流程</h3>



<p>Github 首頁搜尋關鍵字，舉例：slider。<br>如何辨別插件的實用，依分類選項：最相關、最多星數、更新時間（約半年左右），來決定是否使用。<br>通常來說，插件會有說明如何使用。</p>



<p>Github 會記錄各種 Git 狀態，有多少個分支、幾個提交、多少個問題，來評估插件的更新頻率、使用的熱門度高不高。</p>



<h4>其他的遠端數據庫</h4>



<p><a rel="noreferrer noopener" href="https://bitbucket.org/product/" target="_blank">Bitbucket</a></p>



<p>PS：Bitbucket 有提供小團隊 (5人以下) 服務是免費的。<br>PS：Github 私人數據庫服務現在改成免費的。</p>



<h2>第４節：Git 分支 (branch)</h2>



<h3>19.分支簡介</h3>



<p>參考文章：<a rel="noreferrer noopener" href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank">範例分支圖</a>、<a href="https://git-tutorial.readthedocs.io/zh/latest/branchingmodel.html" target="_blank" rel="noreferrer noopener">Gitflow 分支策略</a></p>



<h4>分支大致上分為兩種：</h4>



<ol><li>主要的分支：master(主要)、develop(開發)</li><li>支援的分支：feature(功能)、release(發佈)、hotfix(熱修復)</li></ol>



<h3>20.HEAD – 瞭解目前所在位置</h3>



<p>HEAD：目前所在位置的指標。</p>



<ul><li>查看目前有哪些分支 git branch</li><li>回到以前指定版本狀態，查看過去的內容 git checkout 前4碼</li><li>還原到最新版本 git checkout master</li></ul>



<h4>操作流程</h4>



<ol><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update’</li><li>瀏覽目前分支 git branch</li><li>修改檔案內容 index.html</li><li>檢查狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update index content’</li><li>查詢紀錄 git log</li><li>回到以前指定版本狀態 git checkout 38b0</li><li>還原到最新版本 git checkout master</li></ol>



<h3>21.git branch – 分支創立</h3>



<h4>新增分支操作流程</h4>



<ol><li>新增分支 git branch feature1</li><li>查詢分支 git branch<ul><li>* 代表 HEAD 目前所在位置</li></ul></li><li>切換分支 git checkout feature1</li><li>查詢分支 git branch<ul><li>* 在 feature1 的位置</li></ul></li><li>修改檔案 index.html</li><li>查詢狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘edit index content’</li><li>切換分支 git checkout master</li><li>查詢分支 git branch<ul><li>* 在 master 的位置</li></ul></li><li>切換分支 git checkout feature1</li><li>查詢分支 git branch<ul><li>* 在 feature1 的位置</li></ul></li></ol>



<p>練習：使用切換分支切換到 master 和 feature1，看他們的差異。</p>



<h3>22.git merge – fast-forward</h3>



<h4>合併分支操作流程</h4>



<ol><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add index’</li><li>修改檔案 index.html</li><li>檢查狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update index’</li><li>新增分支 git branch feature1</li><li>查詢分支 git branch</li><li>切換分支 git checkout feature1</li><li>修改檔案 index.html 匯入 CSS</li><li>新增資料夾 mkdir css</li><li>移動到資料夾位置 cd css</li><li>新增檔案 touch all.css</li><li>回上一層 cd ..</li><li>檢查狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add css’</li><li>切換分支 git checkout master</li><li><strong>合併分支</strong>&nbsp;<strong>git merge feature1</strong></li></ol>



<h3>23.Mac 自動合併細節提醒</h3>



<p>在下一篇會需要使用到編輯器來寫 merge 的更新訊息，<br>在未指定編輯器的情況下，會出現 vim 的編輯器，此時已會預設<br>帶好 commit 的內容，只要依序輸入以下文字：<br>:wq!<br>就可離開</p>



<h3>24.git merge – 自動合併篇</h3>



<h4>同時更新 – 無衝突版本</h4>



<h5>操作流程</h5>



<ol><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>新增 index.html 環境、內容</li><li>查詢狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add index’</li><li>新增分支 git branch feature1</li><li>切換分支 git checkout feature1</li><li>修改檔案 index.html 匯入 CSS</li><li>檢查狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update index’</li><li>切換分支 git checkout master</li><li>修改檔案 index.html</li><li>檢查狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘edit h1’</li><li>合併分支 git merge feature1</li><li>跳出合併訊息 MERGE_MSG</li><li>確認合併訊息沒問題後，關掉就合併完成</li></ol>



<h3>25.git merge – 解決衝突篇</h3>



<h4>同時更新 – 有衝突版本</h4>



<h5>操作流程</h5>



<ol><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>建立 index.html 環境</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add index’</li><li>新增分支 git branch feature1</li><li>查詢分支 git branch</li><li>切換分支 git checkout feature1</li><li>修改 index.html 匯入 CSS、新增h1標籤feature1</li><li>檢查狀態 git status</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add css and feature1’</li><li>切換分支 git checkout master</li><li>修改 index.html 新增h1標籤master</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add h1 master’</li><li>合併分支 git merge feature1</li><li>衝突、自動合併失敗</li><li>評估與其他成員程式碼有衝突該如何解決<ul><li>部分保留、部分刪除</li><li>全部保留</li><li>全部刪除</li></ul></li><li>這裡是選擇全部保留</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘merge feature1 css and h1’</li></ol>



<p>發現不能自動合併時，就需要做手動合併的動作。</p>



<h3>26.git tag – 標籤</h3>



<ol><li>查詢標籤：git tag</li><li>查詢詳細標籤：git tag -n</li><li>刪除標籤：git tag -d 標籤名稱</li><li>新增輕量標籤：git tag 標籤名稱</li><li>新增標示標籤：git tag -am “備註內容” 標籤名稱</li><li>切換到標籤的 commit：git checkout 標籤名稱</li></ol>



<h4>操作流程</h4>



<ol><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update index’</li><li>查詢紀錄 git log</li><li>建立 index.html 環境、新增h1標籤內容</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘edit index’</li><li>查詢標籤 git tag (無，因為還沒新增標籤)</li><li>新增輕量標籤 git tag v1</li><li>查詢標籤 git tag</li><li>修改檔案 index.html 新增p段落內容</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update p’</li><li>查詢紀錄 git log</li><li>查詢標籤 git tag</li><li>切換到標籤的提交 git checkout v1</li><li>切換分支 git checkout master</li><li>新增檔案 touch contact.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘update contact’</li><li>新增標示標籤 git tag -am ‘v2 add contact’ v2</li><li>查詢標籤 git tag</li><li>查詢詳細標籤 git tag -n</li></ol>



<h3>27.git stash – 暫存檔案</h3>



<ol><li>git stash – 暫時儲存當前目錄</li><li>git stash list – 瀏覽 git stash 列表</li><li>git stash pop – 還原暫存</li><li>git stash drop – 清除最新暫存</li><li>git stash clear – 清除全部暫存</li></ol>



<h4>操作流程</h4>



<ol><li>新增資料夾 mkdir project</li><li>移動到資料夾位置 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>建立 index.html 環境、新增h1標籤內容</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add index’</li><li>新增分支 git branch issue</li><li>修改檔案 index.html 新增p標籤段落內容</li><li>檢查狀態 git status</li><li>突發指派工作內容，暫時儲存當前目錄 git stash</li><li>檢查狀態 git status</li><li>查詢暫存檔案列表 git stash list</li><li>切換分支 git checkout issue</li><li>修改 issue 問題完成後</li><li>還原暫存 git stash pop</li><li>查詢暫存檔案列表 git stash list</li><li>暫時儲存當前目錄 git stash</li><li>切換分支 git checkout master</li><li>還原暫存 git stash pop</li></ol>



<h2>第５節：Git、Github 團隊協作篇</h2>



<h3>28.git remote – 遠端數據庫</h3>



<h4>如何推送分支到遠端數據庫</h4>



<ol><li>git remote – 查詢遠端數據庫主機名稱</li><li>git remote rename 原名稱 修改名稱 – 修改遠端數據庫主機名稱</li><li>git push origin master – 推送分支更新到指定遠端數據庫主機<ul><li>origin：預設遠端主機名稱</li><li>master：分支名稱</li></ul></li></ol>



<h5>操作流程</h5>



<ol><li>在 Github 新增一個 New repository (新的遠端數據庫)</li><li>Repository name (數據庫名稱) gitremote</li><li>Create repository (建立數據庫)</li><li>複製 HTTPS URL</li><li>新增資料夾 mkdir github</li><li>移動到資料夾位置 cd github</li><li>複製遠端數據庫 git clone URL</li><li>移動到資料夾位置 cd gitremote</li><li>新增檔案 touch index.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add index’</li><li>推送更新 git push</li><li>新增分支 git branch issue</li><li>切換分支 git checkout issue</li><li>新增檔案 touch issue.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add issue’</li><li>推送更新失敗 git push</li><li>查詢遠端數據庫 git remote</li><li>推送分支更新到指定遠端數據庫主機 git push origin issue</li><li>查詢遠端數據庫 git remote</li><li>修改遠端數據庫名稱 git remote rename origin github</li><li>查詢遠端數據庫 git remote</li><li>新增檔案 touch contact.html</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add contact’</li><li>推送更新失敗 git push origin issue</li><li>推送分支更新到指定遠端數據庫主機 git push github issue</li></ol>



<h3>29.git pull – 下載遠端數據庫</h3>



<p>從遠端數據庫下載更新 (pull) 到自己的工作目錄。</p>



<h4>模擬操作流程</h4>



<p>自己、Github、同事A，<br>在與其他成員團隊合作時會有哪些狀況？</p>



<ol><li>在 Github 新增一個 New Repository (新的遠端數據庫)</li><li>Repository name (數據庫名稱) gitpull</li><li>Create Repository (建立數據庫)</li><li>複製 HTTPS URL</li><li>新增兩個資料夾，分別是 my、a</li><li>我：移動到資料夾位置 cd my</li><li>我：複製遠端數據庫 git clone URL</li><li>我：移動到資料夾位置 cd gitpull</li><li>同事A：移動到資料夾位置 cd a</li><li>同事A：複製遠端數據庫 git clone URL</li><li>我：我先建立環境 touch index.html</li><li>我：全部加到索引 git add .</li><li>我：提交更新 git commit -m ‘add index’</li><li>我：推送分支更新到指定遠端數據庫主機 git push origin master</li><li>同事A：移動到資料夾位置 cd gitpull</li><li>同事A：查詢紀錄 git log</li><li>同事A：從遠端數據庫下載更新 (pull) 到工作目錄 git pull</li><li>同事A：查詢紀錄 git log</li><li>同事A：新增檔案 touch contact.html</li><li>同事A：全部加到索引 git add .</li><li>同事A：提交更新 git commit -m ‘add contact’</li><li>同事A：推送分支更新到指定遠端數據庫主機 git push origin master</li><li>我：查詢紀錄 git log</li><li>我：從遠端數據庫下載更新 (pull) 到工作目錄 git pull</li><li>我：查詢紀錄 git log</li></ol>



<h3>30.git pull – 衝突篇</h3>



<h4>pull – 無法 push 案例</h4>



<p>自己、Github、同事A<br>在與其他成員團隊合作時，別人更新後，產生無法 push 的狀況。<br>需要先 pull，才可以 push。</p>



<h5>模擬操作流程</h5>



<ol><li>在 Github 新增一個 New Repository (新的遠端數據庫)</li><li>Repository name (數據庫名稱) gitconflicts</li><li>Create Repository (建立數據庫)</li><li>複製 HTTPS URL</li><li>新增兩個資料夾，分別為 my、a</li><li>我：移動到資料夾位置 cd my</li><li>我：複製遠端數據庫 git clone URL</li><li>我：移動到資料夾位置 cd gitconflicts</li><li>同事A：移動到資料夾位置 cd a</li><li>同事A：複製遠端數據庫 git clone URL</li><li>同事A：移動到資料夾位置 cd gitconflicts</li><li>我：我先建立環境 touch index.html</li><li>我：全部加到索引 git add .</li><li>我：提交更新 git commit -m ‘add index’</li><li>我：推送分支更新到指定遠端數據庫主機 git push origin master</li><li>同事A：從遠端數據庫下載更新 (pull) 到工作目錄 git pull</li><li>我：在下班後，寫了一些東西。</li><li>我：新增檔案 touch contact.html</li><li>我：全部加到索引 git add .</li><li>我：提交更新 git commit -m ‘add contact’</li><li>我：推送分支更新到指定遠端數據庫主機 git push origin master</li><li>同事A：新增檔案 touch about.html</li><li>同事A：全部加到索引 git add .</li><li>同事A：提交更新 git commit -m ‘add about’</li><li>同事A：出現錯誤－推送分支更新到指定遠端數據庫主機 git push origin master</li><li>同事A：從遠端數據庫下載更新 (pull) 到工作目錄 git pull</li><li>同事A：跳出合併訊息 MERGE_MSG</li><li>同事A：推送分支更新到指定遠端數據庫主機 git push origin master</li><li>我：經由同事告知有更新後</li><li>我：從遠端數據庫下載更新 (pull) 到工作目錄 git pull</li></ol>



<p>PS：MERGE_MSG 輸入 :wq! 就可離開。</p>



<h3>31.Github Pages – 存放網頁空間流程</h3>



<p>利用 github pages 更新網頁。</p>



<h4>操作流程</h4>



<ol><li>在 Github 新增一個 New Repository (新的遠端數據庫)</li><li>Repository name (數據庫名稱) demonsite</li><li>Create Repository (建立數據庫)</li><li>複製 HTTPS URL</li><li>新增資料夾 mkdir github</li><li>移動到資料夾位置 cd github</li><li>複製遠端數據庫 git clone URL</li><li>移動到資料夾位置 cd demonsite</li><li>新增檔案 touch index.html</li><li>建立 index.html 環境、新增h1標籤內容</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add index and h1’</li><li>推送分支更新到指定遠端數據庫主機 git push origin master</li><li>重新整理 Github 網頁</li><li>在 Github 網頁上有個 Settings 裡面有個 GitHub Pages，把 Source 改成 master branch 然後 Save (儲存)</li><li>GitHub Pages 區塊出現 Your site is ready to be published at URL</li><li>修改檔案 新增清單內容</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘edit list’</li><li>推送分支更新到指定遠端數據庫主機 git push origin master</li><li>重新整理 Github 網頁後，看 commits 改了哪些東西</li><li>重新整理 GitHub Pages 網頁後，更新了網頁內容。</li></ol>



<h3>32.小型團隊分支協作篇</h3>



<p>參考文章：<a rel="noreferrer noopener" href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank">範例分支圖</a></p>



<h4>團隊協作範例圖</h4>



<figure class="wp-block-image size-full"><img loading="lazy" width="828" height="706" src="/wordpress_blog/wp-content/uploads/2022/04/團隊協作範例圖.png" alt="" class="wp-image-652"/><figcaption>團隊協作範例圖</figcaption></figure>



<h5>操作流程</h5>



<ol><li>新增資料夾 mkdir github</li><li>移動到資料夾 cd github</li><li>新增資料夾 mkdir project</li><li>移動到資料夾 cd project</li><li>新增新的數據庫 git init</li><li>新增檔案 touch index.html</li><li>建立 index.html 環境</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add index’</li><li>新增分支 git branch develop</li><li>查詢分支 git branch</li><li>切換分支 git checkout develop</li><li>新增分支 git branch feature/view</li><li>切換分支 git checkout feature/view</li><li>新增檔案 touch all.css</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add css’</li><li>切換分支 git checkout develop</li><li>合併分支 git merge feature/view</li><li>新增分支 git branch feature/js</li><li>切換分支 git checkout feature/js</li><li>新增檔案 touch all.js</li><li>全部加到索引 git add .</li><li>提交更新 git commit -m ‘add js’</li><li>切換分支 git checkout develop</li><li>合併分支 git merge feature/js</li><li>切換分支 git checkout master</li><li>合併分支 git merge develop</li></ol>



<h5>Learn Git Branching</h5>



<figure class="wp-block-image size-full"><img loading="lazy" width="1153" height="787" src="/wordpress_blog/wp-content/uploads/2022/04/learn-git-branch-1.png" alt="" class="wp-image-654"/><figcaption>Learn Git Branching</figcaption></figure>



<pre class="wp-block-code"><code>$ git branch develop
$ git checkout develop
$ git branch f/view
$ git checkout f/view
$ git commit
$ git checkout develop
$ git merge f/view --no-ff
$ git branch f/js
$ git checkout f/js
$ git commit
$ git checkout develop
$ git merge f/js --no-ff
$ git checkout main
$ git merge develop --no-ff</code></pre>



<h5>合併指定分支到目前的分支 – 取消快轉</h5>



<pre class="wp-block-code"><code>git merge 分支名稱 --no-ff</code></pre>



<h3>33.git pull = git fetch + git merge</h3>



<p>相信各位同學練習完 pull 時，可以知道他就是將遠端的分支將<br>你的本地分支進行合併 merge 的動作，<br>但有時候你不希望 pull 下來導致自己的數據庫太亂又擔心有衝突時，可以先使用下面這個指令。</p>



<pre class="wp-block-code"><code>git fetch origin(遠端數據庫主機名稱) branch1(遠端分支)</code></pre>



<p>此時你的分支會多一個 FETCH_HEAD 的分支，這個就是遠端數據庫的分支，可以等到你看過沒問題後，<br>再合併 FETCH_HEAD 也 ok。</p>



<h3>34.延伸教學資源</h3>



<ul><li><a rel="noreferrer noopener" href="https://backlog.com/git-tutorial/tw/" target="_blank">連猴子都能懂得 Git 入門指南</a></li><li><a rel="noreferrer noopener" href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/README.md" target="_blank">保哥 30 天 Git 教學</a></li><li><a rel="noreferrer noopener" href="https://git-scm.com/book/zh-tw/v2" target="_blank">Git 官方繁體教學</a></li><li><a rel="noreferrer noopener" href="https://w3c.hexschool.com/git/cfdbd310" target="_blank">Git &amp; GitHub 教學手冊</a></li><li><a href="https://learngitbranching.js.org/" target="_blank" rel="noreferrer noopener">Learn Git Branching</a></li></ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>JavaScript 入門篇 &#8211; 學徒的試煉</title>
		<link>/wordpress_blog/javascript-beginner/</link>
		
		<dc:creator><![CDATA[gee.hsu]]></dc:creator>
		<pubDate>Wed, 09 Dec 2020 03:11:00 +0000</pubDate>
				<category><![CDATA[六角學院]]></category>
		<guid isPermaLink="false">/wordpress_blog/?p=643</guid>

					<description><![CDATA[JavaScript 的前世今生 JavaScript 環境設定 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2>JavaScript 的前世今生</h2>



<h4>JavaScript 環境設定 (編輯器、jsbin、console)</h4>



<p>編輯器功能</p>



<ol><li>自動補全</li><li>下拉提示</li></ol>



<pre class="wp-block-code"><code>// document - 選取這個網頁上的內容
// . - 去使用裡面相關 JavaScript 的功能
document.getElementById('footer');</code></pre>



<p>編輯器 – 使用 Visual Studio Code</p>



<h4>建構第一個 JS 環境</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;1234&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>alert("Hello world!!");</code></pre>



<h4>HTML、CSS、JavaScript 的關聯性</h4>



<ul><li>HTML – 內容</li><li>CSS – 樣式</li><li>JS – 行為</li></ul>



<h4>ID 寫法、textcontent</h4>



<p>index.html</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
    &lt;style&gt;
        h1{color: red;}
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    // emmet ul&gt;li*3&gt;a{標題$}
    // 錨點
    &lt;ul&gt;
        &lt;li&gt;&lt;a href="#title1"&gt;標題1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#title2"&gt;標題2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#title3"&gt;標題3&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="page.html#title3"&gt;標題4&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h1 id="title1"&gt;標題一&lt;/h1&gt;
    &lt;p&gt;lorem300&lt;/p&gt;
    &lt;h1 id="title2"&gt;標題二&lt;/h1&gt;
    &lt;p&gt;lorem300&lt;/p&gt;
    &lt;h1 id="title3"&gt;標題三&lt;/h1&gt;
    &lt;p&gt;lorem&lt;/p&gt;

    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>page.html</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
    &lt;style&gt;
        h1{color: red;}
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    // emmet ul&gt;li*3&gt;a{標題$}
    &lt;ul&gt;
        &lt;li&gt;&lt;a href="#title1"&gt;標題1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#title2"&gt;標題2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#title3"&gt;標題3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h1 id="title1"&gt;標題一&lt;/h1&gt;
    &lt;p&gt;lorem300&lt;/p&gt;
    &lt;h1 id="title2"&gt;標題二&lt;/h1&gt;
    &lt;p&gt;lorem300&lt;/p&gt;
    &lt;h1 id="title3"&gt;標題三&lt;/h1&gt;
    &lt;p&gt;lorem&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>document.getElementById('title1').textContent = '修改後的標題';</code></pre>



<pre class="wp-block-code"><code>// document - 目前你網頁上的主體
// .getElementById - 透過這樣的方式去指定裡面 id 的內容
// 指定裡面 id 的內容使用''或""的方式去讀取裡面的內容
// .textContent - JavaScript 其中一個語法
// 修改裡面的值 = ''或""來變成修改後的內容</code></pre>



<pre class="wp-block-code"><code>&lt;script src="js/all.js"&gt;&lt;/script&gt;，因為瀏覽器渲染內容由上到下，因此要放在&lt;/body&gt;的前面。</code></pre>



<p>練習</p>



<ol><li>錨點功能</li><li>利用上面所教的語法去修改 h1 裡面的內容</li></ol>



<h4>直譯器流程介紹</h4>



<p>interpreter (解譯器) – 引擎<br>每個瀏覽器都有每個瀏覽器的 JavaScript 的引擎。<br>Chrome 的引擎 – V8</p>



<p>DOM (Document Object Model)<br>文件物件模型 – 提供了一個文件(樹)的結構化表示法，並定義讓程式可以存取並改變文件架構、風格和內容的方法。<br><br><a href="https://www.w3schools.com/js/js_htmldom.asp" target="_blank" rel="noreferrer noopener">JavaScript HTML DOM</a></p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;

    &lt;style&gt;
        h1{color: red;}
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href="#title1"&gt;標題1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#title2"&gt;標題2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#title3"&gt;標題3&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="page.html#title3"&gt;標題4&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h1 id="title1"&gt;標題一&lt;/h1&gt;
    &lt;p&gt;lorem300&lt;/p&gt;
    &lt;h1 id="title2"&gt;標題二&lt;/h1&gt;
    &lt;p&gt;lorem300&lt;/p&gt;
    &lt;h1 id="title3"&gt;標題三&lt;/h1&gt;
    &lt;p&gt;lorem300&lt;/p&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
    &lt;h1&gt;js後的標題&lt;/h1&gt;
    &lt;p&gt;1234&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>alert('qq');</code></pre>



<p>預期會先彈跳 all.js 的功能，h1、p是不會被渲染到的。</p>



<p>開發人員工具 – Console</p>



<h2>變數</h2>



<h4>變數簡介</h4>



<p>變數 – 常見資料型別</p>



<figure class="wp-block-table"><table><tbody><tr><td>數字</td><td>字串</td><td>布林</td></tr><tr><td>35</td><td>“Hello world!!”</td><td>true、false</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// 數字
翻口袋 10，
35 -10 = 25
紅豆餅:35
你身上的錢:10
差多少:25

// 字串
我的名字叫做 小杰

對方在腦袋裡記住了 「我的名字」

很高興認識你，小杰

// 布林

true、false

餓或不餓
</code></pre>



<h4>變數 number 介紹</h4>



<pre class="wp-block-code"><code>// 變數寫法
// var - 宣告變數
// price - 變數名稱
// = - 指定內容
var price = 30;</code></pre>



<p>all.js</p>



<pre class="wp-block-code"><code>var cookiePrice = 35;
alert(cookiePrice);
cookiePrice = 25;
alert(cookiePrice);</code></pre>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;這一顆紅豆餅&lt;em id="price"&gt;&lt;/em&gt;元&lt;/p&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var cookiePrice = 35;
document.getElementById('price').textContent = cookiePrice;</code></pre>



<h4>變數 string 介紹</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="gift"&gt;
        &lt;img src="images/gift.png" width="150" height="150" alt="gift"&gt;
        &lt;p&gt;&lt;em id="myName"&gt;&lt;/em&gt;：&lt;/p&gt;
        &lt;h2&gt;祝你生日快樂&lt;/h2&gt;
        &lt;p class="sendName"&gt;小花&lt;/p&gt;
    &lt;/div&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
.gift{
    width: 300px;
    height: 300px;
    color: #fff;
    font-size: 18px;
    text-align: center;
    background: #14cc99;
    margin: 30px auto;
    border-radius: 5px;
    padding: 10px;
}
.gift p{
    text-align: left;
    padding: 0;
    margin: 10px 0;
}
.gift h2{
    font-size: 36px;
    margin: 20px 0;
    padding: 0;
}
.gift .sendName{
    text-align: right;
    font-size: 12px;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var polite = "Hello ";
var indexName = "小杰";
var totalPolite = polite + indexName;

document.getElementById('myName').textContent = totalPolite;</code></pre>



<h4>如何輸出內容？</h4>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var score = 90;
console.log(score);</code></pre>



<h4>變數規則</h4>



<p>變數 注意事項</p>



<ul><li>開頭不能用數字</li><li>不能用 – 跟 .</li><li>不能使用<a rel="noreferrer noopener" href="https://www.w3schools.com/js/js_reserved.asp" target="_blank">關鍵字</a></li><li>大小寫有分</li><li>變數需有語意化 (建議)</li></ul>



<h4>變數 – 數字新增刪除修改</h4>



<pre class="wp-block-code"><code>// 每一個內容都是半形，全形會出錯。

var cookiePrice = 35;
var myMoney = 15;
var total = cookiePrice - myMoney;

document.getElementById('cookiePriceId').textContent = cookiePrice;
document.getElementById('myMoneyId').textContent = myMoney;
document.getElementById('totalId').textContent = total;</code></pre>



<h4>undefined 介紹</h4>



<p>已經賦予出來一個變數名稱，但是變數名稱內容是空值。</p>



<p>Chrome – Console</p>



<pre class="wp-block-code"><code>&gt; var box = 20;
&lt; undefined

// var box;
// box = 20;</code></pre>



<h2>函式</h2>



<h4>為什麼需要 function？</h4>



<pre class="wp-block-code"><code>// 情境 - 顧客點餐
// 服務生：歡迎光臨，請問您要點什麼？漢堡剩下最後 8 個哦！
// 　顧客：不用薯條，給我 8 個漢堡，再一杯可樂吧！
// 服務生：好的，總計是 420 元</code></pre>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="wrap"&gt;
        &lt;div class="wrap-inner"&gt;
            &lt;h1&gt;六角西餐廳 - 顧客點餐篇&lt;/h1&gt;
            &lt;p&gt;服務生：&lt;span id="greetId"&gt;&lt;/span&gt;&lt;/p&gt;
            &lt;p&gt;　顧客：不用薯條，給我&lt;em class="tag"&gt;8&lt;/em&gt;個漢堡，再&lt;em class="tag"&gt;1&lt;/em&gt;杯可樂吧！&lt;/p&gt;
            &lt;p&gt;服務生：好的，總計是&lt;em id="totalId" class="tag"&gt;&lt;/em&gt;元&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 打招呼
function greet(){
  var greetNote = '歡迎光臨，請問您要點什麼？漢堡剩下最後 8 個哦！'
  
  document.getElementById('greetId').textContent = greetNote;
  console.log(greetNote);
}
greet();

// 點餐回應
function order(hamNum,cokeNum){
  var total = (hamNum * 50) + (cokeNum * 20);
  document.getElementById('totalId').textContent = total;
  console.log(total);
}
order(8,1);
</code></pre>



<h4>function 的寫法</h4>



<p>函式寫法</p>



<pre class="wp-block-code"><code>宣告函式 函式名稱
function greet(){
  alert('歡迎光臨！');
  alert('請問你要點些什麼？');
}

// 執行函式
greet();
</code></pre>



<pre class="wp-block-code"><code>var price = 30;

function greet(){
  console.log('Hello');
  console.log('請問您想要點什麼？')
}

greet();</code></pre>



<p>Chrome – Console</p>



<pre class="wp-block-code"><code>window

// 把 greet、price 記錄在 windows 裡面。
// 瀏覽器就可以記錄這個網頁所有的 JavaScript 的狀態。</code></pre>



<h4>function 帶參數</h4>



<pre class="wp-block-code"><code>// 函式帶參數
                參數
function count(oneNum){
  var total = oneNum * 10;
  console.log('總數等於：'+total);
}
count(10);</code></pre>



<p>範例1</p>



<pre class="wp-block-code"><code>function count(oneNum){
  var total = oneNum * 10;
  console.log("總價格："+total+"元");
}

count(8);</code></pre>



<p>範例2-1</p>



<pre class="wp-block-code"><code>function count(oneNum,twoNum){
  var total = oneNum + twoNum;
  console.log("總價格："+total+"元")
}

count(8,2);</code></pre>



<p>範例2-2</p>



<pre class="wp-block-code"><code>function count(oneNum,twoNum){
  var total = oneNum * twoNum;
  console.log("總價格："+total+"元");
}
count(8,49);</code></pre>



<h4>全域與區域變數</h4>



<p>全域變數</p>



<pre class="wp-block-code"><code>// 全域變數
var total;

function count(oneNum,twoNum){
  total = oneNum * twoNum;
  console.log("總價格："+total+"元");
}

count(8,10);

console.log(total);</code></pre>



<p>區域變數 – 執行完就銷毀了</p>



<pre class="wp-block-code"><code>function count(oneNum,twoNum){
  // 區域變數
  var total = oneNum * twoNum;
  console.log(total);
  console.log("總價格："+total+"元")
}

count(8,10);</code></pre>



<h4>hoisting 、 var 觀念</h4>



<p>function 有個 Hoisting(提升) 觀念。</p>



<pre class="wp-block-code"><code>// Hoisting 觀念

console.log(a);
var a = 3;
console.log(a);

count();

function count(){
  console.log('hello!');
}

// 還是習慣把這個 function 放在上面由上到下去做執行</code></pre>



<h4>function 計算機案例 (1)</h4>



<h4>function 計算機案例 (2)</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;顧客點餐篇&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="wrap"&gt;
        &lt;div class="wrap-inner"&gt;
            &lt;h1&gt;六角西餐廳 ─ 顧客點餐篇&lt;/h1&gt;
            &lt;p&gt;服務生：Hello，請問您想要點什麼？&lt;/p&gt;
            &lt;p&gt;　顧客：給我 &lt;input type="text" id="hamNumId"&gt; 個漢堡，再 &lt;input type="text" id="cokeNumId"&gt; 杯可樂吧！&lt;/p&gt;
            &lt;p&gt;服務生：&lt;input type="button" id="countId" value="計算中"&gt;，好的，總計是&lt;em id="totalId" class="tag"&gt;&lt;/em&gt;元&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
html{
    background: #000;
    font-family: MicrosoftJhengHeiRegular;
}
*,*:before,*:after{
    box-sizing: border-box;
}
.wrap{
    background: url(images/desktop.png) 50% 50%;
    max-width: 1049px;
    height: 420px;
    margin: 200px auto;
    padding-top: 50px;
}
.wrap-inner{
    background: rgba(0,0,0,.65);
    margin: 0 auto;
    width: 600px;
    color: #fff;
    padding: 50px;
}
.wrap-inner h1{
    text-align: center;
    font-size: 36px;
    margin-bottom: .5em;
}
.wrap-inner p{
    font-size: 16px;
    line-height: 24px;
}
.wrap-inner .tag{
    color: yellow;
}
.wrap-inner input&#91;type=text]{
    width: 30px;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>document.getElementById('countId').onclick = function(){
    // 事件 - onclick
    // 觸發到事件就會去執行裡面的內容
    var hamNum = document.getElementById('hamNumId').value;
    var cokeNum = document.getElementById('cokeNumId').value;
    alert(hamNum);
    alert(cokeNum);
}</code></pre>



<h4>function 計算機案例 (3)</h4>



<p>typeof() – 用來判斷參數是什麼型別。</p>



<pre class="wp-block-code"><code>Chrome - Console

&gt; typeof(3)
&lt; "number"
&gt; typeof('hello')
&lt; "string"
&gt; typeof(function(){alert('q')})
&lt; "function"
&gt; typeof({tom:'john'})
&lt; "object"</code></pre>



<p>parseInt() – 字串轉成數字。</p>



<pre class="wp-block-code"><code>// Chrome - Console

&gt; var num = "3";
&lt; undefined
&gt; typeof(num)
&lt; "string"
&gt; num = parseInt(num)
&lt; 3
&gt; num
&lt; 3
&gt; typeof(num)
&lt; "number"</code></pre>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;顧客點餐篇&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="wrap"&gt;
        &lt;div class="wrap-inner"&gt;
            &lt;h1&gt;六角西餐廳 ─ 顧客點餐篇&lt;/h1&gt;
            &lt;p&gt;服務生：Hello，請問您想要點什麼？&lt;/p&gt;
            &lt;p&gt;　顧客：給我 &lt;input type="text" id="hamNumId"&gt; 個漢堡，再 &lt;input type="text" id="cokeNumId"&gt; 杯可樂吧！&lt;/p&gt;
            &lt;p&gt;服務生：&lt;input type="button" id="countId" value="計算中"&gt;，好的，總計是&lt;em id="totalId" class="tag"&gt;&lt;/em&gt;元&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
html{
    background: #000;
    font-family: MicrosoftJhengHeiRegular;
}
*,*:before,*:after{
    box-sizing: border-box;
}
.wrap{
    background: url(images/desktop.png) 50% 50%;
    max-width: 1049px;
    height: 420px;
    margin: 200px auto;
    padding-top: 50px;
}
.wrap-inner{
    background: rgba(0,0,0,.65);
    margin: 0 auto;
    width: 600px;
    color: #fff;
    padding: 50px;
}
.wrap-inner h1{
    text-align: center;
    font-size: 36px;
    margin-bottom: .5em;
}
.wrap-inner p{
    font-size: 16px;
    line-height: 24px;
}
.wrap-inner .tag{
    color: yellow;
}
.wrap-inner input&#91;type=text]{
    width: 30px;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>document.getElementById('countId').onclick = function(){
    var hamPrice = 50;
    var cokePrice = 20;
    var hamNum = parseInt(document.getElementById('hamNumId').value)*hamPrice;
    var cokeNum = parseInt(document.getElementById('cokeNumId').value)*cokePrice;
    document.getElementById('totalId').textContent = hamNum + cokeNum;
    console.log(hamNum+cokeNum);
}</code></pre>



<h4>function 搭配 return 寫法</h4>



<pre class="wp-block-code"><code>// 計算漢堡的總價

function getHamPrice(num){
  var hamPrice = 50;
  var total = hamPrice * num;
  return total;
}

var tom = getHamPrice(10);
console.log(tom);</code></pre>



<h2>陣列與物件</h2>



<p>陣列(Array)、物件(Object)</p>



<h4>為什麼需要陣列？</h4>



<p>更有效率的或者是更好維護的方式，來去紀錄有各個的東西。</p>



<h4>陣列簡報介紹</h4>



<p>農莊現在想協助地方的農夫做統計，希望卡斯柏的農場使用<strong>陣列、物件</strong>的格式。</p>



<pre class="wp-block-code"><code>// 農夫
var farmer = '卡斯柏';
// 有幾個玉米
var cornField = 8;
// 多個玉米田各有幾個玉米
var cornField = &#91;8,5,6];
// 狗的名字分別是
var dogs = &#91;'張姆士', '龐的'];</code></pre>



<pre class="wp-block-code"><code>// 農場
var farmer = '卡斯柏';
var dogs = &#91;'張姆士', '龐的']
var chick = 15;
var cornField = &#91;8, 5, 6];
var broccoliField = &#91;6,6,6,6];
var scarecrow = 9;</code></pre>



<h4>陣列寫法教學</h4>



<pre class="wp-block-code"><code>var cornField = &#91;8, 5, 6]
// 陣列第一個是0。

var cornField1 = cornField&#91;0];

console.log(cornField1);</code></pre>



<pre class="wp-block-code"><code>var cornField = &#91;];
cornField.push(5);
cornField.push(8);
cornField.push(6);

cornField&#91;0] = 10;

cornField&#91;3] = 100;

// 陣列裡面的值有幾個
console.log('我總共有'+cornField.length+'個玉米田');

console.log(cornField);</code></pre>



<h4>物件簡報介紹</h4>



<pre class="wp-block-code"><code>var farm = {
  // 屬性 (property): 值 (value)
  farmer: '卡斯柏',
  dogs: &#91;'張姆士', '龐的'],
  chick: 15,
  cornField: &#91;8, 5, 6],
  broccoliField: &#91;6, 6, 6, 6],
  scarecrow: 9
}</code></pre>



<h4>物件寫法教學</h4>



<pre class="wp-block-code"><code>var farm = {
  farmer: '卡斯柏',
  chick: 15,
  dog: &#91;'張姆士','龐的']
};

farm.chick = 30;

var dog1 = farm.dog&#91;0];

// 顯示農場的物件
console.log(farm);
// 顯示農場的小雞有幾隻
console.log(farm.chick);
// 第一隻狗的名字
console.log('我農場裡的第一隻狗叫'+dog1);</code></pre>



<pre class="wp-block-code"><code>var house ={
  room: 3,
  father: 'tom',
  son: &#91;'john','bob'],
  mom: 'mary'
}
// 第一個兒子
console.log(house.son&#91;0]);</code></pre>



<h4>物件+function 運用技巧</h4>



<p>物件可以放字串、數字、布林值還有可以放 function。</p>



<pre class="wp-block-code"><code>var farm = {
  farmer: '卡斯柏',
  chick: 15,
  duck: 3,
  dog: &#91;'張姆士','龐的'],
  goDinner: function(){
    console.log(farm.farmer+'，該回家吃晚飯);
  },
  poultryTotal: function(){
    var num = farm.chick + farm.duck;
    console.log('我的農場總共有'+num+'隻家禽');
  }
};

farm.goDinner();
farm.poultryTotal();</code></pre>



<p>串接API、後端資料庫，會傳遞資料格式(JSON)到其他伺服器或服務。</p>



<h4>物件+陣列設計流程</h4>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏'
  },
  {
    farmer: '小杰'
  }
]
console.log(farms&#91;1].farmer);</code></pre>



<pre class="wp-block-code"><code>// 物件和陣列的讀取方式
var farms = &#91;{
  farmer: '卡斯柏',
  dogs: &#91;'張姆士', '龐的'],
  chick: 15,
  cornField: &#91;8, 5, 6],
  broccoliField: &#91;6, 6, 6, 6],
  scarecrow: 9
}, {
  farmer: '查理',
  dogs: &#91;'皮皮'],
  chick: 30,
  cornField: &#91;18, 12],
  borccoliField: &#91;8, 8, 8],
  scarecrow: 6
}];

// 第二個農場的狗，皮皮的資料
console.log(farms&#91;1].dogs&#91;0]);</code></pre>



<h2>控制判斷(運算子、if、switch)</h2>



<h4>以日常生活為例探討為何需要控制判斷</h4>



<p>if – 讓程式幫你下判斷<br><br>– 人類具有判斷的能力，我們在饑餓的時候會去找東西吃。<br><br>條件 | 執行<br>飽足→什麼也不做<br>飢餓→進食</p>



<pre class="wp-block-code"><code>if (hungry &lt;= 3) {
  eat('披薩');
} else if (hungry &lt; 7 &amp;&amp; hungry &gt; 3) {
  eat('沙拉');
}</code></pre>



<h4>比較運算子：==、!==</h4>



<figure class="wp-block-table"><table><tbody><tr><td>等於</td><td>不等於</td><td>布林</td></tr><tr><td>==</td><td>!==</td><td>true、false</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// Google Console
// = ，賦予一個值
// ==，比較的時候
&gt; var myAge = 18;
&lt; undefined
&gt; var bAge = 18;
&lt; undefined
&gt; myAge == bAge
&lt; true</code></pre>



<h4>比較運算子：==、!==，程式碼範例</h4>



<pre class="wp-block-code"><code>var myMonth = 5;
var thisMonth = 10;
var birthdayCheck = myMonth == thisMonth;
console.log(birthdayCheck);
document.getElementById('birthdayId').textContent = birthdayCheck;

var nowPeople = 1;
var totalPeople = 2;
var allPeopleNoHereCheck = totalPeople !== nowPeople;
console.log(allPeopleNoHereCheck);
document.getElementById('peopleId').textContent = allPeopleNoHereCheck;
</code></pre>



<h4>比較運算子：嚴謹模式 ===</h4>



<p>判斷型別之後再去判斷內容的正確性，使用 === 。</p>



<pre class="wp-block-code"><code>// Chrome Console
&gt; 1 == 1
&lt; true
&gt; 1 == "1"
&lt; true
&gt; 1 === "1"
&lt; false
&gt; '1' === '1'
&lt; true
&gt; true == 1
&lt; true
&gt; false == 0
&lt; true</code></pre>



<h4>比較運算子：!= 與 !== 的差異</h4>



<p>前面章節為確保資料嚴謹性，使用 == 和 !== 一同說明</p>



<p>為避免同學誤解，這邊增加說明 != 與 !== 的差異。</p>



<p>!= 是不等於，而 !== 是嚴謹模式的不等於，差別與前面章節提到的 == 和 === 是相同依據。</p>



<p>!= 在運算元不相等時返回 true</p>



<p>!== 則在運算元不相等或類型不相同時返回 true</p>



<p>舉例：</p>



<pre class="wp-block-code"><code>3 != '3' // false
3 !== '3' // true</code></pre>



<h4>比較運算子：&gt;、&lt;</h4>



<figure class="wp-block-table"><table><tbody><tr><td>大於</td><td>小於</td></tr><tr><td>&gt;</td><td>&lt;</td></tr><tr><td>大於等於</td><td>小於等於</td></tr><tr><td>&gt;=</td><td>&lt;=</td></tr></tbody></table></figure>



<pre class="wp-block-code"><code>// Chrome Console
&gt; 80 &gt; 10
&lt; true
&gt; 80 &lt; 10
&lt; false
&gt; 80 &gt;= 79
&lt; true
&gt; 80 &gt;= 80
&lt; true
&gt; 80 &gt; 80
&lt; false</code></pre>



<pre class="wp-block-code"><code>// Chrome Console
&gt; 1250 &gt; 1000
&lt; true
&gt; var myCost = 1250
&lt; undefined
&gt; myCost &gt; 1000
&lt; true</code></pre>



<h4>邏輯運算子：&amp;&amp;、||、!</h4>



<figure class="wp-block-table"><table><tbody><tr><td>And</td><td>OR</td><td>NOT</td></tr><tr><td>&amp;&amp;</td><td>||</td><td>!</td></tr></tbody></table></figure>



<p>And<br>我：你好，我要辦銀行帳戶<br>銀行專員：請問你有帶「身分證」、「印章」嗎？<br>我：我只有帶到身分證可以辦嗎？<br>銀行專員：不好意思，一定得兩個都帶才有辦法辦哦</p>



<p>OR<br>服務員：請問你機天的帳單有滿一千元，或是 VIP 嗎？有送禮！<br>我：我不是VIP，但剛好我有滿 1000 元耶！</p>



<pre class="wp-block-code"><code>var isID = true;
var isIN = false;
isID == true;
true
isID == true &amp;&amp; isIn == true
false</code></pre>



<pre class="wp-block-code"><code>&gt; var isID = true;
&gt; var isIn = true;
&gt; isID == true &amp;&amp; isIn == true;
&lt; true
&gt; var isID = true;
&gt; var isIn = true;
&gt; var isPaper = true;
&gt; isID == true &amp;&amp; isIn == true &amp;&amp; isPaper == true;
&lt; true</code></pre>



<p>範例</p>



<pre class="wp-block-code"><code>&gt; var billFull = 1200;
&gt; var isVIP = false;
&gt; billFull &gt; 1000 || isVIP == true;
&lt; true
&gt; isVIP == true
&lt; false
&gt; billFull &gt; 1000
&lt; true</code></pre>



<p>範例</p>



<pre class="wp-block-code"><code>&gt; 2&gt;3
&lt; false
&gt; !(2&gt;3)
&lt; true</code></pre>



<h4>邏輯運算子：範例程式碼</h4>



<p>六角西餐廳 – 贈品篇</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;顧客點餐篇&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="wrap"&gt;
        &lt;div class="wrap-inner"&gt;
            &lt;h1&gt;六角西餐廳 ─ 贈品篇&lt;/h1&gt;
            &lt;p&gt;服務生：請問你是 VIP 嗎？帳單有滿千嗎？兩者達到可送贈品哦。&lt;/p&gt;
            &lt;p&gt;　顧客：&lt;em class="tag" id="andId"&gt;&lt;/em&gt;&lt;/p&gt;
            &lt;p&gt;服務生：抱歉我記錯了，只要一個有達到就送贈品囉，你有嗎？&lt;/p&gt;
            &lt;p&gt;　顧客：&lt;em class="tag" id="orId"&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var myBill = 1250;
var VIP = false;
var andCheck = myBill &gt; 1000 &amp;&amp; VIP == true;
// alert(andCheck);
var orCheck = myBill &gt; 1000 || VIP == true;
// alert(orCheck);

document.getElementById('andId').textContent = andCheck;
document.getElementById('orId').textContent = orCheck;</code></pre>



<h4>if – 簡報介紹</h4>



<p><strong>控制判斷</strong><br>if, else if, switch</p>



<pre class="wp-block-code"><code>// 以吃飯為範例
if(hungry == '飢餓'){ →判斷式
  eat(); →陳述式
 }

if(hungry == '飢餓')
hungry = '飽足' → false
hungry = '飢餓' → true → 進食 / eat();</code></pre>



<h4>if – 程式碼教學</h4>



<pre class="wp-block-code"><code>var hungry == '飽足';
// console.log(hungry == '飢餓');
if(hungry == '飢餓'){
  console.log('我現在好餓');
}else{
  console.log('我現在一點都不想吃東西');
  console.log('我們走吧！');
}</code></pre>



<h4>else if 簡報介紹</h4>



<p>以飽足感為例</p>



<pre class="wp-block-code"><code>很飽
不餓，但想吃東西 → 吃沙拉
餓到不行 → 吃披薩
var hungry = 8; // 1~10 的數值

if (hungry &lt;= 3) {
  eat('披薩');
} else if (hungry &lt; 7 &amp;&amp; hungry &gt; 3) {
  eat('沙拉');
}
// 飢餓度，小於等於 3 時吃披薩
// 介於 4 ~ 7 之間吃沙拉

hungry = 8; 什麼都不做
hungry = 5; 吃沙拉
hungry = 1; 吃披薩</code></pre>



<h4>else if – 程式碼教學</h4>



<pre class="wp-block-code"><code>var hungry = 8;
// 飢餓程度 1~10
// hungry 改成 3 時會要吃披薩
// hungry 改成 5 時會要吃沙拉
// hungry 改成 6 時會要吃餅乾
// hungry 改成 9 時我超飽不想吃東西

function eat(food){
  console.log('我現在要吃'+food);
}
// console.log(hungry &lt;= 3);
if(hungry &lt;= 3){
  eat('披薩');
}else if(hungry &lt;= 5 &amp;&amp; hungry &gt;3){
  eat('沙拉');
}else if(hungry == 6){
  eat('餅乾');
}else{
  console.log('我超飽不想吃東西');
}</code></pre>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;顧客點餐篇&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="wrap"&gt;
        &lt;div class="wrap-inner"&gt;
            &lt;h1&gt;六角西餐廳 ─ 飽足篇&lt;/h1&gt;
            &lt;p&gt;飽足感：&lt;em class="tag" id="hungryId"&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var hungry = 9;
// 飢餓程度 1~10

function eat(food){
    document.getElementById('hungryId').textContent ="我現在要吃"+food;
}
if(hungry &lt;= 3){
    eat('披薩');
}else if(hungry &lt;= 5 &amp;&amp; hungry &gt; 3){
    eat('沙拉');
}else if(hungry==6){
    eat('餅乾');
}else{
    document.getElementById('hungryId').textContent ="我超飽不想吃東西";
}</code></pre>



<h4>switch – 簡報介紹</h4>



<pre class="wp-block-code"><code>// 以喜好為例
var prefer = '拉麵';

function eat(food){
  console.log('我現在要去吃' + food);
}

switch (prefer){
  case '牛排':
    eat('牛排');
    break;
  case '生菜沙拉':
    eat('生菜沙拉');
    break;
  default:
    eat('拉麵');
    break;
}</code></pre>



<pre class="wp-block-code"><code>switch(prefer) → 設立一個表達式 switch() 且包含一個條件。
case '生菜沙拉' → case: 後方會開始比對，如果符合就會執行相關連的程式碼
break → 每個 case:後方皆會補上 break; 來阻止已完成的區塊後方繼續執行。</code></pre>



<h4>switch – 程式碼教學</h4>



<pre class="wp-block-code"><code>// 警戒狀態為例
var light = 'red';

switch(light){
  case 'red':
  alert('紅色警戒');
  alert('快跑！');
  break;

  case 'blue':
  alert('藍色警戒');
  break;

  // 都沒有以上狀況，使用 default
  default:
  alert('沒有任何資料');
  break;
}</code></pre>



<pre class="wp-block-code"><code>var light = 'blue';
function lightFun(str){
    console.log('目前是'+ str +'警戒');
}

switch(light){
    case 'red':
    alert('紅色警戒');
    alert('快跑！');
    break;

    case 'blue':
    lightFun(light);
    break;
    
    // 都沒有以上狀況，使用 default
    default:
    alert('沒有任何資料');
    break;
}</code></pre>



<p>跟 if 的差別是 switch 裡面的程式碼一定會跑。<br><br>default 放前面或後面都可以執行，不像是 if else 一定要放在最後面。</p>



<h2>迴圈</h2>



<h4>為什麼需要學習迴圈？</h4>



<pre class="wp-block-code"><code>var farms = &#91;
  farmer: '卡斯柏',
  dogs: &#91;'張姆士', '龐的'],
  chick: 15,
  cornField: &#91;8, 5, 6],
  broccoliField: &#91;6, 6, 6, 6],
  scarecrow: 9
}, {
  farmer: '查理',
  dogs: &#91;'皮皮'],
  chick: 30,
  cornField: &#91;18, 12],
  broccoliField: &#91;8, 8, 8],
  scarecrow: 6
}];

// 語法
console.log(farms.length); → 取得陣列長度
// 2

console.log(farms&#91;1].farmer); → 取得第 X 個陣列值</code></pre>



<pre class="wp-block-code"><code>for (var i = 0; i &lt; farms.length; i++) {
  console.log('第' + (i + 1) + ' 個農場主人是 ' + farms&#91;i].farmer);
}
// "第 1 個農場主人是 卡斯柏"
// "第 2 個農場主人是 查理"</code></pre>



<h4>for 寫法</h4>



<pre class="wp-block-code"><code>// 初始狀態;條件;更新內容
for (var i = 0; i &lt; 3; i++){
  console.log(i);
}</code></pre>



<pre class="wp-block-code"><code>// 九九乘法表
// 初始狀態;條件;更新內容
for (var i = 1; i &lt; 10; i++){
  console.log(i+'*'+i+'='+ i*i);
  // "1*1=1"
  // "2*2=4"
}</code></pre>



<h4>for-array 寫法</h4>



<p>範例一</p>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    field: 6
  },
  {
    farmer: '查理',
    field: 10
  }
]
var farmsTotal = farms.length;
for(var i=0;i&lt;farmsTotal;i++){
  console.log(farms&#91;i].farmer);
}</code></pre>



<p>範例二</p>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    field: 6
  },
  {
    farmer: '查理',
    field: 10
  }
]
var farmsTotal = farms.length;
for(var i=0;i&lt;farmsTotal;i++){
  console.log('第'+ (i+1) +'個農場主人是'+ farms&#91;i].farmer);
  // 第1個農場主人是卡斯柏
  // 第2個農場主人是查理</code></pre>



<h4>for if 寫法</h4>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    field: 6,
    chick: 200
  },
  {
    farmer: '查理',
    field: 10,
    chick: 50
  },
  {
    farmer: '約翰',
    field: 6,
    chick: 120
  }
]
// 撈出哪些的農場的小雞數量超過 100 隻以上

var farmsTotal = farms.length;

for(var i = 0;i&lt;farmsTotal;i++){
  console.log(farms&#91;i].chick);
  if(farms&#91;i].chick&gt;100){
    console.log(farms&#91;i].farmer+'的小雞超過100隻以上');
  }
}
</code></pre>



<h4>for – i++ 寫法</h4>



<pre class="wp-block-code"><code>// Google Chrome Console
&gt; var i = 0;
&lt; undefined
&gt; console.log(i)
  0
&lt; undefined
&gt; i = i+1
&lt; 1
&gt; i+=1
&lt; 2
&gt; i++
&lt; 2
&gt; i
&lt; 3
&gt;</code></pre>



<pre class="wp-block-code"><code>// 練習
&gt; var total = 501
&lt; undefined
&gt; total++
&lt; 501
&gt; total
&lt; 502
&gt; total+=1
&lt; 503
&gt; total
&lt; 503
&gt;</code></pre>



<p>有三種寫法</p>



<ul><li>i = i+1</li><li>i+=1</li><li>i++</li></ul>



<h4>for – 加總</h4>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    field: 6,
    chick: 200,
    banana: 5000
  },
  {
    farmer: '查理',
    field: 10,
    chick: 50,
    banana: 1000
  },
  {
    farmer: '約翰',
    field: 6,
    chick: 120,
    banana: 3215
  }
]
// 計算今年的香蕉採收總數
var farmsTotal = farms.length;
var bananaTotal = 0;
for(var i = 0;i&lt;farmsTotal;i++){
    bananaTotal+= farms&#91;i].banana;
}

console.log('今年村子的香蕉採收量:'+bananaTotal);</code></pre>



<h4>for 與 break 運用</h4>



<p>break – 中斷<br><br>當滿足中斷條件時，就離開迴圈。</p>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    field: 6,
    chick: 200,
    banana: 5000
  },
  {
    farmer: '查理',
    field: 10,
    chick: 50,
    banana: 1000
  },
  {
    farmer: '約翰',
    field: 6,
    chick: 120,
    banana: 3215
  }
]
// 我要找一個農場，買50隻小雞
var farmsTotal = farms.length;
for(var i = 0;i&lt;farmsTotal;i++){
  if(farms&#91;i].chick&gt;=50){
    console.log(farms&#91;i].farmer+'的農場小雞有50隻以上');
    farms&#91;i].chick -= 50;
    console.log(farms&#91;i].farmer+'的小雞剩下'+farms&#91;i].chick);
    break;
  }
}
console.log(farms&#91;0].chick);</code></pre>



<h4>json 格式介紹</h4>



<p>WIKI –&nbsp;<a rel="noreferrer noopener" href="https://zh.wikipedia.org/wiki/JSON" target="_blank">JSON</a>&nbsp;：資料交換的格式</p>



<p><a href="https://data.kcg.gov.tw/" target="_blank" rel="noreferrer noopener">高雄市政府資料開放</a></p>



<h4>JSON VIEW chrome 插件</h4>



<p><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=zh-TW" target="_blank" rel="noreferrer noopener">下載連結</a></p>



<h4>擷取 JSON 格式流程</h4>



<pre class="wp-block-code"><code>var data = &#91;{},{},{},{},{}]

console.log(data.length);</code></pre>



<h4>for – opendata 範例 (上)</h4>



<p>以宗教為範例</p>



<pre class="wp-block-code"><code>var data = &#91;{},{},{},{},{}];

// 撈出所有高雄市前鎮區的宗教
var total = data.length;
for(i=0;i&lt;total;i++){
  if(data&#91;i].District=='高雄市前鎮區'){
    console.log('宗教類別'+data&#91;i].Religion+'　宗教名字：'+data&#91;i].Name);
  }
}</code></pre>



<pre class="wp-block-code"><code>// 把資料多行轉換成一行

全選資料後，案右鍵點選 Command Palette，輸入 Join Lines</code></pre>



<pre class="wp-block-code"><code>// 資料為中文時
// 以農產交易價格為練習

var data = &#91;{},{},{},{},{}...{}];

var dataTotal = data.length;
for(i=0;i&lt;dataTotal;i++){
    if(data&#91;i]&#91;"作物名稱"]=='酪梨'){
        console.log('交易日期：'+data&#91;i]&#91;"交易日期"]+'市場名稱：'+data&#91;i]&#91;"市場名稱"]+'作物名稱：'+data&#91;i]&#91;"作物名稱"]);
        console.log('上價價格：'+data&#91;i]&#91;"上價"]+'元/公斤'+'中價價格：'+data&#91;i]&#91;"中價"]+'元/公斤'+'下價價格：'+data&#91;i]&#91;"下價"]+'元/公斤'+'平均價格：'+data&#91;i]&#91;"平均價"]+'元/公斤'+'交易數量：'+data&#91;i]&#91;"交易量"]+'公斤');
    }
}
</code></pre>



<h4>OPEN DATA 範例 (下)</h4>



<p>OpenData.epa –&nbsp;<a href="https://opendata.epa.gov.tw/" target="_blank" rel="noreferrer noopener">行政院環境保護署</a></p>



<pre class="wp-block-code"><code>// 以十分鐘雨量為範例

var data = &#91;{},{},{},{},{}...{}];

// 測試資料是否能正常使用
console.log(data.length);

// 查詢10分鐘內哪個地區有下雨
var dataTotal = data.length;
for(var i = 0; i &lt; dataTotal; i++){
  if(data&#91;i].Rainfall10min &gt; 0){
    var County = data&#91;i].County;
    var Township = data&#91;i].Township;
    var Rain = data&#91;i].Rainfall10min;
    console.log(County+Township+':'+Rain);
  }
}

// 3個資料，過濾出想要的資料
// 可以用 codepen、jsbin 線上編譯器練習</code></pre>



<pre class="wp-block-code"><code>// 以農產交易為練習
var data = &#91;{},{},{},{},{}...{}];

var dataTotal = data.length;
for(var i = 0; i &lt; dataTotal; i++){
  if(data&#91;i]&#91;"作物名稱"] == '酪梨'){
    var date = '交易日期:' + data&#91;i]&#91;"交易日期"];
    var name = '作物名稱:' + data&#91;i]&#91;"作物名稱"];
    var place = '市場名稱:' + data&#91;i]&#91;"市場名稱"];
    var num = '交易量:' + data&#91;i]&#91;"交易量"];
    var price = '價格(元/公斤):' + '上價:' + data&#91;i]&#91;"上價"] + '中價:' + data&#91;i]&#91;"中價"] + '下價' + data&#91;i]&#91;"下價"] + '平均價:' + data&#91;i]&#91;平均價];
    var TWprice = '價格(元/斤):' + '上價:' + data&#91;i]&#91;"上價"]*0.6 + '中價：' + data&#91;i]&#91;"中價"]*0.6 + '下價:' + data&#91;i]&#91;"下價]*0.6 +　'平均價:' + data&#91;i]&#91;"平均價"]*0.6;

    console.log(date+name+place+num);
    console.log(price);
    console.log(TWprice);
  }
}</code></pre>



<h2>DOM</h2>



<h4>什麼是 DOM ？</h4>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;MyTitle&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;Header&lt;/h1&gt;
  &lt;a href="#"&gt;MyLink&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>DOM –&nbsp;<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noreferrer noopener">文件物件模型</a></p>



<h4>querySelector – 選擇單一元素</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h1 id="titleId" class="titleClass"&gt;&lt;em&gt;&lt;/em&gt;&lt;/h1&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 語法一
document.getElementById('titleId').textContent = "修改後的標題";
// 語法二
var el = document.getElementById('titleId');
el.textContent = '修改後的標題';</code></pre>



<pre class="wp-block-code"><code>// querySelector

// 選擇 id
var el = document.querySelector('#titleId');
el.textContent = '選擇 id';
// 選擇 class
var el = document.querySelector('.titleClass');
el.textContent = '選擇 class';
// 選擇 class 裡面的 em
var el = document.querySelector('.titleClass em);
el.textContent = '選擇 class';</code></pre>



<p>觀念：一個網頁上只能出現一個 id 名稱，不可以出現兩個。</p>



<h4>querySelectorAll – 可重複選取多個元素</h4>



<p>撈多筆資料可以使用 querySelctorAll。</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h1 class="titleClass"&gt;&lt;em&gt;&lt;/em&gt;&lt;/h1&gt;
&lt;h1 class="titleClass"&gt;&lt;em&gt;&lt;/em&gt;&lt;/h1&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>#strId{
    color: blue;
    font-size: 48px;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelectorAll('.titleClass em');
console.log(el);
// 是一個陣列
el&#91;0].textContent = "第一個內容";
el&#91;1].textContent = "第二個內容";

// 使用 for 迴圈
var elLen = el.length;

for(var i = 0;i&lt;elLen;i++){
  el&#91;i].textContent = 'for迴圈：'+i;
}</code></pre>



<h4>setAttribute – 增加標籤屬性</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h1 class="titleClass"&gt;
  &lt;a href="#"&gt;增加標籤 href 屬性&lt;/a&gt;
&lt;/h1&gt;
&lt;div class="str"&gt;增加標籤 id 屬性&lt;/div&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.titleClass a');
el.setAttribute('href','https://www.google.com.tw/');

var el2 = document.querySelector('.str');
el2.setAttribute('id','strId');

// 取得標籤屬性的值
var el3 = document.querySelector('.titleClass a').getAttribute('href');
console.log(el3);

// 用 textContent 單純撈出裡面文字
var el4 = document.querySelector('.titleClass a').textContent;

// 用 innerHTML 撈出 HTML 的標籤的內容
var el5 = document.querySelector('.titleClass a').innerHTML;

// 用 innerHTML 只撈 titleClass
var el6 = document.querySelector('.titleClass).innerHTML;</code></pre>



<h4>插入 HTML 標籤的兩種方法</h4>



<p>用 JavaScript 操控 HTML 的方法</p>



<h5>innerHTML</h5>



<ul><li>方法：組完字串後，傳進語法進行渲染</li><li>優點：效能快</li><li>缺點：資安風險，要確保來源沒問題</li></ul>



<h5>createElement</h5>



<ul><li>方法：以 DOM 節點來處理</li><li>優點：安全性高</li><li>缺點：效能差</li></ul>



<h4><strong><em>innerHTML 寫法 (上)</em></strong></h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div id="main"&gt;&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>.blue{
  color: blue;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.getElementByIs('main');
el.innerHTML = '&lt;h1 class="blue"&gt;Heading1 標題&lt;/h1&gt;'
// 外面用單引號，裡面用雙引號。</code></pre>



<pre class="wp-block-code"><code>var el = document.getElementById('main');
var str = '&lt;h1 class="blue"&gt;Heading1 標題&lt;/h1&gt;';
el.innerHTML = str+str;</code></pre>



<p>節點 – 各個網頁結構，都是一個節點。<br><br>innerHTML 的特性，會把裡面的值給清空，再去賦予設定的值。</p>



<h4><strong><em>innerHTML 寫法 (下)</em></strong></h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;ul class="list"&gt;&lt;ul&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.list');
var link = 'https://www.google.com.tw/';
var name = '卡斯柏';

el.innerHTML = '&lt;li&gt;&lt;a href="'+link+'"&gt;'+name+'&lt;/a&gt;&lt;/li&gt;';</code></pre>



<h4><strong><em>innerHTML 與 for 運用</em></strong></h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h1&gt;每個農場的農夫名字&lt;/h1&gt;
&lt;ul class="list"&gt;&lt;/ul&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    dogs: &#91;'張姆士','龐的']
  },
  {
    farmer: '查理',
    dogs: &#91;'皮皮']
  }
];

var el = document.querySelector('.list');
var farmLen = farms.length;
// 使用 console.log 來看所寫的程式碼是否正確
console.log(farmLen);
var str = '';
for(var i = 0;i&lt;farmLen;i++){
  var content = '&lt;li&gt;'+ farms&#91;i].farmer +'&lt;/li&gt;';
  str+=content;
  console.log(str);
}
el.innerHTML = str;</code></pre>



<h5>練習一</h5>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h1&gt;每個農場的資料&lt;/h1&gt;
&lt;table class="list"&gt;
&lt;/table&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    dogs: &#91;'張姆士','龐的']
  },
  {
    farmer: '查理',
    dogs: &#91;'皮皮']
  }
];

var el = document.querySelector('.list');
var farmLen = farms.length;

console.log(farmLen);

var str = '';
for(var i=0;i&lt;farmLen;i++){
  var farmer = '&lt;td&gt;'+farms&#91;i].farmer+'&lt;/td&gt;';
  var dogs = '&lt;td&gt;'+farms&#91;i].dogs+'&lt;/td&gt;';
  var farm = '&lt;tr&gt;'+farmer+dogs+'&lt;/tr&gt;';
  str+=farm;
  console.log(str);
}

var title = '&lt;tr&gt;'+'&lt;th&gt;'+'農夫名字'+'&lt;/th&gt;'+'&lt;th&gt;'+'小狗名字'+'&lt;/th&gt;'+'&lt;/tr&gt;';
el.innerHTML = title + str;</code></pre>



<h5>練習二</h5>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="wrap"&gt;
  &lt;div class="container"&gt;
    &lt;h1&gt;市場交易價格&lt;/h1&gt;
    &lt;table class="list"&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS STYLES RESET */
/* CSS STYLES SETTINGS START*/
html{
  font-family: sans-serif;
}
*,*:before,*:after{
  box-sizing: border-box;
}
/* CSS STYLES SETTINGS END */
.wrap{
  max-width: 1440px;
  margin: 0 auto;
  background: #97d077;
  padding: 20px 0;
  color: #111;
}
.wrap h1{
  font-size: 48px;
  text-align: center;
  padding: 30px 0;
}
.wrap h2{
  font-size: 32px;
  padding: 20px 0;
}
.list{
  margin: 0 auto;
  background: #67ab8f;
}
th, td{
  border: 1px solid #fff;
  padding: 10px;
  text-algin: center;
}

@media screen and (max-width: 569px){
  .container{
    overflow-x: auto;
  }
  .list{
    width: 768px;
  }
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var data = &#91;{},{},{},{},{},...{}];

var el = document.querySelector('.list');
var dataLen = data.length;

console.log(dataLen);

var str = '';
var strText = '';

for(var i=0;i&lt;dataLen;i++){
  if(data&#91;i]&#91;"作物名稱"] == '酪梨'){
    var date = data&#91;i]&#91;"交易日期"];
    var name = data&#91;i]&#91;"作物名稱"];
    var place = '&lt;td&gt;+data&#91;i]&#91;"市場名稱"]+'&lt;/td&gt;';
    var num = '&lt;td&gt;'+data&#91;i]&#91;"交易量"]+'&lt;/td&gt;';
    var topPrice = '&lt;td&gt;'+data&#91;i]&#91;"上價"]+'&lt;/td&gt;';
    var midPrice = '&lt;td&gt;'+data&#91;i]&#91;"中價"]+'&lt;/td&gt;';
    var lowerPrice = '&lt;td&gt;'+data&#91;i]&#91;"下價"]+'&lt;/td&gt;';
    var avgPrice = '&lt;td&gt;'+data&#91;i]&#91;"平均價"]+'&lt;/td&gt;';

    var numTW = data&#91;i]&#91;"交易量"]*(5/3);
    var topTWPrice = data&#91;i]&#91;"上價"] * 0.6;
    var midTWPrice = data&#91;i]&#91;"中價"] * 0.6;
    var lowerTWPrice = data&#91;i]&#91;"下價"] * 0.6;
    var avgTWPrice = data&#91;i]&#91;"平均價"] * 0.6;

    numTW = numTW.toFixed(1);
    topTWPrice = topTWPrice.toFixed(1);
    midTWPrice = midTWPrice.toFixed(1);
    lowerTWPrice = lowerTWPrice.toFixed(1);
    avgTWPrice = avgTWPrice.toFixed(1);

    num = '&lt;td&gt;'+data&#91;i]&#91;"交易量"]+' | '+numTW+'&lt;/td&gt;';
    topPrice = '&lt;td&gt;'+data&#91;i]&#91;"上價"]+' | '+topTWPrice+'&lt;/td&gt;';
    midPrice = '&lt;td&gt;'+data&#91;i]&#91;"中價"]+' | '+midTWPrice+'&lt;/td&gt;';
    lowerPrice = '&lt;td&gt;'+data&#91;i]&#91;"下價"]+' | '+lowerTWPrice+'&lt;/td&gt;';
    avgPrice = '&lt;td&gt;'+data&#91;i]&#91;"平均價"]+' | '+avgTWPrice+'&lt;/td&gt;';

    var info = '&lt;tr&gt;'+place+num+topPrice+midPrice+lowerPrice+avgPrice+'&lt;/tr&gt;';
    str+=info;
    var text = '&lt;h2&gt;'+date+'　'＋name+'&lt;/h2&gt;';
  }
}

var title = '&lt;tr&gt;'+'&lt;th width="20%"&gt;'+'市場名稱'+'&lt;/th&gt;'+'&lt;th&gt;'+'交易量&lt;br&gt; (公斤) | (斤)'+'&lt;/th&gt;'+'&lt;th&gt;'+'上價&lt;br&gt;(元/公斤) | (元/斤)'+'&lt;/th&gt;'+'&lt;th&gt;'+'中價&lt;br&gt;(元/公斤) | (元/斤)'+'&lt;/th&gt;'+'&lt;th&gt;'+'下價&lt;br&gt;(元/公斤) | (元/斤)'+'&lt;/th&gt;'+'&lt;th&gt;'+'平均價&lt;br&gt;(元/公斤) | (元/斤)'+'&lt;/th&gt;'+'&lt;/tr&gt;';

el.innerHTML = text+title+str;
</code></pre>



<h4><strong><em>createElement 寫法</em></strong></h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h1 class="title&gt;
  &lt;em&gt;title&lt;/em&gt;
&lt;/h1&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>.blue{
  color: blue;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 新增一個元素 - createElement()
var str = document.createElement('em');
str.textContent = '字串內容';
str.setAttribute('class','blue');

// 增加子節點 - appendChild()
document.querySelector('.title').appendChild(str);</code></pre>



<p>createElement – 不會刪除原本的內容，會新增在後面。</p>



<h5>補充：JavaScript 動態建立 table 表格的方法</h5>



<p>最原始的方法，依序建立元素。</p>



<pre class="wp-block-code"><code>var el1 = document.createElement('table');
var el2 = document.createElement('tbody');
var el3 = document.createElement('tr');
var el4 = document.createElement('td');
// 使用子節點 - appendChild()追加各個元素
el3.appendChild(el4);
el2.appendChild(el3);
el1.appendChild(el2);</code></pre>



<h4><strong><em>createElement 與 for 運用</em></strong></h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h1&gt;每個農場的農夫名字&lt;/h1&gt;
&lt;ul class="list"&gt;&lt;/ul&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var farms = &#91;
  {
    farmer: '卡斯柏',
    dogs: &#91;'張姆士','龐的']
  },
  {
    farmer: '查理',
    dogs: &#91;'皮皮']
  }
];

var el = document.querySelector('.list');
var farmLen = farms.length;
console.log(farmLen);

for(var i=0;i&lt;farmLen;i++){
  var str = document.createElement('li');
  console.log(farms&#91;i].farmer);
  str.textContent = farms&#91;i].farmer;
  el.appendChild(str);
}</code></pre>



<h4>XSS 跨網站指令碼注意事項 (Cross-site scripting)</h4>



<p>使用 innerHTML 資安上的問題。</p>



<p>範例程式碼</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;textarea name="" id="content" cols="30" rows="10"&gt;&lt;/textarea&gt;
&lt;input id="send" type="button" value="送出"&gt;
&lt;div id="main"&gt;&lt;/div&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>document.getElementById('send').onclick = function(){
  var str = document.getElementById('content').value;

  document.getElementById('main').innerHTML = str;
}</code></pre>



<p>舉例：文字欄位填寫後送出</p>



<pre class="wp-block-code"><code>// 會被新增 script 惡意程式碼，竊取資料、攻擊網站。
Hello!!!
&lt;script&gt;
  alert('你被入侵了');
&lt;/script&gt;</code></pre>



<p>innerHTML 使用時機：可以信任的資料。<br><br>避免表單資料的送出使用 innerHTML 。<br><br>XSS：跨站指令攻擊 (Cross-site scriptint)，是一種網站應用程式的安全漏洞攻擊，是代碼注入的一種。</p>



<h2>event (事件)</h2>



<h4>什麼是 event (事件)？</h4>



<p><a rel="noreferrer noopener" href="https://www.w3schools.com/jsref/dom_obj_event.asp" target="_blank">HTML DOM Events</a></p>



<p>HTML DOM events allow JavaScript to register different event handlers on events in an HTML document.<br><br>Events are normally used in combination with functions, and the function will not be executed before the event occurs (such as when a user clicks a button).</p>



<h4>event 物件 – 告知你當下元件資訊</h4>



<p>用 onclick、或者其他事件綁定的時候，當你觸發那些事件時，console.log(e) 會提供你一些相關資訊。</p>



<p>範例程式碼</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;input type="button" value="點擊" class="btn"&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.btn');

el.onclick = function(){
  // 測試點擊事件功能是否能執行
  alert("hello");
}</code></pre>



<pre class="wp-block-code"><code>var el = document.querySelector('.btn');
  // 參數：ｅ 或者 event
el.onclick = function(e){
  // eg1
  console.log(e);
  // eg2
  console.log(e.x);
}</code></pre>



<h4>觀念篇 – 各種事件綁定的差異</h4>



<h5>範例程式碼</h5>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;input type="button" class="btn" value="點擊一"&gt;

&lt;input onclick="現在已經不建議使用的onclick寫法" type="button" value="點擊二"&gt;

&lt;input type="button" class="btn2" value="點擊三"&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 寫法一
var btn = document.querySelector('.btn');

btn.onclick = function(){
  alert('hello!');
}

// 寫法二
var btn2 = document.querySelector('.btn2');
    // 監聽
btn.addEventListener('click',function(){
  alert('hello!!');
},false);</code></pre>



<h4>addEventListener – 事件監聽</h4>



<h5>範例程式碼</h5>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;input type="button" value="點擊" class="btn"&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.btn');
// 選擇事件,代入匿名function,false
// 監聽
el.addEventListener('click',function(e){
  alert('hello');
},false)</code></pre>



<h4>綁定事件的語法差異</h4>



<p>onclick 跟 addEventListener 的差別：</p>



<ul><li>onclick – 不能同時綁定兩個以上的事件</li><li>addEventListener – 可以同時綁定兩個以上的事件</li></ul>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;input type="button" class="btnOn" value="on點擊"&gt;
&lt;input type="button" class="btnAdd" value="add點擊"&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// onclick
var elOn = document.querySelector('.btnOn');
elOn.onclick = function(){
  alert('on點擊-1);
}

elOn.onclick = function(){
  alert('on點擊-2);
}

// addEventListener - 事件監聽
var elAdd = document.querySelector('.btnAdd');
elAdd.addEventListener('click',function(){
  alert('add點擊-1');
},false)
elAdd.addEventListener('click',function(){
  alert('add點擊-2');
},false)</code></pre>



<p>講解不同的綁定事件方式，是因為還是有機會看到其他事件綁定方式。</p>



<h4>Event Bubbling、Event Capturing 差異</h4>



<h5>程式碼範例</h5>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;body class="body"&gt;
  &lt;div class="box"&gt;&lt;/div&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>.box{
  width: 100px;
  height: 100px;
  background: #000;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.box');
el.addEventListener('click',function(){
  alert('box');
  console.log('box');
},false);

var elBody = document.querySelector('.body');
elBody.addEventListener('click',function(){
  alert('body');
  console.log('body');
},false);

// false (事件氣泡：Event Bubbling) - 從指定元素往外層找
// true (事件捕捉：Event Capturing) - 從最外層找到指定元素
// 第三個參數不寫的話，預設是 false</code></pre>



<h4>stopPropagation – 中止冒泡事件</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;body class="body"&gt;
  &lt;div class="box"&gt;&lt;/div&gt;

  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>.box{
  width: 100px;
  height: 100px;
  background: #000;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.box');
el.addEventListener('click',function(e){
  // 中止冒泡事件
  e.stopPropagation();
  alert('box');
  console.log('box');
},false);

var elBody = document.querySelector('.body');
elBody.addEventListener('click',function(){
  alert('你沒有點到box');
  console.log('你沒有點到box');
},false);</code></pre>



<h4>preventDefault – 取消預設觸發行為</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;body class="body"&gt;
  &lt;a class="link" href="https://www.google.com.tw/" style="margin-top:1800px;display:block;"&gt;menu icon&lt;/a&gt;
  &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.link');

el.addEventListener('click',function(e){
  // 取消元素的默認行為

  // 原本點連結會跳轉到指定網頁

  // submit 按鈕，先透過我的 js 去查詢表單有無錯誤，post來傳送
  e.preventDefault();
  console.log('test');
},false);</code></pre>



<h4>e.target – 了解目前所在元素位置</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="header"&gt;
  &lt;ul style="padding-top:100px;border:1px solid #000;"&gt;
    &lt;li&gt;&lt;a href="#"&gt;123&lt;/a&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelector('.header');

el.addEventListener('click',function(e){
  // 當下元素資訊
  console.log(e);
  // 目前所在元素位置
  console.log(e.target);
  // 目前所在元素位置的節點名稱
  console.log(e.target.nodeName);
},false);</code></pre>



<h4><strong><em>change – 表單內容更動內容時觸發</em></strong></h4>



<p>程式碼範例</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;select id="areaId"&gt;
  &lt;option value="--請選擇地區--"&gt;--請選擇地區--&lt;/option&gt;
  &lt;option value="前鎮區"&gt;前鎮區&lt;/option&gt;
  &lt;option value="苓雅區"&gt;苓雅區&lt;/option&gt;
&lt;/select&gt;
&lt;ul class="list"&gt;&lt;/ul&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var area = document.getElementById('areaId');
var list = document.querySelector('.list');
var country = &#91;
  {
    farmer: '查理',
    place: '前鎮區'
  },
  {
    farmer: '卡斯柏',
    place: '苓雅區'
  },
  {
    farmer: '小花',
    place: '苓雅區'
  }
];

var len = country.length;
// 使用 console.log 來看所寫的程式碼是否可以執行
console.log(len);

function updateList(e){
  alert('測試事件監聽');
  var select = e.target.value;
  console.log(select);
  var str = '';
  for(var i=0;i&lt;len;i++){
    console.log(country&#91;i].farmer);
    if(select == country&#91;i].place){
      str += '&lt;li&gt;'+country&#91;i].farmer+'&lt;/li&gt;';
    }
  }
  list.innerHTML = str;
}
area.addEventListener('change',updateList,false);</code></pre>



<p>練習</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;select id="areaId"&gt;
  &lt;option value="請選擇地區"&gt;請選擇地區&lt;/option&gt;
  &lt;option value="中部地區"&gt;中部地區&lt;/option&gt;
  &lt;option value="南部地區"&gt;南部地區&lt;/option&gt;
&lt;/select&gt;
&lt;ul class="list"&gt;&lt;/ul&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var area = document.getElementById('areaId');
var list = document.querySelector('.list');
var region = &#91;
  {
    owner: '查理',
    place: '南部地區'
  },
  {
    owner: '卡斯柏',
    place: '南部地區'
  },
  {
    owner: '約翰',
    place: '中部地區'
  },
  {
    owner: '艾咪',
    place: '中部地區'
  },
  {
    owner: '傑克',
    place: '南部地區'
  },
  {
    owner: '雪莉',
    place: '南部地區'
  }
];

var len = region.length;
// console.log(len);
function updateList(e){
  // alert('測試監聽');
  var select = e.target.value;
  // console.log(select);
  var str = '';
  for(var i=0;i&lt;len;i++){
    // console.log(region&#91;i].owner);
    if(select == region&#91;i].place){
      str += '&lt;li&gt;'+region&#91;i].owner+'&lt;/li&gt;';
    }
  }
  list.innerHTML = str;
}
area.addEventListener('change',updateList,false);</code></pre>



<h4>keyCode – 點擊鍵盤，射發火箭！</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="map"&gt;
  &lt;img class="rocket rocket-1" src="./images/rocket.png"&gt;
  &lt;img class="rocket rocket-2" src="./images/rocket.png"&gt;
  &lt;img class="rocket rocket-3" src="./images/rocket.png"&gt;
&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
/* CSS STYLES */
html{
    height: 100%;
}
body{
    background-image: url('./images/map.png');
    background-repeat: no-repeat;
    background-size: 100% 100%;
    background-position: bottom;
}
.rocket{
    position: absolute;
    bottom: 0;
    transition: all 5s cubic-bezier(1, 0.08, 0, 1.19);
    /* ease、linear、ease-in、ease-out、ease-in-out */
}
.rocket-1{
    left: 30px;
}
.rocket-2{
    left: 330px;
}
.rocket-3{
    left: 630px;
}</code></pre>



<p>chrome – console 可以調整 cubic-bezier 來看怎麼移動。</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var body = document.body;

function goRocket(e){
    console.log(e.keyCode);
    switch(e.keyCode){
        case 49:
            document.querySelector('.rocket-1').style.bottom = '2000px';
            break;
        case 50:
            document.querySelector('.rocket-2').style.bottom = '2000px';
            break;
        case 51:
            document.querySelector('.rocket-3').style.bottom = '2000px';
            break;
        
    }
}

body.addEventListener('keydown',goRocket,false);</code></pre>



<h4>blur – 離開焦點時進行事件觸發</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="wrap"&gt;
  &lt;div class="wrap-inner"&gt;
    &lt;h1&gt;六角西餐廳 - 顧客點餐篇&lt;/h1&gt;
    &lt;p&gt;服務生：Hello，請問您想要點什麼？&lt;/p&gt;
    &lt;p&gt;　顧客：給我&lt;input type="text" id="hamNumId"&gt;個漢堡，再&lt;input type="text" id="cokeNumId"&gt;杯可樂吧！&lt;/p&gt;
    &lt;p&gt;服務生：&lt;input type="button" id="countId" value="計算中"&gt;，好的，總計是&lt;em id="totalId" class="tag"&gt;&lt;/em&gt;元&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
html{
  background: #000;
  font-family: 'MicrosoftJhengHeiRegular';
}
*,*:before,*:after{
  box-sizing: border-box;
}
.wrap{
  background: url(./images/desktop.png) 50% 50%;
  max-width: 1049px;
  height: 420px;
  margin: 200px auto;
  padding-top: 50px;
}
.wrap-inner{
  background: rgba(0,0,0,.65);
  margin: 0 auto;
  width: 600px;
  color: #fff;
  padding: 50px;
}
.wrap-inner h1{
  text-align: center;
  font-size: 36px;
  margin-bottom: .5em;
}
.wrap-inner p{
  font-size: 16px;
  line-height: 24px;
}
.wrap-inner .tag{
  color: yellow;
}
.wrap-inner input&#91;type=text]{
  width: 30px;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>function count(){
  var hamPrice = 50;
  var cokePrice = 20;
  var hamNum = parseInt(document.getElementById('hamNumId').value)*hamPrice;
  var cokeNum = parseInt(document.getElementById('cokeNumId').value)*cokePrice;
  document.getElementById('totalId').textContent = hamNum + cokeNum;
}
function checkContent(e){
  var str = e.target.value;
  if(str ==''){
    alert('此欄位不可為空');
  }
}
var el = document.getElementById('countId');
el.addEventListener('click',count,false);

// focus 所在焦點
// blur 離開焦點

var ham = document.getElementById('hamNumId');
ham.addEventListener('blur',checkContent,false);
var coke = document.getElementById('cokeNumId');
coke.addEventListener('blur',checkContent,false);</code></pre>



<h4>mouse – 當滑鼠滑入指定內容時觸發</h4>



<p>範例一</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="box"&gt;&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
.box{
  width: 150px;
  height: 150px;
  background: green;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// mousemove - 當滑鼠滑入指定內容時觸發

var el = document.querySelector('.box');

el.addEventListener('mousemove',function(){
  alert('測試監聽事件');
},false);</code></pre>



<p>範例二</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="box box1"&gt;&lt;/div&gt;
&lt;div class="box box2"&gt;&lt;/div&gt;
&lt;div class="box box3"&gt;&lt;/div&gt;
&lt;div class="box box4"&gt;&lt;/div&gt;
&lt;div class="box box5"&gt;&lt;/div&gt;
&lt;div class="box box6"&gt;&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>.box{
  background: green;
  width: 15px;
  height: 15px;
  position: absolute;
}
.box1{
  top: 0px;
  left: 50px;
  animation: fontbulger 2s infinite;
}
.box2{
  top: 0px;
  left: 90px;
  animation: fontbulger 3s infinite;
}
.box3{
  top: 0px;
  left: 140px;
  animation: fontbulger 2.5s infinite;
}
.box4{
  top: 0px;
  left: 180px;
  animation: fontbulger 1.2s infinite;
}
.box5{
  top: 0px;
  left: 230px;
  animation: fontbulger 4s infinite;
}
.box6{
  top: 0px;
  left: 250px;
  animation: fontbulger 4s infinite;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var el = document.querySelectorAll('.box');

var Len = el.length;

for (var i=0;i&lt;Len;i++){
  el&#91;i].addEventListener('mousemove',function(e){
  alert('你輸了！');
  });
}</code></pre>



<h4>網頁座標 – 了解 screen、page、client 箇中差異</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="wrap"&gt;
  &lt;div class="header"&gt;
    &lt;p&gt;
      screenX: &lt;span class="screenX"&gt;&lt;/span&gt;
      screeny: &lt;span class="screenY"&gt;&lt;/span&gt;
    &lt;/p&gt;
    &lt;p&gt;
      pageX: &lt;span class="pageX"&gt;&lt;/span&gt;
      pageY: &lt;span class="pageY"&gt;&lt;/span&gt;
    &lt;/p&gt;
    &lt;p&gt;
      clientX: &lt;span class="clientX"&gt;&lt;/span&gt;
      clientY: &lt;span class="clientY"&gt;&lt;/span&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
html{
    height: 100%;
}
.wrap{
    max-width: 1920px;
    height: 5000px;
    background: url('./images/dark.png') bottom #404747 no-repeat;
}
.header{
    height: 100px;
    position: fixed;
    top: 0;
    width: 100%;
    color: #fff;
    text-align: center;
    background: slateblue;
}
.header p{
    padding: .5em;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var screenX = document.querySelector('.screenX');
var screenY = document.querySelector('.screenY');
var pageX = document.querySelector('.pageX');
var pageY = document.querySelector('.pageY');
var clientX = document.querySelector('.clientX');
var clientY = document.querySelector('.clientY');

function getPosition(e){
    screenX.textContent = e.screenX;
    screenY.textContent = e.screenY;
    pageX.textContent = e.pageX;
    pageY.textContent = e.pageY;
    clientX.textContent = e.clientX;
    clientY.textContent = e.clientY;
}

var el = document.body;
el.addEventListener('mousemove',getPosition,false);</code></pre>



<ul><li>screen：整個螢幕的解析度大小</li><li>page：整個網頁內容高度、寬度</li><li>client：瀏覽器視窗的大小</li></ul>



<h4>網頁座標 – 應用篇</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="wrap"&gt;
  &lt;div class="header"&gt;
    &lt;p&gt;
      screenX: &lt;span class="screenX"&gt;&lt;/span&gt;
      screeny: &lt;span class="screenY"&gt;&lt;/span&gt;
    &lt;/p&gt;
    &lt;p&gt;
      pageX: &lt;span class="pageX"&gt;&lt;/span&gt;
      pageY: &lt;span class="pageY"&gt;&lt;/span&gt;
    &lt;/p&gt;
    &lt;p&gt;
      clientX: &lt;span class="clientX"&gt;&lt;/span&gt;
      clientY: &lt;span class="clientY"&gt;&lt;/span&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="mouseImg"&gt;
  &lt;img src="images/pic.png" width="100"&gt;
&lt;/div&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
html{
  height: 100%;
}
body{
  cursor: none;
}
.wrap{
  max-width: 1920px;
  height: 5000px;
  background: url('./images/dark.png') bottom #404747 no-repeat;
}
.header{
  height: 100px;
  position: fixed;
  top: 0;
  width: 100%;
  color: #fff;
  text-align: center;
  background: slateblue;
}
.header p{
  padding: .5em;
}
.mouseImg{
  position: fiexe;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var screenX = document.querySelector('.screenX');
var screenY = document.querySelector('.screenY');
var pageX = document.querySelector('.pageX');
var pageY = document.querySelector('.pageY');
var clientX = document.querySelector('.clientX');
var clientY = document.querySelector('.clientY');

var mouseImg = document.querySelector('.mouseImg');

function getPosition(e){
    screenX.textContent = e.screenX;
    screenY.textContent = e.screenY;
    pageX.textContent = e.pageX;
    pageY.textContent = e.pageY;
    clientX.textContent = e.clientX;
    clientY.textContent = e.clientY;
    mouseImg.style.left = e.clientX + 'px';
    mouseImg.style.top = e.clientY + 'px';
}

var el = document.body;
el.addEventListener('mousemove',getPosition,false);</code></pre>



<p>mouse CSS – 改變滑鼠圖片</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
    &lt;title&gt;JavaScript 入門篇 - 學徒的試煉&lt;/title&gt;
    &lt;link rel="stylesheet" href="css/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;mouse CSS 改變滑鼠圖片&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>*{
  cursor: url('../img/pic1.png), auto;
}</code></pre>



<h4>事件監聽優化篇 – 從父元素來監聽子元素內容</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;ul class="list"&gt;
  &lt;h2&gt;Heading 2 - 標題&lt;/h2&gt;
  &lt;li&gt;查理&lt;/li&gt;
  &lt;li&gt;卡斯柏&lt;/li&gt;
  &lt;a href="#"&gt;網頁連結&lt;/a&gt;
&lt;/ul&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS STYLES */
.list{
  padding: 50px;
  border: 10px solid #000;
}
a{
  color: blue;
}</code></pre>



<h2>localStorage – 瀏覽器資料儲存</h2>



<h4>什麼是 localStorage？</h4>



<p>瀏覽器裡面的資料庫。</p>



<p>Google Chrome – Console – Application – Local Storage</p>



<p>業界常實作的功能</p>



<ul><li>Local Storage</li><li>Session Storage</li><li>Cookies</li></ul>



<p>舉例網站：博客來、萌典</p>



<figure class="wp-block-table"><table><tbody><tr><td>Key</td><td>Value</td></tr><tr><td>font-size</td><td>14</td></tr><tr><td>prev-id</td><td>“萌”</td></tr></tbody></table></figure>



<h4>setItem、getItem 基本操作</h4>



<p>儲存資料 – setItem<br>取出資料 – getItem</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var str = 'tom';

localStorage.setItem("myName",str);
console.log(localStorage.getItem('myName');</code></pre>



<p>範例程式碼</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;h2&gt;請輸入你的姓名&lt;/h2&gt;
&lt;input type="text" class="textClass"&gt;
&lt;input type="button" class="btnClass" value="點擊"&gt;
&lt;input type="button" class="btnCall" value="點擊呼叫名字"&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var btn = document.querySelector('.btnClass');
var call = document.querySelector('.btnCall');

function saveName(e){
  console.log('測試監聽');
  var str = document.querySelector('.textClass').value;
  console.log(str);
  localStorage.setItem('myName',str);
}

btn.addEventListener('click',saveName,false);
call.addEventListener('click',function(){
  var str = localStorage.getItem('myName');
  alert('你的名字叫做'+str);
},false);</code></pre>



<h4>透過 JSON.parse、JSON.stringify 來編譯資料</h4>



<p>HTML</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 1.將 array 轉為 string - JSON.stringify()
// 2.將 string 轉為 array - JSON.parse()
// 學以上兩點是因為 Local Storage 只會保存、取出 string 資料

var country = &#91;
  {farmer: '卡斯柏'};
];
var countryString = JSON.stringify(country);
console.log(countryString);
localStorage.setItem('countryItem',countryString);

var getData = localStorage.getItem('countryItem');
var getDataAry = JSON.parse(getData);

console.log(typeof(getData));
console.log(typeof(getDataAry));
console.log(getDataAry&#91;0].farmer);</code></pre>



<h4>data-* – 透過 dataset 讀取自訂資料</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;ul class="list"&gt;
  &lt;li data-num="0" data-dog="3" class="listli"&gt;卡斯柏&lt;/li&gt;
&lt;/ul&gt;</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>&gt; document.querySelector('.list li').dataset
&lt; DOMStringMap {num: "0", dog: "3"}
&gt; document.querySelector('.list li').dataset.dog
&lt; "3"</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var list = document.querySelector('.list li');

// 確認點擊的農夫，以及相關的資訊
function checkList(e){
  console.log('測試監聽');
  var num = e.target.dataset.num;
  var dog = e.target.dataset.dog;
  console.log('農夫編號是'+num);
  console.log('有'+dog+'隻狗');
}

list.addEventListener('click',checkList,false);</code></pre>



<h4>dataset、array 運用</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;ul class="list"&gt;&lt;/ul&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS STYLES */
.list{
  padding: 50px;
  background: #000;
  color: #fff;
}</code></pre>



<p>JavaScript</p>



<p>監聽綁定之後，並不代表裡面的其他元素也會跟著做綁定。<br><br>一個網頁上有太多監聽的事件，會導致效能變的非常不好。<br><br>因此比較好的做法是去指定ul，然後去查詢。</p>



<pre class="wp-block-code"><code>var country = &#91;
  {
    farmer: '卡斯柏'
  },
  {
    farmer: '查理'
  }
];
var list = document.querySelector('.list');

// 更新農場資料
function updateList(){
  var str = '';
  var len = country.length;
  for(var i=0;i&lt;len;i++){
    str+='&lt;li data-num="'+i+'"&gt;'+country&#91;i].farmer+'&lt;/li&gt;;
  }
  list.innerHTML = str;
}
updateList();

function checkList(e){
  console.log(e.target.nodeName);
  var num = e.target.nodeName;
  if(num !=="LI"){return};
  var str = e.target.dataset.num;
  console.log('您現在選擇的農夫是'+country&#91;str].farmer);
}

list.addEventListener('click',checkList,false);</code></pre>



<h4>splice – 刪除 array 資料</h4>



<p>Chrome – Console</p>



<pre class="wp-block-code"><code>&gt; var colors = &#91;'black','red'];
&lt; undefined
&gt; colors
&lt; &#91;"black", "red"]
&gt; colors.push('yellow');
&lt; 3
&gt; colors
&lt; &#91;"black", "red", "yellow"]

// splice - 刪除 array 資料
// splice(從第幾筆開始,刪除幾筆)
&gt; colors.splice(0,2);
&lt; &#91;"black", "red"]
&gt; colors
&lt; &#91;"yellow"]</code></pre>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;ul class="list"&gt;&lt;/ul&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS STYLES */
.list{
  padding: 50px;
  background: #000;
  color: #fff;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var country = &#91;
  {
    farmer: '卡斯柏'
  },
  {
    farmer: '查理'
  },
  {
    farmer: '約翰'
  }
];
var list = document.querySelector('.list');

// 更新農場資料
function updateList(){
  var str = '';
  var len = country.length;
  for(var i=0;i&lt;len;i++){
    str+='&lt;li data-num="'+i+'"&gt;'+country&#91;i].farmer+'&lt;/li&gt;';
    }
    list.innerHTML = str;
}
updateList();

// 確認點擊的農夫是誰
function checkList(e){
  var num = e.target.dataset.num;
  // console.log(e.target.nodeName);
  if(e.target.nodeName !== 'LI'){return};
  country.splice(num,1);
  updateList();
}

list.addEventListener('click',checkList,false);</code></pre>



<h4><strong><em>localStorage 作業介紹</em></strong></h4>



<p>農場備忘(to do list)，功能有兩種：</p>



<ul><li>新增備忘</li><li>刪除備忘</li></ul>



<h4>localStorage 作業講解</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en zh-hant"&gt;

&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;JavaScript - 學徒的試煉&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;

&lt;body&gt;

    &lt;div class="wrap clearfix"&gt;
        &lt;div class="img"&gt;
            &lt;img class="logo" src="./images/logo.svg"&gt;
        &lt;/div&gt;
        &lt;div class="content"&gt;
            &lt;div class="addList"&gt;
                &lt;input type="text" class="text" placeholder="請填寫代辦內容" required&gt;
                &lt;input type="button" class="send" value="加入代辦"&gt;
            &lt;/div&gt;
            &lt;ul class="list"&gt;&lt;/ul&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>/* CSS RESET */
/* CSS STYLES */
html{
	background-color: #000;
	background-size: cover;
	height: 100%;
	width: 100%;
}
.wrap{
	width: 600px;
	margin: 0 auto;
	background: #fff;
	margin: 100px auto;
	padding: 1em;
	text-align: center;
}
.img{
	float: left;
	width: 200px;
}
.content{
	float: right;
	width: 350px;
	text-align: left;
}
.clearfix{
	overflow: auto;
	zoom: 1;
}
.list{
	margin: 0;
	padding: 50px 100px 100px 0;
	text-align: left;
	list-style: none;
}
.list li{
	border-bottom: 1px solid gray;
	padding: 10px 0;
}
.addList{
	margin-top: 20px;
}
.addList .text{
	padding: 10px;
	border: 2px solid rgba(73, 41, 10);
}
.addList .send{
	padding: 10px;
	cursor: pointer;
	background: #e8a874;
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 指定 DOM
var list = document.querySelector('.list');
var sendData = document.querySelector('.send');
var data = JSON.parse(localStorage.getItem('listData')) || &#91;];

// 監聽與更新
sendData.addEventListener('click',addData,false);
list.addEventListener('click',toggleDone,false);
updateList(data);

// 加入列表，並同步更新網頁與 Local Storage
function addData(e){
    e.preventDefault();
    var txt = document.querySelector('.text').value;
    var todo = {
        content: txt
    };
    data.push(todo);
    updateList(data);
    localStorage.setItem('listData',JSON.stringify(data),false);
}

// 更新網頁內容
function updateList(items){
    str = '';
    var len = items.length;
    for(var i=0;i&lt;len;i++){
        str += '&lt;li&gt;&lt;a href="#" data-index='+i+'&gt;刪除&lt;/a&gt;&lt;span&gt;　'+ items&#91;i].content + '&lt;/span&gt;&lt;/li&gt;';
    }
    list.innerHTML = str;
}

// 刪除代辦事項
function toggleDone(e){
    e.preventDefault();
    if(e.target.nodeName !== 'A'){return};
    var index = e.target.dataset.index;
    data.splice(index, 1);
    localStorage.setItem('listData',JSON.stringify(data),false);
    updateList(data);
}</code></pre>



<h5>網路資料觀念補充：</h5>



<p>tagName 和 nodeName 的語意是一樣的，都是返回所包含標籤的名稱，例如上面的h2標籤，都是返回h2，但是tagName只能在元素標籤上使用，而nodeName則可以在所有的節點上使用。</p>



<h2>瀏覽器功能探索 (BOM)</h2>



<h4>瀏覽器功能簡介</h4>



<p>BOM (Browser Object Model)</p>



<p>開啟瀏覽器一個網頁的話(ex：Google Chrome、IE、Firefox)，會開啟一個window的物件，來操作、讀取瀏覽器資訊。</p>



<p>window 裡面的各種效果：</p>



<ul><li>history</li><li>frames</li><li>location</li><li>DOM (document)</li><li>screen</li><li>navigator</li></ul>



<p>Chrome – Console</p>



<pre class="wp-block-code"><code>&gt; window
&lt; Window&nbsp;{window: Window, self: Window, document: document, name: "", location: Location,&nbsp;…}
&gt; var str = 3;
&lt; undefined
&gt; str
&lt; 3
&gt; window.str
&lt; 3

// 舉例
&gt; window.screen
&lt; Screen&nbsp;{availWidth: 1280, availHeight: 683, width: 1280, height: 720, colorDepth: 24,&nbsp;…}
&gt; window.screen.width
&lt; 1280</code></pre>



<h4>回上頁功能實作</h4>



<p>history – 回上頁功能</p>



<p>HTML</p>



<pre class="wp-block-code"><code>// index.html
&lt;h1&gt;第一頁&lt;/h1&gt;
&lt;a href="b.html"&gt;連到第二頁&lt;/a&gt;
&lt;br&gt;
&lt;a href="#" id="next"&gt;下一頁(JS版)&lt;/a&gt;

&lt;script&gt;
  document.getElementById('next').onclick = function(){
  window.history.forward();
  }
&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// b.html
&lt;h1&gt;第二頁&lt;/h1&gt;
&lt;input type="button" id="back" value="回到上一頁"&gt;

&lt;script&gt;
  document.getElementById('back').onclick = function(){
  window.history.back();
  }
&lt;/script&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>body{
  background: #000;
}
h1{
  font-size: 48px;
  color: #fff;
}
a{
  font-size: 36px;
  color: #fff;
}</code></pre>



<p>討論區：把 js 寫在同一頁，如何正常執行？</p>



<p>HTML</p>



<pre class="wp-block-code"><code>// index.html
&lt;h1&gt;第一頁&lt;/h1&gt;
&lt;a href="b.html"&gt;連到第二頁&lt;/a&gt;
&lt;br&gt;
&lt;a href="#" id="next"&gt;下一頁(JS版)&lt;/a&gt;

&lt;script src="js/all.js"&gt;&lt;/script&gt;</code></pre>



<pre class="wp-block-code"><code>// b.html
&lt;h1&gt;第二頁&lt;/h1&gt;
&lt;input type="button" id="back" value="回到上一頁"&gt;

&lt;script src="ja/all.js"&gt;&lt;/script&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var next = document.getElementById('next');
var back = document.getElementById('back');

// 到index頁面，back為null，到b.html頁面，next為null
console.log(next,back);

if(next){
  next.onclick = function(){
    window.history.forward();
  }
}else{
  back.onclick = function(){
    window.history.back();
}</code></pre>



<h4>透過 JS 設計列印功能</h4>



<p>列印功能常見應用在票券、QRCODE、訂單資訊、發票…等。<br><br>location 提供了很多讀取所在網址的相關資訊，並可以用來跳轉網址。</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;input type="button" id="print" value="列印"&gt;
&lt;input type="button" id="locat" value="瀏覽location資訊"&gt;
&lt;input type="button" id="open" value="移動到google首頁"&gt;

&lt;script src="js/all.js"&gt;&lt;/script&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 列印功能
document.getElementById('print').onclick = function(){
  window.print();
}
// 瀏覽location資訊
document.getElementById('locat').onclick = function(){
  console.log(location);
  // 轉網址
  location.href = 'https://www.google.com.tw/';
}
// 開啟網頁
document.getElementById('open').onclick = function(){
  window.open('https://www.google.com.tw/');
}</code></pre>



<h4>動態擷取瀏覽器高度 – innerHeight</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;div class="hero"&gt;&lt;/div&gt;
&lt;div class="section2"&gt;
  section2
&lt;/div&gt;
&lt;script src="js/all.js"&gt;&lt;/script&gt;</code></pre>



<p>CSS</p>



<pre class="wp-block-code"><code>.hero{
  height: 400px;
  background-image: url('./images/hero.jpg');
  background-size: cover;
  background-position: top center;
}
.section2{
  background: lightgreen;
  text-align: center;
  color: #fff;
  font-size: 80px;
  padding: 100px;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>document.querySelector('.hero').style.height = window.innerHeight+"px";

window.onresize = function(){
  document.querySelector('.hero').style.height = window.innerHeight+"px";</code></pre>



<h2>JS 開發邏輯思維</h2>



<h4>JS 開發邏輯思維</h4>



<p><a rel="noreferrer noopener" href="https://quip.com/h0KbA7QAH1Ss" target="_blank">共筆文件</a></p>



<h5><strong>JS 新手都能聽懂的開發邏輯思維養成</strong></h5>



<h6>JS 初學者起手式：資料(model) &gt; 事件(event) &gt; 介面(View)</h6>



<p>三個步驟來規劃 JS 網頁應用</p>



<ol><li>model：先處理好資料的新增、刪除、修改</li><li>event：使用者行為觸發程式</li></ol>



<h6>資料</h6>



<ol><li>用<strong>陣列</strong>與<strong>物件</strong>規畫你的資料</li><li>JS 記憶體儲存 (變數)</li><li>LocalStorage</li></ol>



<h6>事件(event)</h6>



<p>使用者行為觸發事件，一般都用 function 函式來規劃：</p>



<ol><li>更新 model</li><li>更新 view</li></ol>



<p><strong>常見使用者行為</strong></p>



<ol><li>網頁預設載入 (init)</li><li>使用者行為<ul><li>滑鼠滑入</li><li>點擊</li></ul></li></ol>



<h6>畫面更新</h6>



<ol><li>innerHTML</li><li>appendChild</li></ol>



<h6>傳統 JS 寫法</h6>



<ul><li><a rel="noreferrer noopener" href="https://drive.google.com/drive/folders/1dVKllw6EfEYsPpaMIkM6BtfOQHUmnl9d" target="_blank">localstorage 基礎 JS 範例</a><ul><li>event 裡面同時處理<strong>資料</strong>與<strong>介面更新</strong></li></ul></li><li><a rel="noreferrer noopener" href="http://jsbin.com/gugilijixa/1/edit?html,js,console,output" target="_blank">Vue JS 範例</a><ul><li>藉由框架上的包裝<ul><li>變更 model, view 就會更新</li><li>變更 view, model 就會更新</li></ul></li></ul></li></ul>



<h6>Vue MVVM (資料>介面>介面>資料)</h6>



<figure class="wp-block-image size-full"><img loading="lazy" width="1600" height="850" src="/wordpress_blog/wp-content/uploads/2022/04/mvvm.png" alt="" class="wp-image-645"/><figcaption>VuE MVVM</figcaption></figure>



<h6>題目分享</h6>



<p>JS 範例</p>



<ul><li><a rel="noreferrer noopener" href="https://codepen.io/linxin/pen/rZxgXW" target="_blank">旅遊網學生範例</a></li><li><a rel="noreferrer noopener" href="https://buggyho.github.io/BMIcalculate/" target="_blank">BMI學生範例</a></li><li><a href="https://codepen.io/Jimmywei01/pen/PRrWZe" target="_blank" rel="noreferrer noopener">BMI學生範例二</a></li></ul>



<p>99乘法表</p>



<p>資料：[‘2′,’3′,’4′,’5′,’6′,’7′,’8′,’9’]<br>觸發：init<br>畫面更新：innerHTML</p>



<p>時鐘</p>



<ul><li><a rel="noreferrer noopener" href="http://underground-colck.surge.sh/" target="_blank">MooJi 範例</a></li><li><a href="https://kenchan1604.github.io/js_underground_city/F2/index.html" target="_blank" rel="noreferrer noopener">Oliver</a></li></ul>



<p>計算機</p>



<ul><li><a rel="noreferrer noopener" href="https://codepen.io/woodytsai/pen/omZBRa" target="_blank">MooJi 範例</a></li><li><a rel="noreferrer noopener" href="https://codepen.io/MASKLIN/pen/BMWLxp" target="_blank">林一元</a></li><li><a href="https://pvt5r486.github.io/JSD3_Calc/index" target="_blank" rel="noreferrer noopener">宇軒</a></li></ul>



<p>時區</p>



<ul><li><a rel="noreferrer noopener" href="https://noobtw.github.io/js-underground/4f/" target="_blank">Noob</a></li><li><a href="https://codepen.io/Kanboo/full/JxJjVr" target="_blank" rel="noreferrer noopener">Kanboo</a></li></ul>



<p>AQI</p>



<ul><li><a rel="noreferrer noopener" href="https://codepen.io/wilightmoment/pen/LqXywa" target="_blank">穎然</a></li><li><a href="https://mini-ghost.github.io/JSunderground/05/public/" target="_blank" rel="noreferrer noopener">翰璋</a></li></ul>



<p>60 秒倒數</p>



<ul><li><s>汶穎</s></li><li><a href="https://noobtw.github.io/js-underground/6f/" target="_blank" rel="noreferrer noopener">Noob</a></li></ul>



<h6>BLOG</h6>



<ul><li>針對此次分享寫 BLOG 分享</li><li>何謂 MVC</li></ul>



<h4>講座 – JS 開發邏輯思維養成</h4>



<pre class="wp-block-code"><code>// 講座筆記
1. 資料 (Model)
2. 事件 (Event)
3. 介面 (View)

// 首先需要先定義資料出來

// 資料太多

// 10筆資料
//  3筆資料

// 資料的新增、刪除、修改

// 事件

// click

// init() 抽象

// 介面
// 1. innerHTML
// 2. createElement
// 寫入 DOM 元素到網頁上</code></pre>



<p>定義以下程式碼分別是以下哪一種？</p>



<ol><li>資料 (Model)</li><li>事件 (Event)</li><li>介面 (View)</li></ol>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 指定 dom
var list = document.querySelector('.list');
var sendData = document.querySelector('.send');
var data = JSON.parse(localStorage.getItem('listData')) || &#91;]; // → 1

// 監聽與更新
sendData.addEventListener('click', addData); // → 2
list.addEventListener('click', toggleDone);
updateList(data);

//加入列表，並同步更新網頁與 localstorage
function addData(e) {
  e.preventDefault();
  var txt = document.querySelector('.text').value;
  var todo = {
    content: txt
  };
  data.push(todo); // → 1
  updateList(data); // → 3
  localStorage.setItem('listData', JSON.stringify(data)); // → 1
}
// 更新網頁內容
function updateList(items) {
  str = '';
  var len = items.length;
  for (var i = 0; len &gt; i; i++) {
    str += '&lt;li&gt;&lt;a href="#" data-index=' + i + ' /&gt;刪除&lt;/a&gt; &lt;span&gt;' + items&#91;i].content + '&lt;/span&gt;&lt;/li&gt;';
  }
  list.innerHTML = str; // → 3
}
// 刪除代辦事項
function toggleDone(e) {
  e.preventDefault();
  if(e.target.nodeName !== 'A'){return};
  var index = e.target.dataset.index; // → 1
  data.splice(index, 1); // → 1
  localStorage.setItem('listData', JSON.stringify(data)); // → 1
  updateList(data); // → 3
}</code></pre>



<h6>Vue JS 範例</h6>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en zh-hant"&gt;

&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;JavaScript - 學徒的試煉&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;

&lt;body&gt;

    &lt;div class="app"&gt;
        &lt;input type="text" placeholder="請輸入代辦事項" @keyup.enter="addTodo(newTodo)" v-model="newTodo"&gt;
        &lt;!-- @keyup.enter → 1 --&gt;
        &lt;h2&gt;事項列表&lt;/h2&gt;
        &lt;ul&gt;
            &lt;li v-for="todo in todos"&gt;
                {{todo.content}}
                - &lt;a href="#" @click.prevent="removeTodo(todo)"&gt;刪除&lt;/a&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;!-- v-for → 3 --&gt;
        &lt;!-- todos → 1 --&gt;
    &lt;/div&gt;

    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.0.3/vue.js"&gt;&lt;/script&gt;
    &lt;script src="js/all.js"&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var app = new Vue({
  el: '.app',
  data:{
    todos:&#91;], → 1
    newTodo:'' → 1
  },
  methods:{
    addTodo: function(todo){
      this.todos.push({content:todo,completed: false})
    },
    removeTodo: function(todo){
      this.todos.splice(this.todos.indexOf(todo), 1);
    }
  }
})</code></pre>



<p>程式碼範例檢視是哪種定義。<br><br>Ex：99乘法表、時鐘、計算機、時區</p>



<pre class="wp-block-code"><code>// 不會寫的地方
1. 資料 (Model) - 抓時間資料、刪除第六筆資料
2. 事件 (Event)
3. 介面 (View) - 有20筆資料、跑for迴圈不會、某個CSS效果寫不出來、不會算角度</code></pre>



<h2>最終作業與總結</h2>



<h4>最終作業寄送變更</h4>



<h4>最終作業介紹</h4>



<p><a rel="noreferrer noopener" href="https://hexschool.github.io/JavaScript_HomeWork/" target="_blank">作業標示文件</a></p>



<p><a rel="noreferrer noopener" href="https://drive.google.com/file/d/0B2e3VLlpmcU4ekJEaGJmWWxlWTg/view" target="_blank">圖片檔案下載</a></p>



<p><a href="https://zh.wikipedia.org/wiki/%E8%BA%AB%E9%AB%98%E9%AB%94%E9%87%8D%E6%8C%87%E6%95%B8" target="_blank" rel="noreferrer noopener">BMI 公式</a></p>



<h4>高雄旅遊景點 API 說明</h4>



<p><a rel="noreferrer noopener" href="https://raw.githubusercontent.com/hexschool/KCGTravel/master/datastore_search.json" target="_blank">高雄旅遊景點 API</a></p>



<p><a rel="noreferrer noopener" href="https://github.com/hexschool/KCGTravel" target="_blank">GitHub</a></p>



<h4>JS 百題斬</h4>



<p><a href="https://docs.google.com/forms/d/e/1FAIpQLSeBrQ9NspE3_6MCk2Fi0rMfu3baVcnNrPIEhvKz5ZsB3pwnNw/viewform?c=0&amp;w=1" target="_blank" rel="noreferrer noopener">測驗</a></p>



<h4>問答區精彩討論</h4>



<h2>AJAX</h2>



<h4>什麼是 AJAX？</h4>



<p>AJAX 是「Asynchronous JavaScript and XML」（非同步的 JavaScript 與 XML 技術）的縮寫，簡單說就是網頁不用重新整理，就能即時地透過瀏覽器去跟伺服器溝通，撈出資料。</p>



<p>Chrome 開發人員工具 – Network 講解，EX：Google<br><br>以奇摩信箱註冊網頁為範例講解 AJAX 運用技巧。<br><br>以 PCHOME 購買 MAC 為範例，如加入購物車，與後端確認產品剩餘數量。<br><br>以 GOOGLE 搜尋引擎來輸入查詢名稱，會下拉顯示其他延伸名稱。</p>



<h4>透過 XMLHttpsRequest 物件跨瀏覽器撈資料</h4>



<p><a rel="noreferrer noopener" href="https://hexschool.github.io/ajaxHomework/data.json" target="_blank">練習用的 JSON 連結</a></p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var xhr = new XMLHttpRequest();

// readyState
// 0 - 你已經產生一個XMLHttpRequest，但是還沒有連結你要撈的資料
// 1 - 你用了open()，但你還沒有把資料傳送過去
// 2 - 偵測到你有用 send
// 3 - loading (載入中)
// 4 - 你撈到資料了，數據已經完全接受到了

// open()的三個參數分別是，格式、要讀取的網址、同步與非同步
// 格式：get(讀取資料)、post(傳送資料到伺服器)
xhr.open('get','https://hexschool.github.io/ajaxHomework/data.json',true);
// null - 空的資料
xhr.send(null);</code></pre>



<h4>AJAX 非同步觀念 (上)</h4>



<p>非同步與同步的觀念</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var xhr = new XMLHttpRequest();

xhr.open('get','https://hexschool.github.io/ajaxHomework/data.json',true);

// true - 非同步，不等資料傳回來，就讓程式繼續往下跑，等到回傳才會自動回傳。
// false - 同步，會等資料傳回來，才讓程式碼繼續往下跑。

xhr.send(null);

console.log(xhr.responseText);</code></pre>



<p>大部分會使用非同步，因為要撈取的資料龐大，所以大部分的時候我們都會使用true來去做設計。</p>



<h4>AJAX 非同步觀念 (下)</h4>



<p>網路資料：onload 事件用來設計當網頁載入完成後，觸發特定的 JavaScript 函式去執行特定的工作。</p>



<p>HTML</p>



<p>&lt;div class=”message”&gt;&lt;/div&gt;</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var xhr = new XMLHttpRequest();

xhr.open('get','https://hexschool.github.io/ajaxHomework/data.json',true);
xhr.send(null);

// onload - 當確認跑完以後再去執行這個事件，會自動觸發這個事件的內容。
xhr.onload = function(){
  console.log(xhr.responseText);
  var str = JSON.parse(xhr.responseText);
  document.querySelector('.message').textContent = str&#91;0].name;
}

// 1. 建立了一個 XMLHttpRequest
// 2. 傳送到對方伺服器要資料
// 3. 回傳資料到自己的瀏覽器
// 4. 拿到資料後再看要怎麼處理</code></pre>



<h4>HTTP狀態碼</h4>



<p>Chrome – Network 中的 Status，以 Google 為講解</p>



<pre class="wp-block-code"><code>// 200 資料有正確回傳，有撈到
// 404 資料讀取錯誤，沒有撈到

var xhr = new XMLHttpRequest();

xhr.open('get','https://hexschool.github.io/ajaxHomework/data.json',true);
xhr.send(null);

xhr.onload = function(){
  console.log(xhr.responseText);
  if(xhr.status == 200){
    var str = JSON.parse(xhr.responseText);
    document.querySelector('.message').textContent = str&#91;0].name;
  } else {
    console.log('資料錯誤!');
  }
}</code></pre>



<h4>什麼是 Cross-Origin Resource Sharing (CORS) ？</h4>



<p>網路資料：<br>跨來源資源共用（Cross-Origin Resource Sharing (CORS)）是一種使用額外 HTTP 標頭令目前瀏覽網站的使用者代理取得存取其他來源（網域）伺服器特定資源權限的機制。</p>



<p><a rel="noreferrer noopener" href="http://www.test-cors.org/" target="_blank">CORS 偵測服務</a></p>



<p><a rel="noreferrer noopener" href="http://opendata2.epa.gov.tw/UV/UV.json" target="_blank">練習用 JSON</a></p>



<p><a rel="noreferrer noopener" href="https://opendata.epa.gov.tw/" target="_blank">練習用網站 (無提供CORS)</a></p>



<pre class="wp-block-code"><code>// CORS - 是否可以跨網域撈取資料
XHR status: 200 - 可以
XHR status: 0 - 不行</code></pre>



<h4>傳統表單輸入介紹</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;form action="index.html"&gt;
  帳號：
  &lt;input type="text" name="account"&gt;
  &lt;br&gt;
  密碼：
  &lt;input type="password" name="password"&gt;
  &lt;br&gt;
  &lt;input type="submit" value="送出"&gt;
&lt;/form&gt;</code></pre>



<p>表單送出後，這個網址上面的內容<br>後面接參數，?，連接多個內容時，會用&amp;</p>



<h4>AJAX POST 寫法 (提供 API 練習)</h4>



<p><a rel="noreferrer noopener" href="https://github.com/hexschool/nodejs_ajax_tutorial" target="_blank">六角 POST API 連結</a></p>



<pre class="wp-block-code"><code>六角學院 AJAX 練習
注意，此範例僅供練習，並不會儲存用戶資料至資料庫(僅緩存)。

註冊
新增一個帳號。

Method: POST
URL: https://hexschool-tutorial.herokuapp.com/api/signup
Data:
{
  email: 'lovef2e@hexschool.com',
  password: '12345678'
}
Success Response:
{
  "success": true,
  "result": {},
  "message": "帳號註冊成功"
}
Error Response:
{
  "success": false,
  "result": {},
  "message": "此帳號已被使用"
}
登入
登入一個已存在的帳號。

Method: POST
URL: https://hexschool-tutorial.herokuapp.com/api/signin
Data:
{
  email: 'lovef2e@hexschool.com',
  password: '12345678'
}
Success Response:
{
  "success": true,
  "result": {},
  "message": "登入成功"
}
Error Response:
{
  "success": false,
  "result": {},
  "message": "此帳號不存在或帳號密碼錯誤"
}</code></pre>



<p>這邊用 Console 練習</p>



<pre class="wp-block-code"><code>&gt; var xhr = new XMLHttpRequest();
&lt; undefined
&gt; xhr
&lt; XMLHttpRequest&nbsp;{onreadystatechange: null, readyState: 0, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload,&nbsp;…}
&gt; xhr.open('post','https://hexschool-tutorial.herokuapp.com/api/signup',true);
&lt; undefined
&gt; xhr
&lt; XMLHttpRequest&nbsp;{onreadystatechange: null, readyState: 1, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload,&nbsp;…}
&gt; xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
&lt; undefined
&gt; xhr.send('email=learning123@gmail.com&amp;password=123456');
&lt; undefined
&gt; xhr
&lt; XMLHttpRequest&nbsp;{onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload,&nbsp;…}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>var xhr = new XMLHttpRequest();
xhr.open('post','https://hexschool-tutorial.herokuapp.com/api/signup',true);
xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
xhr.send('email=learning123@gmail.com&amp;password=123456');</code></pre>



<h4>從 chrome 開發人員工具檢視 AJAX post</h4>



<p>用圖片去做講解 get 跟 post 的差異。</p>



<pre class="wp-block-code"><code>get
瀏覽器 → 發出 XMLHttpRequest 請求 → 伺服器
伺服器 → 回傳資料 → 瀏覽器</code></pre>



<pre class="wp-block-code"><code>post
格式是 content-type: application/x-www-form-urlencoded
瀏覽器 → 發出 XMLHttpRequest 請求 → 伺服器
'email=xx@gmail.com&amp;password=1234'
伺服器 → 回傳資料 → 瀏覽器
{
  "success: true",
  "result: {},
  "message: "帳號註冊成功"
}</code></pre>



<pre class="wp-block-code"><code>// 格式是 content-type: application/json
瀏覽器 → 發出 XMLHttpRequest 請求 → 伺服器
{
  "email": "xx@gmail.com",
  "password": "1234"
}
伺服器 → 回傳資料 → 瀏覽器
{
  "success: true",
  "result: {},
  "message: "帳號註冊成功"
}</code></pre>



<p>用 Chrome – Network 可以看相關資訊。</p>



<h4>AJAX JSON 傳遞</h4>



<p>需轉成字串的內容。</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;form action="index.html"&gt;
    帳號：
    &lt;input type="text" name="account"&gt;
    &lt;br&gt;
    密碼：
    &lt;input type="password" name="password"&gt;
    &lt;br&gt;
    &lt;input type="submit" value="送出"&gt;
&lt;/form&gt;</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>var account = {
  email: 'xx@gmail.com',
  password: '1234'
}
var xhr = new XMLHttpRequest();
xhr.open('post','https://hexschool-tutorial.herokuapp.com/api/signup',true);
xhr.setRequestHeader('Content-type','application/json');
var data = JSON.stringify(account);
xhr.send();</code></pre>



<h4>AJAX 實務範例設計</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>帳號：
&lt;input  type="text' class="account'&gt;
&lt;br&gt;
密碼：
&lt;input type="password" class="password"&gt;
&lt;br&gt;
&lt;input type="button" class="send" value="送出"&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>
var send = document.querySelector('.send');

send.addEventListener('click',signup,false);


function signup(){
    // alert('測試');
    var emailStr = document.querySelector('.account').value;
    var passwordStr = document.querySelector('.password').value;
    var account = {};
    account.email = emailStr;
    account.password = passwordStr;
    // console.log(account);

    var xhr = new XMLHttpRequest();
    xhr.open('post','https://hexschool-tutorial.herokuapp.com/api/signup',true);
    xhr.setRequestHeader('Content-type','application/json');
    var data = JSON.stringify(account);
    xhr.send(data);
    xhr.onload = function(){
        // console.log(xhr);
        var callbackData = JSON.parse(xhr.responseText);
        console.log(callbackData);
        var veriStr = callbackData.message;
        if(veriStr == "帳號註冊成功"){
            alert('帳號註冊成功!!');
        } else {
            alert('帳號註冊失敗!');
        }
    }
}</code></pre>



<h4>AJAX 作業設計</h4>



<p>範例是註冊，作業設計練習登入。</p>



<h4>資源補充</h4>



<p>AJAX 章節練習完畢之後，若您還想額外多練習一些 API 串接的練習，可以參考 Ray 助教整理的&nbsp;<a href="https://github.com/hsiangfeng/APIList" target="_blank" rel="noreferrer noopener">APIList</a>&nbsp;。</p>



<h2>Google Map API</h2>



<h4>Google Map API 提醒</h4>



<p>由於 Google Maps 更新開發條件，在初始設定上改用了付費制，不論是否達到Google地圖收費的標準，都得申請API key，並且綁定信用卡卡號。</p>



<p>由於申請 API 變得較為繁瑣，所以建議這章節先請學員跳過，往後面 ES6 章節投入。</p>



<h4>什麼是 API ？</h4>



<h4>如何評估 API 的可用性</h4>



<h4>Google Map API 初始化與金鑰設定</h4>



<h4>Google Map API 原理介紹</h4>



<h4>增加標記</h4>



<h4>新增多個標記</h4>



<h4>標記 + 第三方 JSON 資料設計</h4>



<h4>繪製客製化 Google Map 樣式</h4>



<h4>客製化 Google Map 標記 icon</h4>



<h4>Google Map API 常見應用</h4>



<h2>Leaflet + OpenStreetMap 地圖應用</h2>



<h4>章節簡介</h4>



<p>本章節為 2020 年發生新冠肺炎(武漢肺炎)時，台灣開發者們提供口罩地圖，以方便民眾購買口罩的教學應用。同學們可以藉由本章節的資源，來設計成口罩地圖介面，並提交最終作業給我們來檢視。</p>



<ul><li><a rel="noreferrer noopener" href="https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json" target="_blank">口罩剩餘數量 JSON API</a></li><li><a href="https://challenge.thef2e.com/works/uiux?stage=10&amp;orderBy=created_at&amp;sort=desc" target="_blank" rel="noreferrer noopener">口罩搞列表、本章教學設計稿</a></li></ul>



<h4>AJAX 與函式應用教學</h4>



<h4>Leaflet + OpenStreetMap 教學</h4>



<ul><li><a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=pUizu62dlnY" target="_blank">Leaflet + OpenStreetMap 地圖應用開發(影片)</a><ul><li><a href="https://quip.com/vdqYAiFHHkaV">共筆文件</a></li></ul></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=7CXnNMVMXeo&amp;feature=youtu.be" target="_blank">示範：使用 Vuejs 結合 Open Street Map 製作口罩地圖(影片)</a><ul><li>活動簡報</li><li><a rel="noreferrer noopener" href="https://github.com/Wcc723/wheremask" target="_blank">Github</a></li><li><a href="https://wcc723.github.io/wheremask/#/" target="_blank" rel="noreferrer noopener">示範作品</a></li></ul></li></ul>



<h4>學員範例作品</h4>



<h2>ECMAScript 6 入門 – let、const</h2>



<h4>ES 6 介紹</h4>



<p>ES 6 – 提升 JS 程式碼品質最佳利器。</p>



<p>JavaScript compiler：<a rel="noreferrer noopener" href="https://babeljs.io/" target="_blank">Babel</a></p>



<h4>window、var 特性</h4>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 盡量避免汙染全域變數
// let、const
var a = 1;
console.log(a);
for(var i=0;i&lt;3;i++){
  console.log(i);
}</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>1
&gt; window
&lt; Window {window: Window, self: Window, document: document, name: "", location: Location, …}
a: 1
&gt; window.a
&lt; 1
&gt; window
&lt; Window {window: Window, self: Window, document: document, name: "", location: Location, …}
a: 1
history: History {length: 1, scrollRestoration: "auto", state: null}
i: 3</code></pre>



<h4>let – if、function 用法</h4>



<p>範例一</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// let 與 const 用來宣告區塊裡的變數
// 區塊 = {  }
if (3 &gt; 2){
  let a = 1;
}</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>&gt; a
VM56:1 Uncaught ReferenceError: a is not defined
    at &lt;anonymous&gt;:1:1
&gt; window
&lt; Window&nbsp;{window: Window, self: Window, document: document, name: "", location: Location,&nbsp;…}</code></pre>



<p>範例二</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// let 與 const 用來宣告區塊裡的變數
// 區塊 = {  }
var a = 0;

// 函數式
function changeA(){
  let a = 0;
  console.log(a);
}
changeA();
console.log(a);</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>1
0</code></pre>



<h4>let – for 用法</h4>



<p>範例一</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>for(let i=0;i&lt;3;i++){
  console.log(i);
}</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>0
1
2
&gt; i
VM176:1 Uncaught ReferenceError: i is not defined
    at &lt;anonymous&gt;:1:1</code></pre>



<p>範例二</p>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;ul class="list"&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
  &lt;li&gt;3&lt;/li&gt;
&lt;/ul&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>const listLen = document.querySelectorAll('.list li').length;
for(let i=0;i&lt;listLen;i++){
  document.querySelectorAll('.list li')&#91;i].addEventListener('click',function(){
  alert(i+1);
  },false)
}</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>// 使用 var 會影響到全域變數
&gt; i
&lt; 3
// 使用 let 會在區塊裡去做重新綁定的動作
&gt; i
  VM246:1 Uncaught ReferenceError: i is not defined
    at &lt;anonymous&gt;:1:1</code></pre>



<h4>const 特性</h4>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// const 唯讀變數 - 不能去做修改
// 變數是不能被更改 - url網址
// {}、&#91;] 是有辦法變更裡面的值
const obj = {
  url: 'https://www.google.com.tw/';
};
obj.url = 'https://www.yahoo.com.tw/';
console.log(obj.url);</code></pre>



<pre class="wp-block-code"><code>const obj = {
    url: 'https://www.google.com.tw/'
};
// 凍結裡面任何的內容
Object.freeze(obj);
obj.url = 'https://www.yahoo.com.tw/';
console.log(obj.url);</code></pre>



<h4>let、const 注意事項與使用時機</h4>



<p>範例一</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// var 有向上提升的特性
// let、const
// 不可犯的錯誤，特性介紹
console.log(a);
let a = 3;
console.log(a);</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>Uncaught ReferenceError: Cannot access 'a' before initialization
    at all.js:3</code></pre>



<p>範例二</p>



<p>JavaScript</p>



<pre class="wp-block-code"><code>// 第二點，同個區塊上不能重複命名
// {}
let a = 1;
let a = 2;

// 不會變成全域變數、不會在window上面</code></pre>



<p>Google Console</p>



<pre class="wp-block-code"><code>Uncaught SyntaxError: Identifier 'a' has already been declared</code></pre>



<h2>ECMAScript 6 入門 – 字串篇</h2>



<h4>Template literals – 輕鬆進行字串相加</h4>



<p>HTML</p>



<pre class="wp-block-code"><code>&lt;ul class="list"&gt;

&lt;/ul&gt;</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>const list = document.querySelector('.list');
const imgUrl = 'images/logo.png';
const title = '六角學院';
// list.innerHTML = '&lt;li&gt;&lt;img src='+imgUrl+'&gt;&lt;/li&gt;'

// 重音符：`
list.innerHTML = `&lt;li&gt;&lt;h2&gt;${title}&lt;/h2&gt;&lt;img src="${imgUrl}"&gt;&lt;/li&gt;`;
</code></pre>



<h4>編輯器與格式支援小技巧</h4>



<p>Windows系統上的設定是：檔案→偏好→設定，點選 Open Settings (JSON)</p>



<pre class="wp-block-code"><code>  "emmet.includeLanguages": {
    "javascript": "html"
},
"emmet.triggerExpansionOnTab": true</code></pre>



<p>Mac系統</p>



<pre class="wp-block-code"><code>"emmet.syntaxProfiles": {
  "javascript": "html"
}</code></pre>



<p>JavaScript</p>



<pre class="wp-block-code"><code>const list = document.querySelector('.list');
const imgUrl = 'images/logo.png';
const title = '六角學院';

// emmet
list.innerHTML = `
  &lt;li&gt;
    &lt;h2&gt;${title}&lt;/h2&gt;
    &lt;img src="${imgUrl}" alt=""&gt;
  &lt;/li&gt;
`</code></pre>



<h2>Vue.js 2.0 – 8小時線上影音課程</h2>



<h4>投入 Vue.js 前，你必須要會的基礎知識</h4>



<p>想學 Vue.js，必須要先學會</p>



<ul><li>HTML、CSS</li><li>需要有基礎 JS 技能，此<a href="https://docs.google.com/forms/d/e/1FAIpQLSeBrQ9NspE3_6MCk2Fi0rMfu3baVcnNrPIEhvKz5ZsB3pwnNw/viewform?c=0&amp;w=1" target="_blank" rel="noreferrer noopener">測驗</a>達 85 分以上便有到門檻</li></ul>



<p>開始進入 Vue.js 線上課程</p>



<ul><li>你可以跟著課程章節往後面投入，也可以看此<a href="https://quip.com/N3iKAEDJEVmD" target="_blank" rel="noreferrer noopener">共筆整合文件</a></li></ul>



<p>官網教學</p>



<ul><li><a rel="noreferrer noopener" href="https://vuejs.org/v2/guide/installation.html" target="_blank">原文教學</a></li><li><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noreferrer noopener">簡體官方文件</a>&nbsp;(chrome 瀏覽器點選又見，便能即時翻譯成繁中版。)</li></ul>



<h4>Vue.js 幼幼班起手式(上)</h4>



<h4>todolist 作業</h4>



<h4>Vue.js 幼幼班起手式(下)</h4>



<h4>從 Vue.js 初探 Web Component 的世界</h4>



<h4>vue-cli</h4>



<h4>Firebase</h4>



<h4>Vuex</h4>



<h4>作業1：颱風防災網</h4>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
